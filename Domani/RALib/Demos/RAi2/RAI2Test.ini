[Demos]
Simple expression
One function
One function with variable
Unit and recursion
OnGetValue Event
Access to Delphi's objects
Exception handling
Working with sets
Handing Delphi events
Records
Calling external functions
Ole automation
RAI2 Adapters
How to import Delphi units
Arrays
Running delphi forms
Running delphi reports
List of supported statements
Credits
Our plans
[]

[Simple expression\Description]
This is simple expression.
RAI2Program component automatically
detects 3 types of sources:
  1) simple expressions;
  2) one function;
  3) unit;

Now press 'Run' button.
Button 'Compile' need unit as source,
so don't work with this sample.

See next example...

[Simple expression\Source]
2*2+(122.34-54.67)*123.5

[One function\Description]
This is one function.
RAI2 detect it by first word;
it must be 'begin' or 'var'.

[One function\Source]
begin
  Result := '2*2+(122.34-54.67)*123.5=' +
    IntToStr(2*2+(122.34-54.67)*123.5);
end;

[One function with variable\Description]
This is one function with var-statement.
RAI2 detect function by first word;
it must be 'begin' or 'var'.

[One function with variable\Source]
var
  Variable : real {type ignored} ;
begin
  Variable := 2*2+(122.34-54.67)*123.5;
  Result := '2*2+(122.34-54.67)*123.5=' + IntToStr(Variable);
end;

[Unit and recursion\Description]
This example shows structure of RAI2 unit.
It's similar to delphi's unit, but interface
and implementation keyword not needed
(and not undestandable).

[Unit and recursion\Source]
unit MyUnit;

function main: string;
var
  IntVariable : integer;
begin
  IntVariable := 5;
  Result := 'Factorial(5)=' +
    IntToStr(Factorial(IntVariable));
end;

function Factorial(F : integer) : integer;
begin
  if F <= 1 then
    Result := F
  else
    Result := F * Factorial(F-1);
end;

end.

[OnGetValue Event\Description]
Function MyFunction calculated in OnGetValue.
It's simply add 1 to passed value.

[OnGetValue Event\Source]
MyFunction(10000)

[Access to Delphi's objects\Description]
This example demonstrates:
  - assigning delphi object to RAI2 variable;
  - calling method from object;
  - creating new object with call to
    class function Create;
  - calling function with var parameter
    (TStringList.Find);
  - if/then/else statement;
  - try/finally statement;

  Now not working:
  - default properties;

[Access to Delphi's objects\Source]
var
  v : TObject;
  B : TStringList;
  L : integer;
  r : boolean;
begin
  V := Application.FindComponent('Test').
     FindComponent('Memo2').Lines;
  B := TStringList.Create;
  try
    B.Assign(V);
    B.Add('MyLine');
    r := B.Find('MyLine', L);
    if r then
      Result := 'found line at position ' +
        IntToStr(L)
    else
      Result := 'not found';
  finally
    B.Free;
  end;
end;

[Exception handling\Description]
RAI2 understand try/finally and
try/except statements.
Exceptions in RAI2 is native Delphi
exceptions. It means that exceptions
rased in RAI2 may be handled in
Delphi and exceptions, raised in
Delphi functions called from RAI2
source may be handled in RAI2 source.
To raise exception used standard
Delphi directive: raise <Object>.

Note: to raise exceptions you need
create instance of object. It means,
that this object must be registered
in RAI2 adapter.

See next examples.

[Exception handling\Source]
var
  v, B : Variant;
begin
  B := 'ok';
  try
   // raise Exception.Create('Self generated error');
    V := 1 div 0;
    V := V + 1;
  except
    on E: EOverflow do
      B : = 'EOverflow: ' + E.Message;
    on EIntOverflow do
      B : = 'EIntOverflow: ' + E.Message;
    on E: EZeroDivide do
      B : = 'EZeroDivide: ' + E.Message;
    else
      raise
  end;
  Result := ': ' + B;
end;

[Handing Delphi events]
Page=Event
[Handing Delphi events\Description]
In RAI2 source you can handle
delphi events with standard delphi
manner.

Note: to handle events event type
must be registered in RAI2 Adapter.

Now click 'Run', then click 'Button4'.

[Handing Delphi events\Source]
unit Unit1;

procedure ButtonClick(Sender: TObject);
begin
  MessageBox(0, TButton(Sender).Caption + ' clicked!', 'Information', MB_ICONINFORMATION);
end;

procedure main;
var
  v, B : Variant;
  L : integer;
  r : boolean;
begin
  V := Test.FindComponent('Button4');
  TButton(V).OnClick := ButtonClick;
end;

end.

[Working with sets\Description]
RAI2 allows you work with native
delphi sets, but only sets with
up to 32 elements allows.

Note: you can't work with charset,
because it contains more than 32 elements.

[Working with sets\Source]
var
  v : Variant;
  S : string;
  St: Variant;
begin
  V := Test.FindComponent('Button1');
  St := V.Font.Style;  
  S := V.Caption;
  try
    V.Font.Style := V.Font.Style + [fsBold, fsItalic];
    V.Caption := 'Hello';
    MessageBox(0, 'Hello', 'Information', MB_ICONINFORMATION);
  finally
    V.Caption := S;
    V.Font.Style := St;
  end;
end;

[Records\Description]
In RAI2 you can work with Delphi
records. We provide access to
following record types:
TPoint, TRect, TSearchRec.

You can add other records using
RAI2 Adapters. See next example.

[Records\Source]
var
  F : TSearchRec;
  DosError: Integer;
  Strings: TStrings;
begin
  Strings := Test.FindComponent('Memo2').Lines;
  Strings.Clear;
  DosError := FindFirst('C:\*.*', faAnyFile, F);
  while DosError = 0 do
  begin
    if (F.Attr and faDirectory) = 0 then
      Strings.Add(F.Name)
    else
      Strings.Add('\' + F.Name);
    DosError := FindNext(F);
  end;
  FindClose(F);
  DosError := 0;
end;

[Calling external functions\Description]
You can declare external function
in source and then call it.

Note: only standard types allowed;
var parameters not allowed.

[Calling external functions\Source]
unit Unit1;

function MessageBox(hWnd: integer; lpText, lpCaption: PChar; uType: integer): Integer;
  external 'user32.dll' name 'MessageBoxA';

Procedure main;
begin
  MessageBox(0, 'Hello, World !', 'calling dll', MB_ICONINFORMATION);
end;

end.

[Ole automation\Description]

[Ole automation\Source]
var
  MSW: Variant;
  i: Integer;
begin
  MSW := GetOleObject('Word.Basic');
  MSW.AppShow;
  MSW.FileNew;
  MSW.Insert('RAI2 Demo !');
  MSW := 0;
end;

[RAI2 Adapters]
Page=Empty
[RAI2 Adapters\Description]
All functions, classes, records, ..
must be registered in RAI2 Adapter
before they can be used in RAI2 source.
Hovewer you creates special unit
to obtain calls to delphi functions
and objects. This special units
we calls 'RAI2 Adapters' or 'Adapters'.

This version of R&A Library includes
Adapters:
RAI2_System, RAI2_SysUtils,
RAI2_Windows(only few functions and constants),
RAI2_Classes, RAI2_Controls,
RAI2_StdCtrls, RAI2_ExtCtrls,
RAI2_Forms, RAI2_Dialogs,
RAI2_Graphics, RAI2_Menus,
RAI2_Grids, RAI2_Db,
RAI2_DbTables, RAI2_DBCtrls,
RAI2_DBGrids, RAI2_Quickrpt;

All adapters based on Delphi 3 units;
Compiler {$IF} directives allows
to compile it in all version.

'Quickrpt' unit very different in
Delphi versions.
RAI2_Quickrpt based on Delphi3
and contains code for Delphi2
and CBuilder1, but this code not
complete, because we don't have
QuickReport 1 sources.

[How to import Delphi units]
Page=Empty
[How to import Delphi units\Description]
You can create adapter units
manually, but it's not very interesting.

Use program Pas2Rai2, placed in
'RALib\Tools\Pas2Rai2' folder to
automatically create RAI2 Adapters.
In most cases errors occured when
you try to compile created unit, so
you must manually correct it.

Take a look at the adapter sources,
included in R&A Library. This is
good examples. All adapters
illustrates access to Delphi objects.
RAI2_Windows shows access to
records and external functions.


[Arrays\Description]
RAI2 supports multidimensional arrays
as local and global variables. Also
supported arrays in indexed properties 
and in open array parameters.

Note, that RAI2 now not supports
default indexed property.
It means that you must write
 Memo1.Lines.Strings[1] := 'Hello',
but folowing line generate error
 Memo1.Lines[1] := 'Hello'.

[Arrays\Source]
var 
  A:Array [1..200] of integer;
  i:Integer;
begin
  for i := 1 to 200 do
  begin
   A[I] := i*i;
   Result:= A[200];
  end;
end;


[Running delphi forms]
Page=ExternalForm
[Running delphi forms\Description]
TRAI2Fm component can create
delphi form from dfm-file, load
assotiated pas-file.
Then it can show form, or you can
call any function from it pas-file.

RAI2 attempts to load normal Delphi
pas-file and ignore all interface part.

Click 'Run form...' and select
'Unit1.dfm'. Then try to interact
with form.


[Running delphi reports]
Page=ExternalReport
[Running delphi reports\Description]
And now example that demonstrate
the main purpose of RAI2.

This sample based on previous but
loaded form not showing.
We attempt to find QuickRep1 (for
QR2) or QuickReport1 (for QR1)
component on the form  and then
call it Preview method.

Loaded form can contains it own
data access components or reference
to components in .exe forms or
data modules;

Click 'Run report...' and select
'QRUnit_D3_D4_B3.dfm' or
'QRUnit_D2_B1.dfm' depending on
your Delphi versions. 

Now you can creates reports in your
lovest Delphi environment, then
send them to your clients (only pas-
and dfm-files). No needs to recompile
project and sends megabytes.
Also you can easy create custom
report for each client and ...........

Let us know what you think about it:
mail to us now: blacknbs@chat.ru.

[List of supported statements]
Page=Empty
[List of supported statements\Description]
Now RAI2 supports following pascal
statements:
  - begin/end;
  - var declaration;
  - const declaration;
  - if/then/else;
  - for/do;
  - while/do;
  - repeat/until;
  - break, continue;
  - exit;
  - try/finally;
  - try/except/on;
  - raise and raise <object>;
  - assignment;
  - function calls;
  - uses clause;

[Credits]
Page=Empty
[Credits\Description]
RAI2 is fully writen by us,
R&A Library authors.

But some good ideas (no line
of code) was taken from
'Delphin interpreter' by
Dream Company:
  www.dreamcompany.com

Many guys sent us bug reports and
fixes.
Andrej Olejnik has coded array support in rai2.

[Our plans]
Page=Empty
[Our plans\Description]
The work above RAI2 now is not
yet completed.

Planned in next verison:
  - case;

Not planned:
  - nested function declarations;
  - type declarations;

We very need you comments.
If you found RAI2 interesting
or not, please mail to us:

  black@infa.ru.
  blacknbs@chat.ru.

[Our plans\Source]
'The work above RAI2 now is not           '
'yet completed.                           '
'                                         '
'Planned in next verison:                 '
'  - case;                                '
'                                         '
'Not planned:                             '
'  - nested function declarations;        '
'  - type declarations;                   '
'                                         '
'We very need you comments.               '
'If you found RAI2 interesting            '
'or not, please mail to us:               '

  black@infa.ru.
  blacknbs@chat.ru.

