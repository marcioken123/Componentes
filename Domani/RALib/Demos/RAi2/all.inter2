begin
  Result := 0;
  if true > true then
  begin
    Result := 1000;
    if true = true then
    begin
      Result := Result + 1;
    //  Result := 5;
     // Result := Result + 100;
    end
    else
      Result := Result + 2
  end
  else
    Result := Result + 3;
  Result := Result + 100;
end;
--------------------------
begin
  if true > true then
  begin
    if true > true then
    begin
      Result := 1;
      Result := 2;
     // Result := Result + 100;
    end
    else
      Result := 2
  end
//  else
//    Result := 3
end;

---------------------
procedure main;
var
  F : TSearchRec;
  DosError: Integer;
  Strings: TStrings;
begin
  Strings := Test.FindComponent('Memo3').Lines;
  Strings.Clear;
  DosError := FindFirst('C:\Temp\*.*', 0, F);
  while DosError = 0 do
  begin
    Strings.Add(F.Name);
    DosError := FindNext(F);
  end;
  FindClose(F);
  DosError := 0;
end;
---------------------
unit Unit1;
                                                          
uses Windows;
                        
procedure ButtonClick(Sender: TObject);
//var v: integer;
begin
  MessageBox(0, Sender.Caption + ' clicked!', 'Information', MB_ICONINFORMATION);
end;
                                                                                                                                                                                                                             
procedure main;
var
  v, B : Variant;
  L : integer;
  r : boolean;
begin
  V := Test.FindComponent('Button6');
  V.OnClick := ButtonClick;
end;

function MessageBox(hWnd: integer; lpText, lpCaption: PChar; uType: integer): Integer; 
  external 'user32.dll' name 'MessageBoxA';

end.

----------------------
unit Unit1;

uses Windows;

procedure ButtonClick(Sender: TObject);
//var v: integer;
begin
  MessageBox(0, Sender.Caption + ' clicked!', 'Information', MB_ICONINFORMATION);
end;

procedure main;
var
  v, B : Variant;
  L : integer;
  r : boolean;
begin
  V := Test.FindComponent('Memo3').Lines;
  B := TStringList.Create;
  try
    B.Assign(V);
    B.Add('MyLine');
    r := B.Find('MyLine', L);
  finally
    B.Free;
  end;
  L := L;
end;

function MessageBox(hWnd: integer; lpText, lpCaption: PChar; uType: integer): Integer; 
  external 'user32.dll' name 'MessageBoxA';

end.
----------------------


begin {1}
  begin {2}
    begin {3}
      f;
    end; {3}
  end; {2}
end; {1}
end.

********************************************************
unit Unit1;

function func1: integer;
var
  v, B : Variant;
begin
  MessageBox(0, 'func1', 'call', MB_ICONINFORMATION);
end;

Procedure main;
var
  v, B : Variant;
begin
 // MessageBox(0, 'Hello, World !', 'calling dll', MB_ICONINFORMATION);
 // try
    func1;
 // except
  //  MessageBox(0, 'calling func1 failed', 'call error', 0);
 // end;
end;

//function MessageBox(hWnd: integer; lpText, lpCaption: PChar; uType: integer): Integer; 
//  external 'user32.dll' name 'MessageBoxA';

end.
*******************************************************

var
  v, B : Variant;
begin
  ShowMessage(0, 'Hello, World !', 'calling dll', 0);
end;

var
  v, B : Variant;
begin
  B := 'ok';
  try  
    V := 0;
    raise EZeroDivide.Create('Self generated error');
   // V := 1 div 0;
    V := V + 1;
  except
    on E: EOverflow do   
      B : = 'EOverflow: ' + E.Message;
    on EIntOverflow do   
      B : = 'EIntOverflow: ' + E.Message;
    on E: EZeroDivide do  
      B : = 'EZeroDivide: ' + E.Message;
    else 
      raise   
    //  B : = 'Exception';
  end;
  V := ': ' + B;      
end;

var
  v, B : Variant;
begin
  B := 'ok';
  try  
    V := 0;
    V := 1 div 0;
    V := V + 1;
  except
    on E: EOverflow do   
      B : = 'EOverflow';
    on EIntOverflow do   
      B : = 'EIntOverflow';
   // on E: EZeroDivide do  
   //   B : = 'EZeroDivide';
    else raise   
     // B : = 'Exception';
  end;
  V := ': ' + B;      
end;

var
  v, B1 : Variant;
begin
  try
    V := 0;
    V := 1 div 0;
    V := V + 1;
  finally
    V := 100 + V;
  end;
  V := V + 1;
end;

var
  v, B1 : Variant;
begin
  B1 := Test.FindComponent('pnlResult');
  if B1 <> 0 then
    B1.BevelOuter := bvLowered;
end;

var
  v, B1 : Variant;
begin
  V := TButton.Create(Test);
  V.Parent := Test;
  V.Caption := 'Test';
  B1 := Test.FindComponent('Button1');
  V.BoundsRect := B1.BoundsRect;
  V.Left := B1.Left + B1.Width + 10;
end;

var
  v : Variant;
begin
  V := Test.FindComponent('Button1');
  V.Font.Style := V.Font.Style + [fsBold, fsItalic];
  V.Caption := 'Привет';
end;

var
  MSW: Variant;
begin      
  MSW := GetOleObject('Word.Application');
  MSW.Visible := True;
end;

var
  MSW: Variant;
  i: Integer;
begin
  MSW := GetOleObject('Word.Basic');
  MSW.AppShow;
//  MSW.FileNew;
//  MSW.Insert('RAI2 Demo !');
  i := MSW.AppInfo(16);
  MSW := 0;
end;

var
  V: Variant;
  P: TPoint;
  i, i2: integer;
begin
  V := Test.FindComponent('Button1');  
  P := V.ClientOrigin;
  i := P.X;
end;

var
  V: TStrings;
begin
  V := Test.FindComponent('Memo3');
  V.Lines.Strings[0] := V.Lines.Strings[1] + '213';
end;

var
  V, R, S, i: Variant;
begin
  V := Test;
  S := '';
  i := 0;
  for i := 0 to V.ComponentCount - 1 do
  begin
   // S := S + ', ' + V.Components(i).Name;
  end;
end;

var
  i, v: integer;
begin
  v := 0;
  for i:=1 to 100 do v := v + 1;
end;

var
  V, R, S, i: Variant;
begin
  V := Test;
  S := '';
  R := V.ComponentCount;
  i := 0;
  for i := 0 to R - 1 do
  begin
    S := S + ', ' + V.Components(i).Name;
  end;
end;

var
  v : integer;
begin
  Test.Font.Size := 14;
  V := 'Hello world !';
end;

var
  v : integer;
begin
  v := 10+Test.ShowMessage('Hello')
end;

var
  v: integer;
begin
  v := 'Hello world !';
  Test.ShowMessage(v);
end;

begin
  i:=1;
  while i < 10000 do
  begin  
    i := i + 1;
    if i > 2 then 
    begin     
      break ;
    end;
  end;
end;

begin
  i:=1;
  while i < 10000 do
  begin  
    i := i + 1;
    i := i + 1;
    if i > 2 then 
    begin     
      break ;
     // continue
    end;
  end;
end;

i:=1+2;
i

1+2*3+23+56*(34-12)
true and false and True or not True

begin
  i:=1;
 // if true then ;
 // i:=i+1;
end;

  if false then
  begin 
    i:=i+1;
    i:=i+2;
  end;

begin
  if false then 
  else if true then
    i := 2
  else 
    i := 3
  i := 0;
 // while i < 1000 do i := i+1;
//  while i < 1000 do i := i+1;
end;

  if false then 
    i := 2
  else 
    i := 3

  v := 0;
  for i:=1 to 10000 do v := v + 1;


  for i:=1 to 10000 do 
  begin  
    if i = 5000 then 
    begin     
      break 
    end
  end;

var
  i, v : integer;
begin
  i:=(1 / 0.1);
  while i < 1000 do
  begin  
    v := 10;
    i := i + 1;
    if i > 20000 then 
      break
  end;
end;

var
  Font, V: TFont;
begin
  Font := TFont.Create;
  Font.Size := 10;
  Test.Font.Assign(Font);
  Font.Free;
  V := Test.Name;
end;