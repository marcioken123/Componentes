<?xml version="1.0" encoding="UTF-8"?>

<SchemeList root='Main'>

      <Scheme name='Text' inherit='Numbers'>
            <Regex token0='email'>
                [_a-zA-Z\d\-\.]{1,40}
                @ 
                ([_ a-z A-Z \d \-]+ 
                (\. [_ a-z A-Z \d \-]+ )+ )
            </Regex>                
      </Scheme>

      <Scheme name='Numbers'>
        <Regex token0='number'>\b (0x \d+ [lL]? | \d+ (e \d*)? [lLdDfF]? ) \b</Regex>
        <Regex token0='number'>\b [+\-]? \d+ (\. \d+)? ([eE] [+\-]? \d+) \b</Regex>
      </Scheme>

      <Scheme name='Comment' inherit='Text' defaultToken='comment'>
        <Regex token0='st' regex=' [ {} ]   ' />
        <Regex token0='st' regex=' ( \(\* )|( \*\) )   ' />
                
         <SyntaxBlock capture="true">
            <Start> st:{  </Start>
            <End> st:}  </End>
         </SyntaxBlock>                
         
         <SyntaxBlock capture="true">
            <Start> st:(*  </Start>
            <End> st:*)  </End>
         </SyntaxBlock>                         
      </Scheme>

      <Scheme name='String' inherit='Text' defaultToken='string'>
      </Scheme>

      <Scheme name='BadString' inherit='String' defaultToken='badString'>
      </Scheme>

      <Scheme name='StringFind'>
        <Regex innerScheme='BadString' > 
            &apos; .*? $ 
        </Regex>

        <Regex innerScheme='String' priority='30'> 
            &apos; .*? &apos;
        </Regex>
        
      </Scheme>
    
      <Scheme name='Preprocessor' defaultToken='preprocessor' inherit='Numbers' >

        <IdentRe>\b[a-zA-Z]+\b</IdentRe>

        <Keywords>
          if ifdef endif else ifend defined
        </Keywords>

        <Regex token0='symbol' regex='[   \}   \{    \]    \[  \( \) &gt; &lt; ]' />
        <Regex token0='symbol' regex='[-=+]' />

      </Scheme>
    
    <Scheme name='Main' inherit='StringFind' 
            defaultToken='default'           

            keywordsIgnoreCase='true'
    >
    <KeywordRegex>\b[a-zA-Z_][\w_]*\b</KeywordRegex>

    <Keywords>
        and     else    inherited   packed  then    array   end     initialization      procedure 
        threadvar       as          except  inline  program to      asm                 exports 
        interface       property    try     begin   file    is      raise               type 
        case            final       label   record  unit    class   finalization        library 
        repeat          unsafe      const   finally mod     resourcestring              until 
        constructor     for         nil     sealed  uses    destructor                  function 
        not             set         var     dispinterface   goto    object              shl 
        while           div         if      of      shr     with    do                  implementation 
        or              static      xor     downto  in      out     string 

        absolute        dynamic     local   platform        requires                    abstract 
        export          message     private                 resident                    assembler 
        external        name        protected               safecall                    automated 
        far             near        public  stdcall         cdecl                       forward 
        nodefault       published   stored  contains        implements                  overload 
        read            varargs     default index   override                            readonly 
        virtual         deprecated  inline  package register        write   dispid      library 
        pascal          reintroduce writeonly 
    </Keywords>


    <Regex innerScheme='Comment' regex='//.*$' />


    <RegexBlock start='\(\*' end='\*\)' end_token0='comment' priority='10'
                innerScheme='Comment'/>

    <RegexBlock start='\{\$' end='\}' start_token0='preprocessor' end_token0='preprocessor' priority='100'
                innerScheme='Preprocessor'/>

    <RegexBlock start='\{' end='\}' end_token0='comment' priority='100'
                innerScheme='Comment'/>

    <Regex token0='symbol' regex='[   \}   \{    \]    \[  \( \) &gt; &lt; ]' />
    <Regex token0='symbol' regex='[-:?\~=+!^;,]' />


    <SkipSyntaxToken token='comment' />

    <SyntaxBlock capture="true">
        <Start> [ kw:procedure kw:function kw:destructor  kw:constructor ] 
                [^ kw:procedure kw:initialization 
                   kw:finalization
                   kw:implementation
                   kw:destructor  
                   kw:constructor
                   kw:class
                   kw:end ]+? kw:begin  </Start>
        <End> kw:end  </End>
    </SyntaxBlock>

    <SyntaxBlock capture="true" priority='100' >
        <Start> kw:if [^ kw:end sym:; ]+? kw:then  kw:begin </Start>
        <End> kw:end  </End>
    </SyntaxBlock>

    <SyntaxBlock capture="true">
        <Start> [ kw:if kw:for kw:while kw:with kw:else  ]  [^ kw:begin kw:end  sym:; ]+ </Start>
        <End> sym:;  </End>
    </SyntaxBlock>


    <SyntaxBlock capture="true">
        <Start> [ kw:with kw:for kw:while ] [^ kw:end  sym:; ]+? kw:do  kw:begin </Start>
        <End> kw:end  </End>
    </SyntaxBlock>

    <SyntaxBlock capture="true">
        <Start> id sym:= [ kw:class kw:record ]  [^ sym:; kw:of  ]</Start>
        <End> kw:end  </End>
    </SyntaxBlock>

    <SyntaxBlock capture="false" priority='0'  >
        <Start> kw:begin  </Start>
        <End> kw:end  </End>
    </SyntaxBlock>

    </Scheme>
</SchemeList>
