unit LMDXPStyles;
{$I lmdcmps.inc}
{###############################################################################

LMDXPStyles unit (VB)
---------------------

ToDo
----

Changes
-------
Release 8.0 (XX 2007)
 - Initial Release

###############################################################################}


{$IFDEF LMCOMP7}
{$HPPEMIT ''}
{$HPPEMIT '#include "uxtheme.h"'}
{$HPPEMIT ''}
{$ENDIF}


{$MINENUMSIZE 4}

interface

uses
  Messages, Windows, Types,
  {$IFDEF CLR} System.Text, System.Runtime.InteropServices, {$endif ifdef CLR}
  LMDDebugUnit,{$IFDEF LMDDISABLE_LMDTHEMES} UxTheme, {$ENDIF} LMDTypes;


var
  XPThemesAvailable : Boolean;

const
  LMDBASE_PART = 1;
  LMDBASE_STATE = 1;

// <-- used in elpack --
  {$EXTERNALSYM MENU_POPUPITEM}
  MENU_POPUPITEM = 14;
  {$EXTERNALSYM MPI_NORMAL}
  MPI_NORMAL = 1;
  {$EXTERNALSYM MPI_HOT}
  MPI_HOT = 2;
  {$EXTERNALSYM MPI_DISABLED}
  MPI_DISABLED = 3;
  {$EXTERNALSYM MPI_DISABLEDHOT}
  MPI_DISABLEDHOT = 4;

  {$EXTERNALSYM BSS_FLAT}
  BSS_FLAT = LMDBASE_STATE + 0;
  {$EXTERNALSYM BSS_RAISED}
  BSS_RAISED = LMDBASE_STATE + 1;
  {$EXTERNALSYM BSS_SUNKEN}
  BSS_SUNKEN = LMDBASE_STATE + 2;
  {$EXTERNALSYM GP_BORDER}
  GP_BORDER = LMDBASE_PART + 0; // GP_BORDER = 32;

  CBS_SCROLLSIZEGRIP      = 1; // undocumented
  CBS_SCROLLSIZEGRIPRIGHT = 2; // undocumented

// -- used in elpack -->

{$IFNDEF LMDDISABLE_LMDTHEMES}
  {$EXTERNALSYM TMT_FILLCOLOR}
  TMT_FILLCOLOR           = 3802;

  {$EXTERNALSYM TMT_SCROLLBAR}
  TMT_SCROLLBAR           = 1601;

  {$EXTERNALSYM TMT_TEXTCOLOR}
  TMT_TEXTCOLOR           = 3803;

  {$EXTERNALSYM TMT_BTNSHADOW}
  TMT_BTNSHADOW           = 1617;

{$IFNDEF LMDDISABLE_LMDTHEMEENGINE}
  {$EXTERNALSYM BT_IMAGEFILE}
  BT_IMAGEFILE  = 0;
  {$EXTERNALSYM BT_BORDERFILL}
  BT_BORDERFILL = 1;
  {$EXTERNALSYM BT_NTLFILE}
  BT_NTLFILE    = 2;
  {$EXTERNALSYM BT_NONE}
  BT_NONE       = 3;

  {$EXTERNALSYM IL_HORIZONTAL}
  IL_HORIZONTAL = 0;
  {$EXTERNALSYM IL_VERTICAL}
  IL_VERTICAL   = 1;

  {$EXTERNALSYM BT_RECT}
  BT_RECT       = 0;
  {$EXTERNALSYM BT_ROUNDRECT}
  BT_ROUNDRECT  = 1;
  {$EXTERNALSYM BT_ELLIPSE}
  BT_ELLIPSE    = 2;

  {$EXTERNALSYM FT_SOLID}
  FT_SOLID         = 0;
  {$EXTERNALSYM FT_VERTGRADIENT}
  FT_VERTGRADIENT  = 1;
  {$EXTERNALSYM FT_HORZGRADIENT}
  FT_HORZGRADIENT  = 2;
  {$EXTERNALSYM FT_RADIALGRADIENT}
  FT_RADIALGRADIENT= 3;
  {$EXTERNALSYM FT_TILEIMAGE}
  FT_TILEIMAGE     = 4;

  {$EXTERNALSYM ST_TRUESIZE}
  ST_TRUESIZE      = 0;
  {$EXTERNALSYM ST_STRETCH}
  ST_STRETCH       = 1;
  {$EXTERNALSYM ST_TILE}
  ST_TILE          = 2;

  {$EXTERNALSYM HA_LEFT}
  HA_LEFT          = 0;
  {$EXTERNALSYM HA_CENTER}
  HA_CENTER        = 1;
  {$EXTERNALSYM HA_RIGHT}
  HA_RIGHT         = 2;

  {$EXTERNALSYM CA_LEFT}
  CA_LEFT          = 0;
  {$EXTERNALSYM CA_CENTER}
  CA_CENTER        = 1;
  {$EXTERNALSYM CA_RIGHT}
  CA_RIGHT         = 2;

  {$EXTERNALSYM VA_TOP}
  VA_TOP           = 0;
  {$EXTERNALSYM VA_CENTER}
  VA_CENTER        = 1;
  {$EXTERNALSYM VA_BOTTOM}
  VA_BOTTOM        = 2;

  {$EXTERNALSYM OT_TOPLEFT}
  OT_TOPLEFT       = 0;
  {$EXTERNALSYM OT_TOPRIGHT}
  OT_TOPRIGHT      = 1;
  {$EXTERNALSYM OT_TOPMIDDLE}
  OT_TOPMIDDLE     = 2;
  {$EXTERNALSYM OT_BOTTOMLEFT}
  {$EXTERNALSYM OT_BOTTOMLEFT}
  OT_BOTTOMLEFT    = 3;
  {$EXTERNALSYM OT_BOTTOMRIGHT}
  OT_BOTTOMRIGHT   = 4;
  {$EXTERNALSYM OT_BOTTOMMIDDLE}
  OT_BOTTOMMIDDLE  = 5;
  {$EXTERNALSYM OT_MIDDLELEFT}
  OT_MIDDLELEFT    = 6;
  {$EXTERNALSYM OT_MIDDLERIGHT}
  OT_MIDDLERIGHT   = 7;
  {$EXTERNALSYM OT_LEFTOFCAPTION}
  OT_LEFTOFCAPTION = 8;
  {$EXTERNALSYM OT_RIGHTOFCAPTION}
  OT_RIGHTOFCAPTION= 9;
  {$EXTERNALSYM OT_LEFTOFLASTBUTTON}
  OT_LEFTOFLASTBUTTON = 10;
  {$EXTERNALSYM OT_RIGHTOFLASTBUTTON}
  OT_RIGHTOFLASTBUTTON= 11;
  {$EXTERNALSYM OT_ABOVELASTBUTTON}
  OT_ABOVELASTBUTTON  = 12;
  {$EXTERNALSYM OT_BELOWLASTBUTTON}
  OT_BELOWLASTBUTTON  = 13;

  {$EXTERNALSYM ICE_NONE}
  ICE_NONE            = 0;
  {$EXTERNALSYM ICE_GLOW}
  ICE_GLOW            = 1;
  {$EXTERNALSYM ICE_SHADOW}
  ICE_SHADOW          = 2;
  {$EXTERNALSYM ICE_PULSE}
  ICE_PULSE           = 3;
  {$EXTERNALSYM ICE_ALPHA}
  ICE_ALPHA           = 4;

  {$EXTERNALSYM TST_NONE}
  TST_NONE            = 0;
  {$EXTERNALSYM TST_SINGLE}
  TST_SINGLE          = 1;
  {$EXTERNALSYM TST_CONTINUOUS}
  TST_CONTINUOUS      = 2;

  {$EXTERNALSYM GT_NONE}
  GT_NONE             = 0;
  {$EXTERNALSYM GT_IMAGEGLYPH}
  GT_IMAGEGLYPH       = 1;
  {$EXTERNALSYM GT_FONTGLYPH}
  GT_FONTGLYPH        = 2;

  {$EXTERNALSYM IST_NONE}
  IST_NONE            = 0;
  {$EXTERNALSYM IST_SIZE}
  IST_SIZE            = 1;
  {$EXTERNALSYM IST_DPI}
  IST_DPI             = 2;

  {$EXTERNALSYM TSST_NONE}
  TSST_NONE           = 0;
  {$EXTERNALSYM TSST_SIZE}
  TSST_SIZE           = 1;
  {$EXTERNALSYM TSST_DPI}
  TSST_DPI            = 2;

  {$EXTERNALSYM GFST_NONE}
  GFST_NONE           = 0;
  {$EXTERNALSYM GFST_SIZE}
  GFST_SIZE           = 1;
  {$EXTERNALSYM GFST_DPI}
  GFST_DPI            = 2;

  {.$EXTERNALSYM TMT_BASE200}
  TMT_BASE200         = 200;
  {$EXTERNALSYM TMT_STRING}
  TMT_STRING          = 201;
  {$EXTERNALSYM TMT_INT}
  TMT_INT             = 202;
  {$EXTERNALSYM TMT_BOOL}
  TMT_BOOL            = 203;
  {$EXTERNALSYM TMT_COLOR}
  TMT_COLOR           = 204;
  {$EXTERNALSYM TMT_MARGINS}
  TMT_MARGINS         = 205;
  {$EXTERNALSYM TMT_FILENAME}
  TMT_FILENAME        = 206;
  {$EXTERNALSYM TMT_SIZE}
  TMT_SIZE            = 207;
  {$EXTERNALSYM TMT_POSITION}
  TMT_POSITION        = 208;
  {$EXTERNALSYM TMT_RECT}
  TMT_RECT            = 209;
  {$EXTERNALSYM TMT_FONT}
  TMT_FONT            = 210;
  {$EXTERNALSYM TMT_INTLIST}
  TMT_INTLIST         = 211;

  {.$EXTERNALSYM TMT_BASE400}
  TMT_BASE400         = 400;
  {$EXTERNALSYM TMT_COLORSCHEMES}
  TMT_COLORSCHEMES    = 401;
  {$EXTERNALSYM TMT_SIZES}
  TMT_SIZES           = 402;
  {$EXTERNALSYM TMT_CHARSET}
  TMT_CHARSET         = 403;

  {.$EXTERNALSYM TMT_BASE600}
  TMT_BASE600         = 600;
  {$EXTERNALSYM TMT_DISPLAYNAME}
  TMT_DISPLAYNAME     = 601;
  {$EXTERNALSYM TMT_TOOLTIP}
  TMT_TOOLTIP         = 602;
  {$EXTERNALSYM TMT_COMPANY}
  TMT_COMPANY         = 603;
  {$EXTERNALSYM TMT_AUTHOR}
  TMT_AUTHOR          = 604;
  {$EXTERNALSYM TMT_COPYRIGHT}
  TMT_COPYRIGHT       = 605;
  {$EXTERNALSYM TMT_URL}
  TMT_URL             = 606;
  {$EXTERNALSYM TMT_VERSION}
  TMT_VERSION         = 607;
  {$EXTERNALSYM TMT_DESCRIPTION}
  TMT_DESCRIPTION     = 608;


  TMT_FIRST_RCSTRING_NAME = TMT_DISPLAYNAME;
  TMT_LAST_RCSTRING_NAME  = TMT_DESCRIPTION;

  {.$EXTERNALSYM TMT_BASE800}
  TMT_BASE800         = 800;
  {$EXTERNALSYM TMT_CAPTIONFONT}
  TMT_CAPTIONFONT     = 801;
  {$EXTERNALSYM TMT_SMALLCAPTIONFONT}
  TMT_SMALLCAPTIONFONT= 802;
  {$EXTERNALSYM TMT_MENUFONT}
  TMT_MENUFONT        = 803;
  {$EXTERNALSYM TMT_STATUSFONT}
  TMT_STATUSFONT      = 804;
  {$EXTERNALSYM TMT_MSGBOXFONT}
  TMT_MSGBOXFONT      = 805;
  {$EXTERNALSYM TMT_ICONTITLEFONT}
  TMT_ICONTITLEFONT   = 806;

  TMT_FIRSTFONT       = TMT_CAPTIONFONT;
  TMT_LASTFONT        = TMT_ICONTITLEFONT;

  {.$EXTERNALSYM TMT_BASE1000}
  TMT_BASE1000        = 1000;
  {$EXTERNALSYM TMT_FLATMENUS}
  TMT_FLATMENUS       = 1001;
  {$EXTERNALSYM TMT_SYSTEMSIZE}
  TMT_SYSTEMSIZE      = 1002;
  {$EXTERNALSYM TMT_SYSTEMPOS}
  TMT_SYSTEMPOS       = 1003;

  TMT_FIRSTBOOL       = TMT_FLATMENUS;
  TMT_LASTBOOL        = TMT_FLATMENUS;

  {.$EXTERNALSYM TMT_BASE1200}
  TMT_BASE1200          = 1200;
  {$EXTERNALSYM TMT_BORDERWIDTH}
  TMT_BORDERWIDTH       = 1201;
  {$EXTERNALSYM TMT_SCROLLBARWIDTH}
  TMT_SCROLLBARWIDTH    = 1202;
  {$EXTERNALSYM TMT_SCROLLBARHEIGHT}
  TMT_SCROLLBARHEIGHT   = 1203;
  {$EXTERNALSYM TMT_CAPTIONBARWIDTH}
  TMT_CAPTIONBARWIDTH   = 1204;
  {$EXTERNALSYM TMT_CAPTIONBARHEIGHT}
  TMT_CAPTIONBARHEIGHT  = 1205;
  {$EXTERNALSYM TMT_SMCAPTIONBARWIDTH}
  TMT_SMCAPTIONBARWIDTH = 1206;
  {$EXTERNALSYM TMT_SMCAPTIONBARHEIGHT}
  TMT_SMCAPTIONBARHEIGHT= 1207;
  {$EXTERNALSYM TMT_MENUBARWIDTH}
  TMT_MENUBARWIDTH      = 1208;
  {$EXTERNALSYM TMT_MENUBARHEIGHT}
  TMT_MENUBARHEIGHT     = 1209;

  TMT_FIRSTSIZE         = TMT_BORDERWIDTH;
  TMT_LASTSIZE          = TMT_MENUBARHEIGHT;

  {.$EXTERNALSYM TMT_BASE1300}
  TMT_BASE1300          = 1300;
  {$EXTERNALSYM TMT_DPIX}
  TMT_DPIX              = 1301;
  {$EXTERNALSYM TMT_DPIY}
  TMT_DPIY              = 1302;
  {$EXTERNALSYM TMT_MINCOLORDEPTH}
  TMT_MINCOLORDEPTH     = 1303;

  TMT_FIRSTINT          = TMT_DPIX;
  TMT_LASTINT           = TMT_MINCOLORDEPTH;

  {.$EXTERNALSYM TMT_BASE1400}
  TMT_BASE1400          = 1400;
  {$EXTERNALSYM TMT_CSSNAME}
  TMT_CSSNAME           = 1401;
  {$EXTERNALSYM TMT_XMLNAME}
  TMT_XMLNAME           = 1402;

  TMT_FIRSTSTRING       = TMT_CSSNAME;
  TMT_LASTSTRING        = TMT_XMLNAME;

  //---- theme metrics: colors ----

  {.$EXTERNALSYM TMT_BASE1600}
  TMT_BASE1600            = 1600;
  //{$EXTERNALSYM TMT_SCROLLBAR}
  //TMT_SCROLLBAR           = 1601;
  {$EXTERNALSYM TMT_BACKGROUND}
  TMT_BACKGROUND          = 1602;
  {$EXTERNALSYM TMT_ACTIVECAPTION}
  TMT_ACTIVECAPTION       = 1603;
  {$EXTERNALSYM TMT_INACTIVECAPTION}
  TMT_INACTIVECAPTION     = 1604;
  {$EXTERNALSYM TMT_MENU}
  TMT_MENU                = 1605;
  {$EXTERNALSYM TMT_WINDOW}
  TMT_WINDOW              = 1606;
  {$EXTERNALSYM TMT_WINDOWFRAME}
  TMT_WINDOWFRAME         = 1607;
  {$EXTERNALSYM TMT_MENUTEXT}
  TMT_MENUTEXT            = 1608;
  {$EXTERNALSYM TMT_WINDOWTEXT}
  TMT_WINDOWTEXT          = 1609;
  {$EXTERNALSYM TMT_CAPTIONTEXT}
  TMT_CAPTIONTEXT         = 1610;
  {$EXTERNALSYM TMT_ACTIVEBORDER}
  TMT_ACTIVEBORDER        = 1611;
  {$EXTERNALSYM TMT_INACTIVEBORDER}
  TMT_INACTIVEBORDER      = 1612;
  {$EXTERNALSYM TMT_APPWORKSPACE}
  TMT_APPWORKSPACE        = 1613;
  {$EXTERNALSYM TMT_HIGHLIGHT}
  TMT_HIGHLIGHT           = 1614;
  {$EXTERNALSYM TMT_HIGHLIGHTTEXT}
  TMT_HIGHLIGHTTEXT       = 1615;
  {$EXTERNALSYM TMT_BTNFACE}
  TMT_BTNFACE             = 1616;
//  {$EXTERNALSYM TMT_BTNSHADOW}
//  TMT_BTNSHADOW           = 1617;
  {$EXTERNALSYM TMT_GRAYTEXT}
  TMT_GRAYTEXT            = 1618;
  {$EXTERNALSYM TMT_BTNTEXT}
  TMT_BTNTEXT             = 1619;
  {$EXTERNALSYM TMT_INACTIVECAPTIONTEXT}
  TMT_INACTIVECAPTIONTEXT = 1620;
  {$EXTERNALSYM TMT_BTNHIGHLIGHT}
  TMT_BTNHIGHLIGHT        = 1621;
  {$EXTERNALSYM TMT_DKSHADOW3D}
  TMT_DKSHADOW3D          = 1622;
  {$EXTERNALSYM TMT_LIGHT3D}
  TMT_LIGHT3D             = 1623;
  {$EXTERNALSYM TMT_INFOTEXT}
  TMT_INFOTEXT            = 1624;
  {$EXTERNALSYM TMT_INFOBK}
  TMT_INFOBK              = 1625;
  {$EXTERNALSYM TMT_BUTTONALTERNATEFACE}
  TMT_BUTTONALTERNATEFACE = 1626;
  {$EXTERNALSYM TMT_HOTTRACKING}
  TMT_HOTTRACKING         = 1627;
  {$EXTERNALSYM TMT_GRADIENTACTIVECAPTION}
  TMT_GRADIENTACTIVECAPTION   = 1628;
  {$EXTERNALSYM TMT_GRADIENTINACTIVECAPTION}
  TMT_GRADIENTINACTIVECAPTION = 1629;
  {$EXTERNALSYM TMT_MENUHILIGHT}
  TMT_MENUHILIGHT             = 1630;
  {$EXTERNALSYM TMT_MENUBAR}
  TMT_MENUBAR                 = 1631;

  TMT_FIRSTCOLOR = TMT_SCROLLBAR;
  TMT_LASTCOLOR  = TMT_MENUBAR;

  //---- hue substitutions ----
  {.$EXTERNALSYM TMT_BASE1800}
  TMT_BASE1800  =  1800;
  {$EXTERNALSYM TMT_FROMHUE1}
  TMT_FROMHUE1  =  1801;
  {$EXTERNALSYM TMT_FROMHUE2}
  TMT_FROMHUE2  =  1802;
  {$EXTERNALSYM TMT_FROMHUE3}
  TMT_FROMHUE3  =  1803;
  {$EXTERNALSYM TMT_FROMHUE4}
  TMT_FROMHUE4  =  1804;
  {$EXTERNALSYM TMT_FROMHUE5}
  TMT_FROMHUE5  =  1805;
  {$EXTERNALSYM TMT_TOHUE1}
  TMT_TOHUE1    =  1806;
  {$EXTERNALSYM TMT_TOHUE2}
  TMT_TOHUE2    =  1807;
  {$EXTERNALSYM TMT_TOHUE3}
  TMT_TOHUE3    =  1808;
  {$EXTERNALSYM TMT_TOHUE4}
  TMT_TOHUE4    =  1809;
  {$EXTERNALSYM TMT_TOHUE5}
  TMT_TOHUE5    =  1810;

  //---- color substitutions ----
  {.$EXTERNALSYM TMT_BASE2000}
  TMT_BASE2000   = 2000;
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR1 = 2001;
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR2 = 2002;
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR3 = 2003;
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR4 = 2004;
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR5 = 2005;
  {$EXTERNALSYM TMT_TOCOLOR1}
  TMT_TOCOLOR1   = 2006;
  {$EXTERNALSYM TMT_TOCOLOR2}
  TMT_TOCOLOR2   = 2007;
  {$EXTERNALSYM TMT_TOCOLOR3}
  TMT_TOCOLOR3   = 2008;
  {$EXTERNALSYM TMT_TOCOLOR4}
  TMT_TOCOLOR4   = 2009;
  {$EXTERNALSYM TMT_TOCOLOR5}
  TMT_TOCOLOR5   = 2010;

  //---- rendering BOOL properties ----

  {.$EXTERNALSYM TMT_BASE2200}
  TMT_BASE2200            = 2200;
  {$EXTERNALSYM TMT_TRANSPARENT}
  TMT_TRANSPARENT         = 2201;
  {$EXTERNALSYM TMT_AUTOSIZE}
  TMT_AUTOSIZE            = 2202;
  {$EXTERNALSYM TMT_BORDERONLY}
  TMT_BORDERONLY          = 2203;
  {$EXTERNALSYM TMT_COMPOSITED}
  TMT_COMPOSITED          = 2204;
  {$EXTERNALSYM TMT_BGFILL}
  TMT_BGFILL              = 2205;
  {$EXTERNALSYM TMT_GLYPHTRANSPARENT}
  TMT_GLYPHTRANSPARENT    = 2206;
  {$EXTERNALSYM TMT_GLYPHONLY}
  TMT_GLYPHONLY           = 2207;
  {$EXTERNALSYM TMT_ALWAYSSHOWSIZINGBAR}
  TMT_ALWAYSSHOWSIZINGBAR = 2208;
  {$EXTERNALSYM TMT_MIRRORIMAGE}
  TMT_MIRRORIMAGE         = 2209;

  {$EXTERNALSYM TMT_UNIFORMSIZING}
  TMT_UNIFORMSIZING       = 2210;
  {$EXTERNALSYM TMT_INTEGRALSIZING}
  TMT_INTEGRALSIZING      = 2211;
  {$EXTERNALSYM TMT_SOURCEGROW}
  TMT_SOURCEGROW          = 2212;
  {$EXTERNALSYM TMT_SOURCESHRINK}
  TMT_SOURCESHRINK        = 2213;

  {
  TMT_CACHEBRUSHES        = 2210;
  TMT_SOLIDBORDER         = 2211;
  TMT_SOLIDCONTENT        = 2212;
  TMT_DIRECTBITS          = 2213;
  TMT_MANUALTILING        = 2214;
  TMT_DIRECTBRUSH         = 2215;
  }

  //---- rendering INT properties ----
  {.$EXTERNALSYM TMT_BASE2400}
  TMT_BASE2400            = 2400;
  {$EXTERNALSYM TMT_IMAGECOUNT}
  TMT_IMAGECOUNT          = 2401;
  {$EXTERNALSYM TMT_ALPHALEVEL}
  TMT_ALPHALEVEL          = 2402;
  {$EXTERNALSYM TMT_BORDERSIZE}
  TMT_BORDERSIZE          = 2403;
  {$EXTERNALSYM TMT_ROUNDCORNERWIDTH}
  TMT_ROUNDCORNERWIDTH    = 2404;
  {$EXTERNALSYM TMT_ROUNDCORNERHEIGHT}
  TMT_ROUNDCORNERHEIGHT   = 2405;
  {$EXTERNALSYM TMT_GRADIENTRATIO1}
  TMT_GRADIENTRATIO1      = 2406;
  {$EXTERNALSYM TMT_GRADIENTRATIO2}
  TMT_GRADIENTRATIO2      = 2407;
  {$EXTERNALSYM TMT_GRADIENTRATIO3}
  TMT_GRADIENTRATIO3      = 2408;
  {$EXTERNALSYM TMT_GRADIENTRATIO4}
  TMT_GRADIENTRATIO4      = 2409;
  {$EXTERNALSYM TMT_GRADIENTRATIO5}
  TMT_GRADIENTRATIO5      = 2410;
  {$EXTERNALSYM TMT_PROGRESSCHUNKSIZE}
  TMT_PROGRESSCHUNKSIZE   = 2411;
  {$EXTERNALSYM TMT_PROGRESSSPACESIZE}
  TMT_PROGRESSSPACESIZE   = 2412;
  {$EXTERNALSYM TMT_SATURATION}
  TMT_SATURATION          = 2413;
  {$EXTERNALSYM TMT_TEXTBORDERSIZE}
  TMT_TEXTBORDERSIZE      = 2414;
  {$EXTERNALSYM TMT_ALPHATHRESHOLD}
  TMT_ALPHATHRESHOLD      = 2415;
  {$EXTERNALSYM TMT_WIDTH}
  TMT_WIDTH               = 2416;
  {$EXTERNALSYM TMT_HEIGHT}
  TMT_HEIGHT              = 2417;
  {$EXTERNALSYM TMT_NORMALINDEX}
  TMT_NORMALINDEX         = 2418;
  {$EXTERNALSYM TMT_GLYPHINDEX}
  TMT_GLYPHINDEX          = 2419;

  {$EXTERNALSYM TMT_TRUESIZESTRETCHMARK}
  TMT_TRUESIZESTRETCHMARK = 2419;
  {$EXTERNALSYM TMT_MINDPI1}
  TMT_MINDPI1             = 2420;
  {$EXTERNALSYM TMT_MINDPI2}
  TMT_MINDPI2             = 2421;
  {$EXTERNALSYM TMT_MINDPI3}
  TMT_MINDPI3             = 2422;
  {$EXTERNALSYM TMT_MINDPI4}
  TMT_MINDPI4             = 2423;
  {$EXTERNALSYM TMT_MINDPI5}
  TMT_MINDPI5             = 2424;

  TMT_BASE2600            = 2600;
  {$EXTERNALSYM TMT_GLYPHFONT}
  TMT_GLYPHFONT           = 2601;

  TMT_BASE2800            = 2800;
  {$EXTERNALSYM TMT_FILESIZES}
  TMT_FILESIZES           = 2801;

  {.$EXTERNALSYM TMT_BASE3000}
  TMT_BASE3000            = 3000;
  {$EXTERNALSYM TMT_IMAGEFILE}
  TMT_IMAGEFILE           = 3001;
  {$EXTERNALSYM TMT_IMAGEFILE1}
  TMT_IMAGEFILE1          = 3002;
  {$EXTERNALSYM TMT_IMAGEFILE2}
  TMT_IMAGEFILE2          = 3003;
  {$EXTERNALSYM TMT_IMAGEFILE3}
  TMT_IMAGEFILE3          = 3004;
  {$EXTERNALSYM TMT_IMAGEFILE4}
  TMT_IMAGEFILE4          = 3005;
  {$EXTERNALSYM TMT_IMAGEFILE5}
  TMT_IMAGEFILE5          = 3006;
  {$EXTERNALSYM TMT_STOCKIMAGEFILE}
  TMT_STOCKIMAGEFILE      = 3007;
  {$EXTERNALSYM TMT_GLYPHIMAGEFILE}
  TMT_GLYPHIMAGEFILE      = 3008;


  {.$EXTERNALSYM TMT_BASE3200}
  TMT_BASE3200            = 3200;
  {$EXTERNALSYM TMT_TEXT}
  TMT_TEXT                = 3201;

  {.$EXTERNALSYM TMT_BASE3400}
  TMT_BASE3400            = 3400;
  {$EXTERNALSYM TMT_OFFSET}
  TMT_OFFSET              = 3401;
  {$EXTERNALSYM TMT_TEXTSHADOWOFFSET}
  TMT_TEXTSHADOWOFFSET    = 3402;
  {$EXTERNALSYM TMT_MINSIZE}
  TMT_MINSIZE             = 3403;
  {$EXTERNALSYM TMT_MINSIZE1}
  TMT_MINSIZE1            = 3404;
  {$EXTERNALSYM TMT_MINSIZE2}
  TMT_MINSIZE2            = 3405;
  {$EXTERNALSYM TMT_MINSIZE3}
  TMT_MINSIZE3            = 3406;
  {$EXTERNALSYM TMT_MINSIZE4}
  TMT_MINSIZE4            = 3407;
  {$EXTERNALSYM TMT_MINSIZE5}
  TMT_MINSIZE5            = 3408;
  {$EXTERNALSYM TMT_NORMALSIZE}
  TMT_NORMALSIZE          = 3409;

  //---- rendering MARGIN properties ----

  {.$EXTERNALSYM TMT_BASE3600}
  TMT_BASE3600           = 3600;
  {$EXTERNALSYM TMT_SIZINGMARGINS}
  TMT_SIZINGMARGINS       = 3601;
  {$EXTERNALSYM TMT_CONTENTMARGINS}
  TMT_CONTENTMARGINS      = 3602;
  {$EXTERNALSYM TMT_CAPTIONMARGINS}
  TMT_CAPTIONMARGINS      = 3603;

  //---- rendering COLOR properties ----
  {.$EXTERNALSYM TMT_BASE3800}
  TMT_BASE3800            = 3800;
  {$EXTERNALSYM TMT_BORDERCOLOR}
  TMT_BORDERCOLOR         = 3801;
  //{$EXTERNALSYM TMT_TEXTCOLOR}
  //TMT_TEXTCOLOR           = 3803;
  {$EXTERNALSYM TMT_EDGELIGHTCOLOR}
  TMT_EDGELIGHTCOLOR      = 3804;
  {$EXTERNALSYM TMT_EDGEHIGHLIGHTCOLOR}
  TMT_EDGEHIGHLIGHTCOLOR  = 3805;
  {$EXTERNALSYM TMT_EDGESHADOWCOLOR}
  TMT_EDGESHADOWCOLOR     = 3806;
  {$EXTERNALSYM TMT_EDGEDKSHADOWCOLOR}
  TMT_EDGEDKSHADOWCOLOR   = 3807;
  {$EXTERNALSYM TMT_EDGEFILLCOLOR}
  TMT_EDGEFILLCOLOR       = 3808;
  {$EXTERNALSYM TMT_TRANSPARENTCOLOR}
  TMT_TRANSPARENTCOLOR    = 3809;
  {$EXTERNALSYM TMT_GRADIENTCOLOR1}
  TMT_GRADIENTCOLOR1      = 3810;
  {$EXTERNALSYM TMT_GRADIENTCOLOR2}
  TMT_GRADIENTCOLOR2      = 3811;
  {$EXTERNALSYM TMT_GRADIENTCOLOR3}
  TMT_GRADIENTCOLOR3      = 3812;
  {$EXTERNALSYM TMT_GRADIENTCOLOR4}
  TMT_GRADIENTCOLOR4      = 3813;
  {$EXTERNALSYM TMT_GRADIENTCOLOR5}
  TMT_GRADIENTCOLOR5      = 3814;
  {$EXTERNALSYM TMT_SHADOWCOLOR}
  TMT_SHADOWCOLOR         = 3815;
  {$EXTERNALSYM TMT_GLOWCOLOR}
  TMT_GLOWCOLOR           = 3816;
  {$EXTERNALSYM TMT_TEXTBORDERCOLOR}
  TMT_TEXTBORDERCOLOR     = 3817;
  {$EXTERNALSYM TMT_TEXTSHADOWCOLOR}
  TMT_TEXTSHADOWCOLOR     = 3818;
  {$EXTERNALSYM TMT_GLYPHTEXTCOLOR}
  TMT_GLYPHTEXTCOLOR      = 3819;
  {$EXTERNALSYM TMT_GLYPHTRANSPARENTCOLOR}
  TMT_GLYPHTRANSPARENTCOLOR = 3820;

  {$EXTERNALSYM TMT_FILLCOLORHINT}
  TMT_FILLCOLORHINT       = 3821;
  {$EXTERNALSYM TMT_BORDERCOLORHINT}
  TMT_BORDERCOLORHINT     = 3822;
  {$EXTERNALSYM TMT_ACCENTCOLORHINT}
  TMT_ACCENTCOLORHINT     = 3823;

  //---- rendering enum properties (must be declared in TM_ENUM section above) ----
  {.$EXTERNALSYM TMT_BASE4000}
  TMT_BASE4000            = 4000;
  {$EXTERNALSYM TMT_BGTYPE}
  TMT_BGTYPE              = 4001;
  {$EXTERNALSYM TMT_BORDERTYPE}
  TMT_BORDERTYPE          = 4002;
  {$EXTERNALSYM TMT_FILLTYPE}
  TMT_FILLTYPE            = 4003;
  {$EXTERNALSYM TMT_SIZINGTYPE}
  TMT_SIZINGTYPE          = 4004;
  {$EXTERNALSYM TMT_HALIGN}
  TMT_HALIGN              = 4005;
  {$EXTERNALSYM TMT_CONTENTALIGNMENT}
  TMT_CONTENTALIGNMENT    = 4006;
  {$EXTERNALSYM TMT_VALIGN}
  TMT_VALIGN              = 4007;
  {$EXTERNALSYM TMT_OFFSETTYPE}
  TMT_OFFSETTYPE          = 4008;
  {$EXTERNALSYM TMT_ICONEFFECT}
  TMT_ICONEFFECT          = 4009;
  {$EXTERNALSYM TMT_TEXTSHADOWTYPE}
  TMT_TEXTSHADOWTYPE      = 4010;
  {$EXTERNALSYM TMT_IMAGELAYOUT}
  TMT_IMAGELAYOUT         = 4011;
  {$EXTERNALSYM TMT_GLYPHTYPE}
  TMT_GLYPHTYPE           = 4012;
  {$EXTERNALSYM TMT_IMAGESELECTTYPE}
  TMT_IMAGESELECTTYPE     = 4013;
  {$EXTERNALSYM TMT_GLYPHFONTSIZINGTYPE}
  TMT_GLYPHFONTSIZINGTYPE = 4014;
  {$EXTERNALSYM TMT_TRUESIZESCALINGTYPE}
  TMT_TRUESIZESCALINGTYPE = 4015;

  {$EXTERNALSYM TMT_USERPICTURE}
  TMT_USERPICTURE         = 5001;
  {$EXTERNALSYM TMT_DEFAULTPANESIZE}
  TMT_DEFAULTPANESIZE     = 5002;
  {$EXTERNALSYM TMT_BLENDCOLOR}
  TMT_BLENDCOLOR          = 5003;
{$ENDIF LMDDISABLE_LMDTHEMEENGINE}

  {$EXTERNALSYM GP_LINEVERT}
  GP_LINEVERT = LMDBASE_PART + 2; // GP_LINEVERT = 30;
  {$EXTERNALSYM GP_LINEHORZ}
  GP_LINEHORZ = LMDBASE_PART + 1; // GP_LINEHORZ = 31;

  {$EXTERNALSYM LVS_FLAT}
  LVS_FLAT = LMDBASE_STATE + 0;
  {$EXTERNALSYM LVS_RAISED}
  LVS_RAISED = LMDBASE_STATE + 1;
  {$EXTERNALSYM LVS_SUNKEN}
  LVS_SUNKEN = LMDBASE_STATE + 2;

  {$EXTERNALSYM LHS_FLAT}
  LHS_FLAT = LMDBASE_STATE + 0;
  {$EXTERNALSYM LHS_RAISED}
  LHS_RAISED = LMDBASE_STATE + 1;
  {$EXTERNALSYM LHS_SUNKEN}
  LHS_SUNKEN = LMDBASE_STATE + 2;


{.$IFNDEF LMDDISABLE_LMDTHEMES}
  {$EXTERNALSYM WINDOWFiller0}
  WINDOWFiller0 = 0;
  {$EXTERNALSYM WP_CAPTION}
  WP_CAPTION = LMDBASE_PART + 0;  
  {$EXTERNALSYM WP_SMALLCAPTION}
  WP_SMALLCAPTION = LMDBASE_PART + 1; 
  {$EXTERNALSYM WP_MINCAPTION}
  WP_MINCAPTION = LMDBASE_PART + 2; 
  {$EXTERNALSYM WP_SMALLMINCAPTION}
  WP_SMALLMINCAPTION = LMDBASE_PART + 3; 
  {$EXTERNALSYM WP_MAXCAPTION}
  WP_MAXCAPTION = LMDBASE_PART + 4; 
  {$EXTERNALSYM WP_SMALLMAXCAPTION}
  WP_SMALLMAXCAPTION = LMDBASE_PART + 5; 
  {$EXTERNALSYM WP_FRAMELEFT}
  WP_FRAMELEFT = LMDBASE_PART + 6; 
  {$EXTERNALSYM WP_FRAMERIGHT}
  WP_FRAMERIGHT = LMDBASE_PART + 7; 
  {$EXTERNALSYM WP_FRAMEBOTTOM}
  WP_FRAMEBOTTOM = LMDBASE_PART + 8; 
  {$EXTERNALSYM WP_SMALLFRAMELEFT}
  WP_SMALLFRAMELEFT = LMDBASE_PART + 9; 
  {$EXTERNALSYM WP_SMALLFRAMERIGHT}
  WP_SMALLFRAMERIGHT = LMDBASE_PART + 10; 
  {$EXTERNALSYM WP_SMALLFRAMEBOTTOM}
  WP_SMALLFRAMEBOTTOM = LMDBASE_PART + 11;
  {$EXTERNALSYM WP_SYSBUTTON}
  WP_SYSBUTTON = LMDBASE_PART + 12; 
  {$EXTERNALSYM WP_MDISYSBUTTON}
  WP_MDISYSBUTTON = LMDBASE_PART + 13; 
  {$EXTERNALSYM WP_MINBUTTON}
  WP_MINBUTTON = LMDBASE_PART + 14; 
  {$EXTERNALSYM WP_MDIMINBUTTON}
  WP_MDIMINBUTTON = LMDBASE_PART + 15;  
  {$EXTERNALSYM WP_MAXBUTTON}
  WP_MAXBUTTON            = 17;
  {$EXTERNALSYM WP_CLOSEBUTTON}
  WP_CLOSEBUTTON = LMDBASE_PART + 17;
  {$EXTERNALSYM WP_SMALLCLOSEBUTTON}
  WP_SMALLCLOSEBUTTON = LMDBASE_PART + 18;  
  {$EXTERNALSYM WP_MDICLOSEBUTTON}
  WP_MDICLOSEBUTTON = LMDBASE_PART + 19;
  {$EXTERNALSYM WP_RESTOREBUTTON}
  WP_RESTOREBUTTON = LMDBASE_PART + 20;  
  {$EXTERNALSYM WP_MDIRESTOREBUTTON}
  WP_MDIRESTOREBUTTON = LMDBASE_PART + 21;  
  {$EXTERNALSYM WP_HELPBUTTON}
  WP_HELPBUTTON = LMDBASE_PART + 22;  
  {$EXTERNALSYM WP_MDIHELPBUTTON}
  WP_MDIHELPBUTTON = LMDBASE_PART + 23; 
  {$EXTERNALSYM WP_HORZSCROLL}
  WP_HORZSCROLL = LMDBASE_PART + 24; 
  {$EXTERNALSYM WP_HORZTHUMB}
  WP_HORZTHUMB = LMDBASE_PART + 25; 
  {$EXTERNALSYM WP_VERTSCROLL}
  WP_VERTSCROLL = LMDBASE_PART + 26; 
  {$EXTERNALSYM WP_VERTTHUMB}
  WP_VERTTHUMB = LMDBASE_PART + 27; 
  {$EXTERNALSYM WP_DIALOG}
  WP_DIALOG = LMDBASE_PART + 28; 

  {$EXTERNALSYM WP_CAPTIONSIZINGTEMPLATE}
  WP_CAPTIONSIZINGTEMPLATE = LMDBASE_PART + 29;
  {$EXTERNALSYM WP_SMALLCAPTIONSIZINGTEMPLATE}
  WP_SMALLCAPTIONSIZINGTEMPLATE = LMDBASE_PART + 30;
  {$EXTERNALSYM WP_FRAMELEFTSIZINGTEMPLATE}
  WP_FRAMELEFTSIZINGTEMPLATE = LMDBASE_PART + 31;
  {$EXTERNALSYM WP_SMALLFRAMELEFTSIZINGTEMPLATE}
  WP_SMALLFRAMELEFTSIZINGTEMPLATE = LMDBASE_PART + 32;
  {$EXTERNALSYM WP_FRAMERIGHTSIZINGTEMPLATE}
  WP_FRAMERIGHTSIZINGTEMPLATE = LMDBASE_PART + 33;
  {$EXTERNALSYM WP_SMALLFRAMERIGHTSIZINGTEMPLATE}
  WP_SMALLFRAMERIGHTSIZINGTEMPLATE = LMDBASE_PART + 34;
  {$EXTERNALSYM WP_FRAMEBOTTOMSIZINGTEMPLATE}
  WP_FRAMEBOTTOMSIZINGTEMPLATE = LMDBASE_PART + 35;
  {$EXTERNALSYM WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE}
  WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE = LMDBASE_PART + 36;

  {$EXTERNALSYM FS_ACTIVE}
  FS_ACTIVE = LMDBASE_STATE + 0; 
  {$EXTERNALSYM FS_INACTIVE}
  FS_INACTIVE = LMDBASE_STATE + 1;
  {$EXTERNALSYM FS_DISABLED}
  FS_DISABLED             = 3;

  {$EXTERNALSYM CS_ACTIVE}
  CS_ACTIVE = LMDBASE_STATE + 0; 
  {$EXTERNALSYM CS_INACTIVE}
  CS_INACTIVE = LMDBASE_STATE + 1; 
  {$EXTERNALSYM CS_DISABLED}
  CS_DISABLED = LMDBASE_STATE + 2; 

  {$EXTERNALSYM MXCS_ACTIVE}
  MXCS_ACTIVE = LMDBASE_STATE + 0; 
  {$EXTERNALSYM MXCS_INACTIVE}
  MXCS_INACTIVE = LMDBASE_STATE + 1; 
  {$EXTERNALSYM MXCS_DISABLED}
  MXCS_DISABLED = LMDBASE_STATE + 2; 

  {$EXTERNALSYM MNCS_ACTIVE}
  MNCS_ACTIVE = LMDBASE_STATE + 0; 
  {$EXTERNALSYM MNCS_INACTIVE}
  MNCS_INACTIVE = LMDBASE_STATE + 1; 
  {$EXTERNALSYM MNCS_DISABLED}
  MNCS_DISABLED = LMDBASE_STATE + 2;

  {$EXTERNALSYM HSS_NORMAL}
  HSS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM HSS_HOT}
  HSS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM HSS_PUSHED}
  HSS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM HSS_DISABLED}
  HSS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM HTS_NORMAL}
  HTS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM HTS_HOT}
  HTS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM HTS_PUSHED}
  HTS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM HTS_DISABLED}
  HTS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM VSS_NORMAL}
  VSS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM VSS_HOT}
  VSS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM VSS_PUSHED}
  VSS_PUSHED = LMDBASE_STATE + 2;
  {$EXTERNALSYM VSS_DISABLED}
  VSS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM VTS_NORMAL}
  VTS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM VTS_HOT}
  VTS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM VTS_PUSHED}
  VTS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM VTS_DISABLED}
  VTS_DISABLED = LMDBASE_STATE + 3;

  {$EXTERNALSYM SBS_NORMAL}
  SBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM SBS_HOT}
  SBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM SBS_PUSHED}
  SBS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM SBS_DISABLED}
  SBS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM MINBS_NORMAL}
  MINBS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM MINBS_HOT}
  MINBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM MINBS_PUSHED}
  MINBS_PUSHED = LMDBASE_STATE + 2;
  {$EXTERNALSYM MINBS_DISABLED}
  MINBS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM MINBS_INACTIVENORMAL}
  MINBS_INACTIVENORMAL    = 5;
  {$EXTERNALSYM MINBS_INACTIVEHOT}
  MINBS_INACTIVEHOT       = 6;
  {$EXTERNALSYM MINBS_INACTIVEPUSHED}
  MINBS_INACTIVEPUSHED    = 7;

  {$EXTERNALSYM MAXBS_NORMAL}
  MAXBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM MAXBS_HOT}
  MAXBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM MAXBS_PUSHED}
  MAXBS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM MAXBS_DISABLED}
  MAXBS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM MAXBS_INACTIVENORMAL}
  MAXBS_INACTIVENORMAL    = 5;
  {$EXTERNALSYM MAXBS_INACTIVEHOT}
  MAXBS_INACTIVEHOT       = 6;
  {$EXTERNALSYM MAXBS_INACTIVEPUSHED}
  MAXBS_INACTIVEPUSHED    = 7;

  {$EXTERNALSYM RBS_NORMAL}
  RBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM RBS_HOT}
  RBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM RBS_PUSHED}
  RBS_PUSHED = LMDBASE_STATE + 2;
  {$EXTERNALSYM RBS_DISABLED}
  RBS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM RBS_INACTIVENORMAL}
  RBS_INACTIVENORMAL      = 5;
  {$EXTERNALSYM RBS_INACTIVEHOT}
  RBS_INACTIVEHOT         = 6;
  {$EXTERNALSYM RBS_INACTIVEPUSHED}
  RBS_INACTIVEPUSHED      = 7;

  {$EXTERNALSYM HBS_NORMAL}
  HBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM HBS_HOT}
  HBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM HBS_PUSHED}
  HBS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM HBS_DISABLED}
  HBS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM HBS_INACTIVENORMAL}
  HBS_INACTIVENORMAL      = 5;
  {$EXTERNALSYM HBS_INACTIVEHOT}
  HBS_INACTIVEHOT         = 6;
  {$EXTERNALSYM HBS_INACTIVEPUSHED}
  HBS_INACTIVEPUSHED      = 7;

  {$EXTERNALSYM CBS_NORMAL}
  CBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM CBS_HOT}
  CBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM CBS_PUSHED}
  CBS_PUSHED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM CBS_DISABLED}
  CBS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM CBS_INACTIVENORMAL}
  CBS_INACTIVENORMAL      = 5;
  {$EXTERNALSYM CBS_INACTIVEHOT}
  CBS_INACTIVEHOT         = 6;
  {$EXTERNALSYM CBS_INACTIVEPUSHED}
  CBS_INACTIVEPUSHED      = 7;
  {$EXTERNALSYM CBS_INACTIVEDISABLED}
  CBS_INACTIVEDISABLED    = 8;

  {$EXTERNALSYM GBS_NORMAL}
  GBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM GBS_DISABLED}
  GBS_DISABLED = LMDBASE_STATE + 1; 

  {$EXTERNALSYM BP_PUSHBUTTON}
  BP_PUSHBUTTON = LMDBASE_PART + 0; 
  {$EXTERNALSYM BP_RADIOBUTTON}
  BP_RADIOBUTTON = LMDBASE_PART + 1; 
  {$EXTERNALSYM BP_CHECKBOX}
  BP_CHECKBOX = LMDBASE_PART + 2; 
  {$EXTERNALSYM BP_GROUPBOX}
  BP_GROUPBOX = LMDBASE_PART + 3; 
  {$EXTERNALSYM BP_USERBUTTON}
  BP_USERBUTTON = LMDBASE_PART + 4;

  {$EXTERNALSYM PBS_NORMAL}
  PBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM PBS_HOT}
  PBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM PBS_PRESSED}
  PBS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM PBS_DISABLED}
  PBS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM PBS_DEFAULTED}
  PBS_DEFAULTED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM RBS_UNCHECKEDNORMAL}
  RBS_UNCHECKEDNORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM RBS_UNCHECKEDHOT}
  RBS_UNCHECKEDHOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM RBS_UNCHECKEDPRESSED}
  RBS_UNCHECKEDPRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM RBS_UNCHECKEDDISABLED}
  RBS_UNCHECKEDDISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM RBS_CHECKEDNORMAL}
  RBS_CHECKEDNORMAL = LMDBASE_STATE + 4; 
  {$EXTERNALSYM RBS_CHECKEDHOT}
  RBS_CHECKEDHOT = LMDBASE_STATE + 5; 
  {$EXTERNALSYM RBS_CHECKEDPRESSED}
  RBS_CHECKEDPRESSED = LMDBASE_STATE + 6; 
  {$EXTERNALSYM RBS_CHECKEDDISABLED}
  RBS_CHECKEDDISABLED = LMDBASE_STATE + 7; 

  {$EXTERNALSYM CBS_UNCHECKEDNORMAL}
  CBS_UNCHECKEDNORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM CBS_UNCHECKEDHOT}
  CBS_UNCHECKEDHOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM CBS_UNCHECKEDPRESSED}
  CBS_UNCHECKEDPRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM CBS_UNCHECKEDDISABLED}
  CBS_UNCHECKEDDISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM CBS_CHECKEDNORMAL}
  CBS_CHECKEDNORMAL = LMDBASE_STATE + 4; 
  {$EXTERNALSYM CBS_CHECKEDHOT}
  CBS_CHECKEDHOT = LMDBASE_STATE + 5; 
  {$EXTERNALSYM CBS_CHECKEDPRESSED}
  CBS_CHECKEDPRESSED = LMDBASE_STATE + 6; 
  {$EXTERNALSYM CBS_CHECKEDDISABLED}
  CBS_CHECKEDDISABLED = LMDBASE_STATE + 7; 
  {$EXTERNALSYM CBS_MIXEDNORMAL}
  CBS_MIXEDNORMAL = LMDBASE_STATE + 8; 
  {$EXTERNALSYM CBS_MIXEDHOT}
  CBS_MIXEDHOT = LMDBASE_STATE + 9; 
  {$EXTERNALSYM CBS_MIXEDPRESSED}
  CBS_MIXEDPRESSED = LMDBASE_STATE + 10; 
  {$EXTERNALSYM CBS_MIXEDDISABLED}
  CBS_MIXEDDISABLED = LMDBASE_STATE + 11; 

  {$EXTERNALSYM RP_GRIPPER}
  RP_GRIPPER = LMDBASE_PART + 0; 
  {$EXTERNALSYM RP_GRIPPERVERT}
  RP_GRIPPERVERT = LMDBASE_PART + 1; 
  {$EXTERNALSYM RP_BAND}
  RP_BAND = LMDBASE_PART + 2; 
  {$EXTERNALSYM RP_CHEVRON}
  RP_CHEVRON = LMDBASE_PART + 3; 

  {$EXTERNALSYM CHEVS_NORMAL}
  CHEVS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM CHEVS_HOT}
  CHEVS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM CHEVS_PRESSED}
  CHEVS_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM TP_BUTTON}
  TP_BUTTON = LMDBASE_PART + 0; 
  {$EXTERNALSYM TP_DROPDOWNBUTTON}
  TP_DROPDOWNBUTTON = LMDBASE_PART + 1; 
  {$EXTERNALSYM TP_SPLITBUTTON}
  TP_SPLITBUTTON = LMDBASE_PART + 2; 
  {$EXTERNALSYM TP_SPLITBUTTONDROPDOWN}
  TP_SPLITBUTTONDROPDOWN = LMDBASE_PART + 3; 
  {$EXTERNALSYM TP_SEPARATOR}
  TP_SEPARATOR = LMDBASE_PART + 4; 
  {$EXTERNALSYM TP_SEPARATORVERT}
  TP_SEPARATORVERT = LMDBASE_PART + 5;

  {$EXTERNALSYM TS_NORMAL}
  TS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TS_HOT}
  TS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TS_PRESSED}
  TS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TS_DISABLED}
  TS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TS_CHECKED}
  TS_CHECKED = LMDBASE_STATE + 4; 
  {$EXTERNALSYM TS_HOTCHECKED}
  TS_HOTCHECKED = LMDBASE_STATE + 5; 

  {$EXTERNALSYM SP_PANE}
  SP_PANE = LMDBASE_PART + 0;
  {$EXTERNALSYM SP_GRIPPERPANE}
  SP_GRIPPERPANE = LMDBASE_PART + 1; 
  {$EXTERNALSYM SP_GRIPPER}
  SP_GRIPPER = LMDBASE_PART + 2; 
{.$ENDIF}


{.$IFNDEF LMDDISABLE_LMDTHEMES}
  {$EXTERNALSYM MP_MENUITEM}
  MP_MENUITEM = LMDBASE_PART + 0;
  {$EXTERNALSYM MP_MENUDROPDOWN}
  MP_MENUDROPDOWN = LMDBASE_PART + 1;
  {$EXTERNALSYM MP_MENUBARITEM}
  MP_MENUBARITEM = LMDBASE_PART + 2;
  {$EXTERNALSYM MP_MENUBARDROPDOWN}
  MP_MENUBARDROPDOWN = LMDBASE_PART + 3;
  {$EXTERNALSYM MP_CHEVRON}
  MP_CHEVRON = LMDBASE_PART + 4;
  {$EXTERNALSYM MP_SEPARATOR}
  MP_SEPARATOR = LMDBASE_PART + 5;

  {$EXTERNALSYM MS_NORMAL}
  MS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM MS_SELECTED}
  MS_SELECTED = LMDBASE_STATE + 1;
  {$EXTERNALSYM MS_DEMOTED}
  MS_DEMOTED = LMDBASE_STATE + 2;

  {$EXTERNALSYM LVP_LISTITEM}
  LVP_LISTITEM = LMDBASE_PART + 0;
  {$EXTERNALSYM LVP_LISTGROUP}
  LVP_LISTGROUP = LMDBASE_PART + 1;
  {$EXTERNALSYM LVP_LISTDETAIL}
  LVP_LISTDETAIL = LMDBASE_PART + 2;
  {$EXTERNALSYM LVP_LISTSORTEDDETAIL}
  LVP_LISTSORTEDDETAIL = LMDBASE_PART + 3;
  {$EXTERNALSYM LVP_EMPTYTEXT}
  LVP_EMPTYTEXT = LMDBASE_PART + 4;

  {$EXTERNALSYM LIS_NORMAL}
  LIS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM LIS_HOT}
  LIS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM LIS_SELECTED}
  LIS_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM LIS_DISABLED}
  LIS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM LIS_SELECTEDNOTFOCUS}
  LIS_SELECTEDNOTFOCUS = LMDBASE_STATE + 4;

  {$EXTERNALSYM HP_HEADERITEM}
  HP_HEADERITEM = LMDBASE_PART + 0; 
  {$EXTERNALSYM HP_HEADERITEMLEFT}
  HP_HEADERITEMLEFT = LMDBASE_PART + 1; 
  {$EXTERNALSYM HP_HEADERITEMRIGHT}
  HP_HEADERITEMRIGHT = LMDBASE_PART + 2; 
  {$EXTERNALSYM HP_HEADERSORTARROW}
  HP_HEADERSORTARROW = LMDBASE_PART + 3; 

  {$EXTERNALSYM HIS_NORMAL}
  HIS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM HIS_HOT}
  HIS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM HIS_PRESSED}
  HIS_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM HILS_NORMAL}
  HILS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM HILS_HOT}
  HILS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM HILS_PRESSED}
  HILS_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM HIRS_NORMAL}
  HIRS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM HIRS_HOT}
  HIRS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM HIRS_PRESSED}
  HIRS_PRESSED = LMDBASE_STATE + 3;

  {$EXTERNALSYM HSAS_SORTEDUP}
  HSAS_SORTEDUP = LMDBASE_STATE + 0;
  {$EXTERNALSYM HSAS_SORTEDDOWN}
  HSAS_SORTEDDOWN = LMDBASE_STATE + 1;

  {$EXTERNALSYM PP_BAR}
  PP_BAR = LMDBASE_PART + 0;
  {$EXTERNALSYM PP_BARVERT}
  PP_BARVERT = LMDBASE_PART + 1;
  {$EXTERNALSYM PP_CHUNK}
  PP_CHUNK = LMDBASE_PART + 2;
  {$EXTERNALSYM PP_CHUNKVERT}
  PP_CHUNKVERT = LMDBASE_PART + 3;

  {$EXTERNALSYM TABP_TABITEM}
  TABP_TABITEM = LMDBASE_PART + 0;
  {$EXTERNALSYM TABP_TABITEMLEFTEDGE}
  TABP_TABITEMLEFTEDGE = LMDBASE_PART + 1;
  {$EXTERNALSYM TABP_TABITEMRIGHTEDGE}
  TABP_TABITEMRIGHTEDGE = LMDBASE_PART + 2;
  {$EXTERNALSYM TABP_TABITEMBOTHEDGE}
  TABP_TABITEMBOTHEDGE = LMDBASE_PART + 3;
  {$EXTERNALSYM TABP_TOPTABITEM}
  TABP_TOPTABITEM = LMDBASE_PART + 4;
  {$EXTERNALSYM TABP_TOPTABITEMLEFTEDGE}
  TABP_TOPTABITEMLEFTEDGE = LMDBASE_PART + 5;
  {$EXTERNALSYM TABP_TOPTABITEMRIGHTEDGE}
  TABP_TOPTABITEMRIGHTEDGE = LMDBASE_PART + 6; //9????
  {$EXTERNALSYM TABP_TOPTABITEMBOTHEDGE}
  TABP_TOPTABITEMBOTHEDGE = LMDBASE_PART + 7;
  {$EXTERNALSYM TABP_PANE}
  TABP_PANE = LMDBASE_PART + 8;
  {$EXTERNALSYM TABP_BODY}
  TABP_BODY = LMDBASE_PART + 9;

  {$EXTERNALSYM TIS_NORMAL}
  TIS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TIS_HOT}
  TIS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TIS_SELECTED}
  TIS_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TIS_DISABLED}
  TIS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TIS_FOCUSED}
  TIS_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TILES_NORMAL}
  TILES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TILES_HOT}
  TILES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TILES_SELECTED}
  TILES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TILES_DISABLED}
  TILES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TILES_FOCUSED}
  TILES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TIRES_NORMAL}
  TIRES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TIRES_HOT}
  TIRES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TIRES_SELECTED}
  TIRES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TIRES_DISABLED}
  TIRES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TIRES_FOCUSED}
  TIRES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TIBES_NORMAL}
  TIBES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TIBES_HOT}
  TIBES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TIBES_SELECTED}
  TIBES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TIBES_DISABLED}
  TIBES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TIBES_FOCUSED}
  TIBES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TTIS_NORMAL}
  TTIS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TTIS_HOT}
  TTIS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TTIS_SELECTED}
  TTIS_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TTIS_DISABLED}
  TTIS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TTIS_FOCUSED}
  TTIS_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TTILES_NORMAL}
  TTILES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TTILES_HOT}
  TTILES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TTILES_SELECTED}
  TTILES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TTILES_DISABLED}
  TTILES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TTILES_FOCUSED}
  TTILES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TTIRES_NORMAL}
  TTIRES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TTIRES_HOT}
  TTIRES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TTIRES_SELECTED}
  TTIRES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TTIRES_DISABLED}
  TTIRES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TTIRES_FOCUSED}
  TTIRES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TTIBES_NORMAL}
  TTIBES_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TTIBES_HOT}
  TTIBES_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TTIBES_SELECTED}
  TTIBES_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TTIBES_DISABLED}
  TTIBES_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TTIBES_FOCUSED}
  TTIBES_FOCUSED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TKP_TRACK}
  TKP_TRACK = LMDBASE_PART + 0;
  {$EXTERNALSYM TKP_TRACKVERT}
  TKP_TRACKVERT = LMDBASE_PART + 1; 
  {$EXTERNALSYM TKP_THUMB}
  TKP_THUMB = LMDBASE_PART + 2; 
  {$EXTERNALSYM TKP_THUMBBOTTOM}
  TKP_THUMBBOTTOM = LMDBASE_PART + 3; 
  {$EXTERNALSYM TKP_THUMBTOP}
  TKP_THUMBTOP = LMDBASE_PART + 4; 
  {$EXTERNALSYM TKP_THUMBVERT}
  TKP_THUMBVERT = LMDBASE_PART + 5; 
  {$EXTERNALSYM TKP_THUMBLEFT}
  TKP_THUMBLEFT = LMDBASE_PART + 6; 
  {$EXTERNALSYM TKP_THUMBRIGHT}
  TKP_THUMBRIGHT = LMDBASE_PART + 7; 
  {$EXTERNALSYM TKP_TICS}
  TKP_TICS = LMDBASE_PART + 8; 
  {$EXTERNALSYM TKP_TICSVERT}
  TKP_TICSVERT = LMDBASE_PART + 9; 

  {$EXTERNALSYM TKS_NORMAL}
  TKS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TRS_NORMAL}
  TRS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TRVS_NORMAL}
  TRVS_NORMAL = LMDBASE_STATE + 0; 

  {$EXTERNALSYM TUS_NORMAL}
  TUS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUS_HOT}
  TUS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUS_PRESSED}
  TUS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TUS_FOCUSED}
  TUS_FOCUSED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TUS_DISABLED}
  TUS_DISABLED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM TUTS_NORMAL}
  TUTS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUTS_HOT}
  TUTS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUTS_PRESSED}
  TUTS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TUTS_FOCUSED}
  TUTS_FOCUSED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TUTS_DISABLED}
  TUTS_DISABLED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM TUBS_NORMAL}
  TUBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUBS_HOT}
  TUBS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUBS_PRESSED}
  TUBS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TUBS_FOCUSED}
  TUBS_FOCUSED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TUBS_DISABLED}
  TUBS_DISABLED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM TUVS_NORMAL}
  TUVS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUVS_HOT}
  TUVS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUVS_PRESSED}
  TUVS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TUVS_FOCUSED}
  TUVS_FOCUSED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TUVS_DISABLED}
  TUVS_DISABLED = LMDBASE_STATE + 4;

  {$EXTERNALSYM TUVLS_NORMAL}
  TUVLS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUVLS_HOT}
  TUVLS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUVLS_PRESSED}
  TUVLS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TUVLS_FOCUSED}
  TUVLS_FOCUSED = LMDBASE_STATE + 3;
  {$EXTERNALSYM TUVLS_DISABLED}
  TUVLS_DISABLED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM TUVRS_NORMAL}
  TUVRS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TUVRS_HOT}
  TUVRS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TUVRS_PRESSED}
  TUVRS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TUVRS_FOCUSED}
  TUVRS_FOCUSED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TUVRS_DISABLED}
  TUVRS_DISABLED = LMDBASE_STATE + 4; 

  {$EXTERNALSYM TSS_NORMAL}
  TSS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TSVS_NORMAL}
  TSVS_NORMAL = LMDBASE_STATE + 0; 

  {$EXTERNALSYM TTP_STANDARD}
  TTP_STANDARD = LMDBASE_PART + 0; 
  {$EXTERNALSYM TTP_STANDARDTITLE}
  TTP_STANDARDTITLE = LMDBASE_PART + 1;
  {$EXTERNALSYM TTP_BALLOON}
  TTP_BALLOON = LMDBASE_PART + 2; 
  {$EXTERNALSYM TTP_BALLOONTITLE}
  TTP_BALLOONTITLE = LMDBASE_PART + 3; 

  {$EXTERNALSYM TTSS_NORMAL}
  TTSS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TTSS_LINK}
  TTSS_LINK = LMDBASE_STATE + 1; 

  {$EXTERNALSYM TTBS_NORMAL}
  TTBS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TTBS_LINK}
  TTBS_LINK = LMDBASE_STATE + 1;

  {$EXTERNALSYM TVP_TREEITEM}
  TVP_TREEITEM = LMDBASE_PART + 0; 
  {$EXTERNALSYM TVP_GLYPH}
  TVP_GLYPH = LMDBASE_PART + 1; 
  {$EXTERNALSYM TVP_BRANCH}
  TVP_BRANCH = LMDBASE_PART + 2; 

  {$EXTERNALSYM TREIS_NORMAL}
  TREIS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM TREIS_HOT}
  TREIS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM TREIS_SELECTED}
  TREIS_SELECTED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM TREIS_DISABLED}
  TREIS_DISABLED = LMDBASE_STATE + 3; 
  {$EXTERNALSYM TREIS_SELECTEDNOTFOCUS}
  TREIS_SELECTEDNOTFOCUS = LMDBASE_STATE + 4; 

  {$EXTERNALSYM GLPS_CLOSED}
  GLPS_CLOSED = LMDBASE_STATE + 0; 
  {$EXTERNALSYM GLPS_OPENED}
  GLPS_OPENED = LMDBASE_STATE + 1;

  {$EXTERNALSYM SPNP_UP}
  SPNP_UP = LMDBASE_PART + 0; 
  {$EXTERNALSYM SPNP_DOWN}
  SPNP_DOWN = LMDBASE_PART + 1; 
  {$EXTERNALSYM SPNP_UPHORZ}
  SPNP_UPHORZ = LMDBASE_PART + 2; 
  {$EXTERNALSYM SPNP_DOWNHORZ}
  SPNP_DOWNHORZ = LMDBASE_PART + 3;

  {$EXTERNALSYM UPS_NORMAL}
  UPS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM UPS_HOT}
  UPS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM UPS_PRESSED}
  UPS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM UPS_DISABLED}
  UPS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM DNS_NORMAL}
  DNS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM DNS_HOT}
  DNS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM DNS_PRESSED}
  DNS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM DNS_DISABLED}
  DNS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM UPHZS_NORMAL}
  UPHZS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM UPHZS_HOT}
  UPHZS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM UPHZS_PRESSED}
  UPHZS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM UPHZS_DISABLED}
  UPHZS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM DNHZS_NORMAL}
  DNHZS_NORMAL = LMDBASE_STATE + 0; 
  {$EXTERNALSYM DNHZS_HOT}
  DNHZS_HOT = LMDBASE_STATE + 1; 
  {$EXTERNALSYM DNHZS_PRESSED}
  DNHZS_PRESSED = LMDBASE_STATE + 2; 
  {$EXTERNALSYM DNHZS_DISABLED}
  DNHZS_DISABLED = LMDBASE_STATE + 3; 

  {$EXTERNALSYM PGRP_UP}
  PGRP_UP = LMDBASE_PART + 0;
  {$EXTERNALSYM PGRP_DOWN}
  PGRP_DOWN = LMDBASE_PART + 1;
  {$EXTERNALSYM PGRP_UPHORZ}
  PGRP_UPHORZ = LMDBASE_PART + 2;
  {$EXTERNALSYM PGRP_DOWNHORZ}
  PGRP_DOWNHORZ = LMDBASE_PART + 3;

  {$EXTERNALSYM SBP_ARROWBTN}
  SBP_ARROWBTN = LMDBASE_PART + 0;
  {$EXTERNALSYM SBP_THUMBBTNHORZ}
  SBP_THUMBBTNHORZ = LMDBASE_PART + 1;
  {$EXTERNALSYM SBP_THUMBBTNVERT}
  SBP_THUMBBTNVERT = LMDBASE_PART + 2;
  {$EXTERNALSYM SBP_LOWERTRACKHORZ}
  SBP_LOWERTRACKHORZ = LMDBASE_PART + 3;
  {$EXTERNALSYM SBP_UPPERTRACKHORZ}
  SBP_UPPERTRACKHORZ = LMDBASE_PART + 4;
  {$EXTERNALSYM SBP_LOWERTRACKVERT}
  SBP_LOWERTRACKVERT = LMDBASE_PART + 5;
  {$EXTERNALSYM SBP_UPPERTRACKVERT}
  SBP_UPPERTRACKVERT = LMDBASE_PART + 6;
  {$EXTERNALSYM SBP_GRIPPERHORZ}
  SBP_GRIPPERHORZ = LMDBASE_PART + 7;
  {$EXTERNALSYM SBP_GRIPPERVERT}
  SBP_GRIPPERVERT = LMDBASE_PART + 8;
  {$EXTERNALSYM SBP_SIZEBOX}
  SBP_SIZEBOX = LMDBASE_PART + 9;

  {$EXTERNALSYM ABS_UPNORMAL}
  ABS_UPNORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM ABS_UPHOT}
  ABS_UPHOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM ABS_UPPRESSED}
  ABS_UPPRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM ABS_UPDISABLED}
  ABS_UPDISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM ABS_DOWNNORMAL}
  ABS_DOWNNORMAL = LMDBASE_STATE + 4;
  {$EXTERNALSYM ABS_DOWNHOT}
  ABS_DOWNHOT = LMDBASE_STATE + 5;
  {$EXTERNALSYM ABS_DOWNPRESSED}
  ABS_DOWNPRESSED = LMDBASE_STATE + 6;
  {$EXTERNALSYM ABS_DOWNDISABLED}
  ABS_DOWNDISABLED = LMDBASE_STATE + 7;
  {$EXTERNALSYM ABS_LEFTNORMAL}
  ABS_LEFTNORMAL = LMDBASE_STATE + 8;
  {$EXTERNALSYM ABS_LEFTHOT}
  ABS_LEFTHOT = LMDBASE_STATE + 9;
  {$EXTERNALSYM ABS_LEFTPRESSED}
  ABS_LEFTPRESSED = LMDBASE_STATE + 10;
  {$EXTERNALSYM ABS_LEFTDISABLED}
  ABS_LEFTDISABLED = LMDBASE_STATE + 11;
  {$EXTERNALSYM ABS_RIGHTNORMAL}
  ABS_RIGHTNORMAL = LMDBASE_STATE + 12;
  {$EXTERNALSYM ABS_RIGHTHOT}
  ABS_RIGHTHOT = LMDBASE_STATE + 13;
  {$EXTERNALSYM ABS_RIGHTPRESSED}
  ABS_RIGHTPRESSED = LMDBASE_STATE + 14;
  {$EXTERNALSYM ABS_RIGHTDISABLED}
  ABS_RIGHTDISABLED = LMDBASE_STATE + 15;

  {$EXTERNALSYM SCRBS_NORMAL}
  SCRBS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM SCRBS_HOT}
  SCRBS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM SCRBS_PRESSED}
  SCRBS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM SCRBS_DISABLED}
  SCRBS_DISABLED = LMDBASE_STATE + 3;

  {$EXTERNALSYM SZB_RIGHTALIGN}
  SZB_RIGHTALIGN = LMDBASE_STATE + 0;
  {$EXTERNALSYM SZB_LEFTALIGN}
  SZB_LEFTALIGN = LMDBASE_STATE + 1;

  {$EXTERNALSYM EP_EDITTEXT}
  EP_EDITTEXT = LMDBASE_PART + 0;
  {$EXTERNALSYM EP_CARET}
  EP_CARET = LMDBASE_PART + 1;
  {$EXTERNALSYM EP_BACKGROUND}
  EP_BACKGROUND = LMDBASE_PART + 2;
  {$EXTERNALSYM EP_BACKGROUNDWITHBORDER}
  EP_BACKGROUNDWITHBORDER =LMDBASE_PART + 4;

  {$EXTERNALSYM ETS_NORMAL}
  ETS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM ETS_HOT}
  ETS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM ETS_SELECTED}
  ETS_SELECTED = LMDBASE_STATE + 2;
  {$EXTERNALSYM ETS_DISABLED}
  ETS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM ETS_FOCUSED}
  ETS_FOCUSED = LMDBASE_STATE + 4;
  {$EXTERNALSYM ETS_READONLY}
  ETS_READONLY = LMDBASE_STATE + 5;
  {$EXTERNALSYM ETS_ASSIST}
  ETS_ASSIST = LMDBASE_STATE + 6;

  {$EXTERNALSYM EBS_NORMAL}
  EBS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBS_HOT}
  EBS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBS_DISABLED}
  EBS_DISABLED = LMDBASE_STATE + 2;
  {$EXTERNALSYM EBS_FOCUSED}
  EBS_FOCUSED = LMDBASE_STATE + 3;
  {$EXTERNALSYM EBS_READONLY}
  EBS_READONLY = LMDBASE_STATE + 4;
  {$EXTERNALSYM EBS_ASSIST}
  EBS_ASSIST = LMDBASE_STATE + 5;

  {$EXTERNALSYM CP_DROPDOWNBUTTON}
  CP_DROPDOWNBUTTON = LMDBASE_PART + 0;

  {$EXTERNALSYM CBXS_NORMAL}
  CBXS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM CBXS_HOT}
  CBXS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM CBXS_PRESSED}
  CBXS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM CBXS_DISABLED}
  CBXS_DISABLED = LMDBASE_STATE + 3;

  {$EXTERNALSYM CLP_TIME}
  CLP_TIME = LMDBASE_PART + 0;
  {$EXTERNALSYM CLS_NORMAL}
  CLS_NORMAL = LMDBASE_STATE + 0;

  {$EXTERNALSYM TNP_BACKGROUND}
  TNP_BACKGROUND = LMDBASE_PART + 0;
  {$EXTERNALSYM TNP_ANIMBACKGROUND}
  TNP_ANIMBACKGROUND = LMDBASE_PART + 1;

  {$EXTERNALSYM TBP_BACKGROUNDBOTTOM}
  TBP_BACKGROUNDBOTTOM = LMDBASE_PART + 0;
  {$EXTERNALSYM TBP_BACKGROUNDRIGHT}
  TBP_BACKGROUNDRIGHT = LMDBASE_PART + 1;
  {$EXTERNALSYM TBP_BACKGROUNDTOP}
  TBP_BACKGROUNDTOP = LMDBASE_PART + 2;
  {$EXTERNALSYM TBP_BACKGROUNDLEFT}
  TBP_BACKGROUNDLEFT = LMDBASE_PART + 3;
  {$EXTERNALSYM TBP_SIZINGBARBOTTOM}
  TBP_SIZINGBARBOTTOM = LMDBASE_PART + 4;
  {$EXTERNALSYM TBP_SIZINGBARRIGHT}
  TBP_SIZINGBARRIGHT = LMDBASE_PART + 5;
  {$EXTERNALSYM TBP_SIZINGBARTOP}
  TBP_SIZINGBARTOP = LMDBASE_PART + 6;
  {$EXTERNALSYM TBP_SIZINGBARLEFT}
  TBP_SIZINGBARLEFT        = 8;

  {$EXTERNALSYM TDP_GROUPCOUNT}
  TDP_GROUPCOUNT = LMDBASE_PART + 0;
  {$EXTERNALSYM TDP_FLASHBUTTON}
  TDP_FLASHBUTTON = LMDBASE_PART + 1;
  {$EXTERNALSYM TDP_FLASHBUTTONGROUPMENU}
  TDP_FLASHBUTTONGROUPMENU = LMDBASE_PART + 2;

  {$EXTERNALSYM SPP_USERPANE}
  SPP_USERPANE = LMDBASE_PART + 0;
  {$EXTERNALSYM SPP_MOREPROGRAMS}
  SPP_MOREPROGRAMS = LMDBASE_PART + 1;
  {$EXTERNALSYM SPP_MOREPROGRAMSARROW}
  SPP_MOREPROGRAMSARROW = LMDBASE_PART + 2;
  {$EXTERNALSYM SPP_PROGLIST}
  SPP_PROGLIST = LMDBASE_PART + 3;
  {$EXTERNALSYM SPP_PROGLISTSEPARATOR}
  SPP_PROGLISTSEPARATOR = LMDBASE_PART + 4;
  {$EXTERNALSYM SPP_PLACESLIST}
  SPP_PLACESLIST = LMDBASE_PART + 5;
  {$EXTERNALSYM SPP_PLACESLISTSEPARATOR}
  SPP_PLACESLISTSEPARATOR = LMDBASE_PART + 6;
  {$EXTERNALSYM SPP_LOGOFF}
  SPP_LOGOFF = LMDBASE_PART + 7;
  {$EXTERNALSYM SPP_LOGOFFBUTTONS}
  SPP_LOGOFFBUTTONS = LMDBASE_PART + 8;
  {$EXTERNALSYM SPP_USERPICTURE}
  SPP_USERPICTURE = LMDBASE_PART + 9;
  {$EXTERNALSYM SPP_PREVIEW}
  SPP_PREVIEW = LMDBASE_PART + 10;

  {$EXTERNALSYM SPS_NORMAL}
  SPS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM SPS_HOT}
  SPS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM SPS_PRESSED}
  SPS_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM SPLS_NORMAL}
  SPLS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM SPLS_HOT}
  SPLS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM SPLS_PRESSED}
  SPLS_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM EBP_HEADERBACKGROUND}
  EBP_HEADERBACKGROUND = LMDBASE_PART + 0;
  {$EXTERNALSYM EBP_HEADERCLOSE}
  EBP_HEADERCLOSE = LMDBASE_PART + 1;
  {$EXTERNALSYM EBP_HEADERPIN}
  EBP_HEADERPIN = LMDBASE_PART + 2;
  {$EXTERNALSYM EBP_IEBARMENU}
  EBP_IEBARMENU = LMDBASE_PART + 3;
  {$EXTERNALSYM EBP_NORMALGROUPBACKGROUND}
  EBP_NORMALGROUPBACKGROUND= LMDBASE_PART + 4;
  {$EXTERNALSYM EBP_NORMALGROUPCOLLAPSE}
  EBP_NORMALGROUPCOLLAPSE = LMDBASE_PART + 5;
  {$EXTERNALSYM EBP_NORMALGROUPEXPAND}
  EBP_NORMALGROUPEXPAND = LMDBASE_PART + 6;
  {$EXTERNALSYM EBP_NORMALGROUPHEAD}
  EBP_NORMALGROUPHEAD = LMDBASE_PART + 7;
  {$EXTERNALSYM EBP_SPECIALGROUPBACKGROUND}
  EBP_SPECIALGROUPBACKGROUND = LMDBASE_PART + 8;
  {$EXTERNALSYM EBP_SPECIALGROUPCOLLAPSE}
  EBP_SPECIALGROUPCOLLAPSE = LMDBASE_PART + 9;
  {$EXTERNALSYM EBP_SPECIALGROUPEXPAND}
  EBP_SPECIALGROUPEXPAND = LMDBASE_PART + 10;
  {$EXTERNALSYM EBP_SPECIALGROUPHEAD}
  EBP_SPECIALGROUPHEAD = LMDBASE_PART + 11;

  {$EXTERNALSYM EBHC_NORMAL}
  EBHC_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBHC_HOT}
  EBHC_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBHC_PRESSED}
  EBHC_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM EBHP_NORMAL}
  EBHP_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBHP_HOT}
  EBHP_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBHP_PRESSED}
  EBHP_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM EBHP_SELECTEDNORMAL}
  EBHP_SELECTEDNORMAL = LMDBASE_STATE + 3;
  {$EXTERNALSYM EBHP_SELECTEDHOT}
  EBHP_SELECTEDHOT = LMDBASE_STATE + 4;
  {$EXTERNALSYM EBHP_SELECTEDPRESSED}
  EBHP_SELECTEDPRESSED = LMDBASE_STATE + 5;

  {$EXTERNALSYM EBM_NORMAL}
  EBM_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBM_HOT}
  EBM_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBM_PRESSED}
  EBM_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM EBNGC_NORMAL}
  EBNGC_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBNGC_HOT}
  EBNGC_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBNGC_PRESSED}
  EBNGC_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM EBNGE_NORMAL}
  EBNGE_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBNGE_HOT}
  EBNGE_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBNGE_PRESSED}
  EBNGE_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM EBSGC_NORMAL}
  EBSGC_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBSGC_HOT}
  EBSGC_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBSGC_PRESSED}
  EBSGC_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM MDP_NEWAPPBUTTON}
  MDP_NEWAPPBUTTON = LMDBASE_PART + 0;
  {$EXTERNALSYM MDP_SEPARATOR}
  MDP_SEPARATOR = LMDBASE_PART + 1;

  {$EXTERNALSYM MDS_NORMAL}
  MDS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM MDS_HOT}
  MDS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM MDS_PRESSED}
  MDS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM MDS_DISABLED}
  MDS_DISABLED = LMDBASE_STATE + 3;
  {$EXTERNALSYM MDS_CHECKED}
  MDS_CHECKED = LMDBASE_STATE + 4;
  {$EXTERNALSYM MDS_HOTCHECKED}
  MDS_HOTCHECKED = LMDBASE_STATE + 5;

  {$EXTERNALSYM EBSGE_HOT}
  EBSGE_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM EBSGE_NORMAL}
  EBSGE_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM EBSGE_PRESSED}
  EBSGE_PRESSED = LMDBASE_STATE + 2;

  {$EXTERNALSYM ETDT_DISABLE}
  ETDT_DISABLE = $00000001;
  {$EXTERNALSYM ETDT_ENABLE}
  ETDT_ENABLE = $00000002;
  {$EXTERNALSYM ETDT_USETABTEXTURE}
  ETDT_USETABTEXTURE = $00000004;
  {$EXTERNALSYM ETDT_ENABLETAB}
  ETDT_ENABLETAB = (ETDT_ENABLE or ETDT_USETABTEXTURE);
  {$EXTERNALSYM RP_CHEVRONVERT}
  RP_CHEVRONVERT = LMDBASE_PART + 4;
  //STAP_ALLOW_CONTROLS = (1 shl 1);
  //STAP_ALLOW_NONCLIENT = (1 shl 0);
  //STAP_ALLOW_WEBCONTENT = (1 shl 2);
  {$EXTERNALSYM TTCS_HOT}
  TTCS_HOT = LMDBASE_STATE + 1;
  {$EXTERNALSYM TTCS_NORMAL}
  TTCS_NORMAL = LMDBASE_STATE + 0;
  {$EXTERNALSYM TTCS_PRESSED}
  TTCS_PRESSED = LMDBASE_STATE + 2;
  {$EXTERNALSYM TTP_CLOSE}
  TTP_CLOSE = LMDBASE_PART + 4;
  {$EXTERNALSYM WM_THEMECHANGED}
  WM_THEMECHANGED = $31A;
  {$EXTERNALSYM WP_MAX_BUTTON}
  WP_MAX_BUTTON = LMDBASE_PART + 16;
{.$ENDIF}


{.$IFNDEF LMDDISABLE_LMDTHEMES}
// draw a grayed-out string
  DTT_GRAYED         = 1;
  {$EXTERNALSYM DTT_GRAYED}
//  Theme background segment hit test flag (default). possible return values are:
//  HTCLIENT: hit test succeeded in the middle background segment
//  HTTOP, HTLEFT, HTTOPLEFT, etc:  // hit test succeeded in the the respective theme background segment.
  HTTB_BACKGROUNDSEG = 0;
  {$EXTERNALSYM HTTB_BACKGROUNDSEG}
//  Fixed border hit test option.  possible return values are:
//  HTCLIENT: hit test succeeded in the middle background segment
//  HTBORDER: hit test succeeded in any other background segment
  HTTB_FIXEDBORDER   = 2;
  {$EXTERNALSYM HTTB_FIXEDBORDER}
//  Caption hit test option.  Possible return values are:
//  HTCAPTION: hit test succeeded in the top, top left, or top right background segments
//  HTNOWHERE or another return code, depending on absence or presence of accompanying flags, resp.
  HTTB_CAPTION       = 4;
  {$EXTERNALSYM HTTB_CAPTION}
//  Resizing border hit test flags.  Possible return values are:
//  HTCLIENT: hit test succeeded in middle background segment
//  HTTOP, HTTOPLEFT, HTLEFT, HTRIGHT, etc:    hit test succeeded in the respective system resizing zone
//  HTBORDER: hit test failed in middle segment and resizing zones, but succeeded in a background border segment
  HTTB_RESIZINGBORDER_LEFT   = $0010;
  {$EXTERNALSYM HTTB_RESIZINGBORDER_LEFT}
  HTTB_RESIZINGBORDER_TOP    = $0020;
  {$EXTERNALSYM HTTB_RESIZINGBORDER_TOP}
  HTTB_RESIZINGBORDER_RIGHT  = $0040;
  {$EXTERNALSYM HTTB_RESIZINGBORDER_RIGHT}
  HTTB_RESIZINGBORDER_BOTTOM = $0080;
  {$EXTERNALSYM HTTB_RESIZINGBORDER_BOTTOM}
  HTTB_RESIZINGBORDER        = $00F0; // all above constants OR'ed
  {$EXTERNALSYM HTTB_RESIZINGBORDER}

// Resizing border is specified as a template, not just window edges.
  HTTB_USESIZINGTEMPLATE     = $0100;

  DTL_LEFT   = 1;
  DTL_TOP    = 2;
  DTL_RIGHT  = 4;
  DTL_BOTTOM = 8;

  MAX_INTLIST_COUNT = 10;
  {$EXTERNALSYM MAX_INTLIST_COUNT}
  PO_STATE   = 0;       // property was found in the state section
  {$EXTERNALSYM PO_STATE}
  PO_PART    = 1;       // property was found in the part section
  {$EXTERNALSYM PO_PART}
  PO_CLASS   = 2;       // property was found in the class section
  {$EXTERNALSYM PO_CLASS}
  PO_GLOBAL  = 3;       // property was found in [globals] section
  {$EXTERNALSYM PO_GLOBAL}
  PO_NOTFOUND= 4;       // property was not found
  {$EXTERNALSYM PO_NOTFOUND}

  STAP_ALLOW_NONCLIENT = 1;
  {$EXTERNALSYM STAP_ALLOW_NONCLIENT}
  STAP_ALLOW_CONTROLS  = 2;
  {$EXTERNALSYM STAP_ALLOW_CONTROLS}
  STAP_ALLOW_WEBCONTENT= 4;
  {$EXTERNALSYM STAP_ALLOW_WEBCONTENT}

  SZ_THDOCPROP_DISPLAYNAME   = 'DisplayName';
  SZ_THDOCPROP_CANONICALNAME = 'ThemeName';
  SZ_THDOCPROP_TOOLTIP       = 'ToolTip';
  SZ_THDOCPROP_AUTHOR        = 'author';

// Convert to THEMESIZE type
//  TS_MIN = 0;
//  TS_TRUE = 1;
//  TS_DRAW = 2;
{.$ENDIF IFNDEF LMDDISABLE_LMDTHEMES}


  //outcommented VB
  //{$ifndef LMDDISABLE_LMDTHEMES}
  //EL_THEMECHANGED = $B528;
  //{$else}
  //EL_THEMECHANGED = $031A;
  //{$endif}



  WM_ISTHEMEDCONTROL = WM_USER + 2398;


{.$IFNDEF LMDDISABLE_LMDTHEMES}
type
  {$EXTERNALSYM HDC}
  HDC = Windows.HDC;

  //<-- from old LMDXPStyles --
  TLMDThemeSize = (tsMin, tsTrue, tsDraw);

  {$EXTERNALSYM XPSIZE}
  XPSIZE = packed record
    cx, cy: LongInt;
  end;
  {$EXTERNALSYM PSIZE}
  PSIZE = ^XPSIZE;


  {$EXTERNALSYM THEMESIZE}
  THEMESIZE = (
    TS_MIN,
    TS_TRUE,
    TS_DRAW
  );

  {$EXTERNALSYM TMARGINS}
  TMargins = record
    cxLeftWidth,
    cxRightWidth,
    cyTopHeight,
    cyBottomHeight : integer
  end;
  {$EXTERNALSYM PMARGINS}
  PMargins = {$IFNDEF CLR}^{$ENDIF}TMargins;


  {$EXTERNALSYM TINTLIST}
  TIntList = record
    iValueCount : integer;
    iValues : array [0..MAX_INTLIST_COUNT - 1] of integer;
  end;
  {$EXTERNALSYM PINTLIST}
  PIntList=  {$IFNDEF CLR}^{$ENDIF}TIntList;

  TThemeErrorContext = record
    dwSize : DWORD;                      // size of this structure
    hr     : HRESULT;                    // error code from last error
    szMsgParam1 : array[0..MAX_PATH - 1] of WideChar;    // value of first param for msg
    szMsgParam2 : array[0..MAX_PATH - 1] of WideChar;    // value of second param for msg
    szFileName  : array[0..MAX_PATH - 1] of WideChar;    // associated source filename
    szSourceLine: array[0..MAX_PATH - 1] of WideChar;    // source line
    iLineNum    : integer;                              // source line number
  end;
  PThemeErrorContext = {$IFNDEF CLR}^{$ENDIF}TThemeErrorContext;

  HTheme = THandle;

  {$EXTERNALSYM HTheme}

  HIMAGELIST = THandle;
  {$NODEFINE HIMAGELIST}

{$IFDEF CLR}
  IsThemeActiveProc = function : boolean;
  EnableThemingProc = function (fEnable : boolean) : HRESULT;
  OpenThemeDataProc = function (hwnd : HWND; pszClassList : string) : HTheme;
  CloseThemeDataProc= function (Theme : HTheme) : HRESULT;
  DrawThemeParentBackgroundProc1 = function (hwnd: HWND; hDC: HDC;
                                    const Rect: TRect): HRESULT;
  DrawThemeParentBackgroundProc2 = function (hwnd: HWND; hDC: HDC;
                                    PRect: IntPtr): HRESULT;
  DrawThemeBackgroundProc1 = function (Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; const ClipRect: TRect): HRESULT;
  DrawThemeBackgroundProc2 = function (Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; ClipRect: IntPtr): HRESULT;
  DrawThemeTextProc = function (Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
    pszText : string; iCharCount : integer; dwTextFlags : DWORD;
    dwTextFlags2 : DWORD; const Rect : TRect) : HRESULT;
  GetThemeBackgroundContentRectProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult;
  GetThemeTextMetricsProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT;
  GetThemeBackgroundRegionProc = function (Theme : HTheme; DC: HDC;
    iPartId, iStateId : Integer; pRect : TRect;
    var pRegion : HRGN) : HRESULT;
  GetThemeBackgroundExtentProc = function (Theme : HTheme; hdc : HDC;
    PartId, StateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult;
  GetThemePartSizeProc1 = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : TRect; eSize: THEMESIZE; var psz : TSize) : HRESULT;
  GetThemePartSizeProc2 = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : IntPtr; eSize: THEMESIZE; var psz : TSize) : HRESULT;
  GetThemeTextExtentProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; pszText : string; iCharCount : integer;
    dwTextFlags : DWORD; BoundingRect : TRect;
    var ExtentRect : TRect) : HRESULT;
  HitTestThemeBackgroundProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId : Integer; dwOptions : DWORD; pRect : TRect; hrgn : HRGN;
    ptTest : TPoint; var pwHitTestCode : word) : HRESULT;
  DrawThemeEdgeProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; const pDestRect: TRect; uEdge, uFlags: UINT;
    var ContentRect: TRect): HRESULT;
  DrawThemeIconProc = function (Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; pRect : TRect;
    himl : HIMAGELIST; iImageIndex : integer) : HRESULT;
  IsThemePartDefinedProc = function (Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  IsThemeBackgroundPartiallyTransparentProc = function (Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  GetThemeColorProc = function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; var Color : COLORREF) : HRESULT;
  GetThemeMetricProc = function (Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; var piVal : integer) : HRESULT;
  GetThemeStringProc = function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszBuff : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  GetThemeBoolProc = function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : BOOL) : HRESULT;
  GetThemeIntProc = function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  GetThemeEnumValueProc =   function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  GetThemePositionProc =  function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pPoint : TPoint) : HRESULT;
  GetThemeFontProc = function (Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var pFont : TLogFontW) : HRESULT;
  GetThemeRectProc = function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var Rect : TRect) : HRESULT;
  GetThemeMarginsProc =   function (Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var Margins : TMargins) : HRESULT;
  GetThemeIntListProc =   function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pIntList : TIntList) : HRESULT;
  GetThemePropertyOriginProc =   function (Theme : HTheme; PartId, StateId,
    PropId : Integer; var Origin: integer) : HRESULT;
  SetWindowThemeProc = function (hwnd : HWND; pszSubAppName, pszSubIdList : string) : HRESULT;
  GetThemeFilenameProc =  function (Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszThemeFileName : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  GetThemeSysColorProc = function (Theme : HTheme; iColorId : integer) : COLORREF;
  GetThemeSysColorBrushProc = function (Theme : HTheme; iColorId : integer) : HBRUSH;
  GetThemeSysSizeProc = function (Theme : HTheme; iSizeId : integer) : integer;
  GetThemeSysBoolProc = function (Theme : HTheme; iBoolId : integer) : BOOL;
  GetThemeSysFontProc = function (Theme : HTheme; iFontId : integer; var plf : TLogFontW) : HRESULT;
  GetThemeSysStringProc =   function (Theme : HTheme; iStringId : integer;
    {OUT}  pszStringBuff : StringBuilder; cchMaxStringChars : integer) : HRESULT;
  GetThemeSysIntProc = function (Theme : HTheme; iIntId : integer; var piValue : integer) : HRESULT;
  IsAppThemedProc = function : boolean;
  GetWindowThemeProc =   function (hwnd : HWND) : HTheme;
  EnableThemeDialogTextureProc = function (hwnd : HWND; fEnable : DWORD) : HRESULT;
  IsThemeDialogTextureEnabledProc = function : BOOL;
  GetThemeAppPropertiesProc = function : DWORD;
  SetThemeAppPropertiesProc = procedure (dwFlags : DWORD);
  GetCurrentThemeNameProc =  function (
    {OUT} pszThemeFileName : StringBuilder; cchMaxNameChars : integer;
    {OUT} {OPTIONAL} pszColorBuff : StringBuilder; cchMaxColorChars : integer;
    {OUT} {OPTIONAL} pszSizeBuff : StringBuilder; cchMaxSizeChars : integer) : HRESULT;
  GetThemeDocumentationPropertyProc = function (pszThemeName : string;
    pszPropertyName : string; {OUT}  pszValueBuff : StringBuilder; cchMaxValChars : integer) : HRESULT;


  function IsThemeActive_(): Boolean;
  function EnableTheming_(fEnable : boolean) : HRESULT;
  function OpenThemeData_(hwnd: HWND; pszClassList: string): HTHEME;
  function CloseThemeData_(Theme: HTHEME): HRESULT;
  //<--
  function DrawThemeParentBackground(hwnd: HWND; hDC: HDC;
                                   const Rect: TRect): HRESULT; overload;
  function DrawThemeParentBackground(hwnd: HWND; hDC: HDC;
                                   Rect: IntPtr): HRESULT; overload;
  function DrawThemeBackground(Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; const ClipRect: TRect): HRESULT; overload;
  function DrawThemeBackground(Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; ClipRect: IntPtr): HRESULT; overload;
  function GetThemePartSize(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : TRect; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload;
  function GetThemePartSize(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : IntPtr; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload;
  //-->
  function DrawThemeParentBackground_(hwnd: HWND; hDC: HDC;
                                   const Rect: TRect): HRESULT; overload;
  function DrawThemeParentBackground_(hwnd: HWND; hDC: HDC;
                                   Rect: IntPtr): HRESULT; overload;
  function DrawThemeBackground_(Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; const ClipRect: TRect): HRESULT; overload;
  function DrawThemeBackground_(Theme: HTHEME; hDC: HDC;
                             iPartId, iStateId: Integer;
                             const Rect:TRect; ClipRect: IntPtr): HRESULT; overload;
  function DrawThemeText_(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
    pszText : string; iCharCount : integer; dwTextFlags : DWORD;
    dwTextFlags2 : DWORD; const Rect : TRect) : HRESULT;
  function GetThemeBackgroundContentRect_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult;
  function GetThemeTextExtent_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; pszText : string; iCharCount : integer;
    dwTextFlags : DWORD; const BoundingRect : TRect;
    var ExtentRect : TRect) : HRESULT;
  function GetThemeBackgroundExtent_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const pBoundingRect : TRect; var pContentRect : TRect) : HResult;
  function GetThemePartSize_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : TRect; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload;
  function GetThemePartSize_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; rect : IntPtr; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload;
  function GetThemeTextMetrics_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT;
  function GetThemeBackgroundRegion_(Theme : HTheme; DC: HDC;
    iPartId, iStateId : Integer; pRect : TRect;
    var pRegion : HRGN) : HRESULT;
  function HitTestThemeBackground_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : Integer; dwOptions : DWORD; pRect : TRect; hrgn : HRGN;
    ptTest : TPoint; var pwHitTestCode : word) : HRESULT;
  function DrawThemeEdge_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; const DestRect: TRect; uEdge, uFlags: UINT;
    var ContentRect: TRect): HRESULT;
  function DrawThemeIcon_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; pRect : TRect;
    himl : HIMAGELIST; iImageIndex : integer) : HRESULT;
  function IsThemePartDefined_(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  function IsThemeBackgroundPartiallyTransparent_(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  function GetThemeColor_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; var Color : COLORREF) : HRESULT;
  function GetThemeMetric_(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; var piVal : integer) : HRESULT;
  function GetThemeString_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszBuff : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  function GetThemeBool_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : BOOL) : HRESULT;
  function GetThemeInt_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  function GetThemeEnumValue_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  function GetThemePosition_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pPoint : TPoint) : HRESULT;
  function GetThemeFont_(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var pFont : TLogFontW) : HRESULT;
  function GetThemeRect_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var Rect : TRect) : HRESULT;
  function GetThemeMargins_(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var Margins : TMargins) : HRESULT;
  function GetThemeIntList_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pIntList : TIntList) : HRESULT;
  function GetThemePropertyOrigin_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pOrigin : integer) : HRESULT;
  function SetWindowTheme_(hwnd : HWND; pszSubAppName, pszSubIdList : string) : HRESULT;
  function GetThemeFilename_(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszThemeFileName : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  function GetThemeSysColor_(Theme : HTheme; iColorId : integer) : COLORREF;
  function GetThemeSysColorBrush_(Theme : HTheme; iColorId : integer) : HBRUSH;
  function GetThemeSysSize_(Theme : HTheme; iSizeId : integer) : integer;
  function GetThemeSysBool_(Theme : HTheme; iBoolId : integer) : BOOL;
  function GetThemeSysFont_(Theme : HTheme; iFontId : integer; var plf : TLogFontW) : HRESULT;
  function GetThemeSysString_(Theme : HTheme; iStringId : integer;
    {OUT}  pszStringBuff : StringBuilder; cchMaxStringChars : integer) : HRESULT;
  function GetThemeSysInt_(Theme : HTheme; iIntId : integer; var piValue : integer) : HRESULT;
  function IsAppThemed_ : boolean;
  function GetWindowTheme_(hwnd : HWND) : HTheme;
  function EnableThemeDialogTexture_(hwnd : HWND; fEnable : DWORD) : HRESULT;
  function IsThemeDialogTextureEnabled_: BOOL;
  function GetThemeAppProperties_ : DWORD;
  procedure SetThemeAppProperties_(dwFlags : DWORD);
  function GetCurrentThemeName_(
    {OUT} pszThemeFileName : StringBuilder; cchMaxNameChars : integer;
    {OUT} {OPTIONAL} pszColorBuff : StringBuilder; cchMaxColorChars : integer;
    {OUT} {OPTIONAL} pszSizeBuff : StringBuilder; cchMaxSizeChars : integer) : HRESULT;
  function GetThemeDocumentationProperty_(pszThemeName : string;
    pszPropertyName : string; {OUT}  pszValueBuff : StringBuilder; cchMaxValChars : integer) : HRESULT;

  // Following functions are wrappers: if LMDThemeEngine is enabled, then corresponding delegate
  // is called, otherwise imported function is called. DrawThemeText_
  // Delegates are named with prefix "_": _DrawThemeText
  // Imported functions are named with suffix "_": DrawThemeText_
  function IsThemeActive(): Boolean;
  function EnableTheming(fEnable : boolean) : HRESULT;
  function OpenThemeData(hwnd: HWND; pszClassList: string): HTHEME;
  function CloseThemeData(Theme: HTHEME): HRESULT;
  function DrawThemeText(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
    pszText : string; iCharCount : integer; dwTextFlags : DWORD;
    dwTextFlags2 : DWORD; const Rect : TRect) : HRESULT;
  function GetThemeBackgroundContentRect(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult;
  function GetThemeTextExtent(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; pszText : string; iCharCount : integer;
    dwTextFlags : DWORD; BoundingRect : TRect;
    var ExtentRect : TRect) : HRESULT;
  function GetThemeBackgroundExtent(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const pBoundingRect : TRect; var pContentRect : TRect) : HResult;
  function GetThemeTextMetrics(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT;
  function GetThemeBackgroundRegion(Theme : HTheme; DC: HDC;
    iPartId, iStateId : Integer; pRect : TRect;
    var pRegion : HRGN) : HRESULT;
  function HitTestThemeBackground(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : Integer; dwOptions : DWORD; pRect : TRect; hrgn : HRGN;
    ptTest : TPoint; var pwHitTestCode : word) : HRESULT;
  function DrawThemeEdge(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; const DestRect: TRect; uEdge, uFlags: UINT;
    var ContentRect: TRect): HRESULT;
  function DrawThemeIcon(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; pRect : TRect;
    himl : HIMAGELIST; iImageIndex : integer) : HRESULT;
  function IsThemePartDefined(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  function IsThemeBackgroundPartiallyTransparent(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean;
  function GetThemeColor(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; var Color : COLORREF) : HRESULT;
  function GetThemeMetric(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; var piVal : integer) : HRESULT;
  function GetThemeString(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszBuff : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  function GetThemeBool(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : BOOL) : HRESULT;
  function GetThemeInt(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  function GetThemeEnumValue(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT;
  function GetThemePosition(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pPoint : TPoint) : HRESULT;
  function GetThemeFont(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var pFont : TLogFontW) : HRESULT;
  function GetThemeRect(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var Rect : TRect) : HRESULT;
  function GetThemeMargins(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var Margins : TMargins) : HRESULT;
  function GetThemeIntList(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pIntList : TIntList) : HRESULT;
  function GetThemePropertyOrigin(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pOrigin : integer) : HRESULT;
  function SetWindowTheme(hwnd : HWND; pszSubAppName, pszSubIdList : string) : HRESULT;
  function GetThemeFilename(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT}  pszThemeFileName : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
  function GetThemeSysColor(Theme : HTheme; iColorId : integer) : COLORREF;
  function GetThemeSysColorBrush(Theme : HTheme; iColorId : integer) : HBRUSH;
  function GetThemeSysSize(Theme : HTheme; iSizeId : integer) : integer;
  function GetThemeSysBool(Theme : HTheme; iBoolId : integer) : BOOL;
  function GetThemeSysFont(Theme : HTheme; iFontId : integer; var plf : TLogFontW) : HRESULT;
  function GetThemeSysString(Theme : HTheme; iStringId : integer;
    {OUT}  pszStringBuff : StringBuilder; cchMaxStringChars : integer) : HRESULT;
  function GetThemeSysInt(Theme : HTheme; iIntId : integer; var piValue : integer) : HRESULT;
  function IsAppThemed : boolean;
  function GetWindowTheme(hwnd : HWND) : HTheme;
  function EnableThemeDialogTexture(hwnd : HWND; fEnable : DWORD) : HRESULT;
  function IsThemeDialogTextureEnabled: BOOL;
  function GetThemeAppProperties : DWORD;
  procedure SetThemeAppProperties(dwFlags : DWORD);
  function GetCurrentThemeName(
    {OUT} pszThemeFileName : StringBuilder; cchMaxNameChars : integer;
    {OUT} {OPTIONAL} pszColorBuff : StringBuilder; cchMaxColorChars : integer;
    {OUT} {OPTIONAL} pszSizeBuff : StringBuilder; cchMaxSizeChars : integer) : HRESULT;
  function GetThemeDocumentationProperty(pszThemeName : string;
    pszPropertyName : string; {OUT}  pszValueBuff : StringBuilder; cchMaxValChars : integer) : HRESULT;

{$ELSE IFNDEF CLR}

//---------------------------------------------------------------------------
//  IsThemeActive()     - can be used to test if a theme for the current app
//                        is active.  If so, theme-aware windows should call
//                        "OpenThemeData()" to start using theme drawing
//                        services.  If not, the window doesn't have to
//                        ask again until it receives a WM_THEMECHANGED msg.
//---------------------------------------------------------------------------
  {$EXTERNALSYM IsThemeActiveProc}
  IsThemeActiveProc = function : boolean; stdcall;
  {$EXTERNALSYM EnableThemingProc}
  EnableThemingProc = function (fEnable : boolean) : HRESULT; stdcall;

//---------------------------------------------------------------------------
//  OpenThemeData()     - Open the theme data for the specified HWND and
//                        semi-colon separated list of class names.
//
//                        OpenThemeData() will try each class name, one at
//                        a time, and use the first matching theme info
//                        found.  If a match is found, a theme handle
//                        to the data is returned.  If no match is found,
//                        a "NULL" handle is returned.
//
//                        When the window is destroyed or a WM_THEMECHANGED
//                        msg is received, "CloseThemeData()" should be
//                        called to close the theme handle.
//
//  hwnd                - window handle of the control/window to be themed
//
//  pszClassList        - class name (or list of names) to match to theme data
//                        section.  if the list contains more than one name,
//                        the names are tested one at a time for a match.
//                        If a match is found, OpenThemeData() returns a
//                        theme handle associated with the matching class.
//                        This param is a list (instead of just a single
//                        class name) to provide the class an opportunity
//                        to get the "best" match between the class and
//                        the current theme.  For example, a button might
//                        pass L"OkButton, Button" if its ID=ID_OK.  If
//                        the current theme has an entry for OkButton,
//                        that will be used.  Otherwise, we fall back on
//                        the normal Button entry.
//---------------------------------------------------------------------------
  {$EXTERNALSYM OpenThemeDataProc}
  OpenThemeDataProc = function (hwnd : HWND; pszClassList : PWideChar) : HTheme; stdcall;

//---------------------------------------------------------------------------
//  CloseThemeData()    - closes the theme data handle.  This should be done
//                        when the window being themed is destroyed or
//                        whenever a WM_THEMECHANGED msg is received
//                        (followed by an attempt to create a new Theme data
//                        handle).
//
//  hTheme              - open theme data handle (returned from prior call
//                        to OpenThemeData() API).
//---------------------------------------------------------------------------
  {$EXTERNALSYM CloseThemeDataProc}
  CloseThemeDataProc= function (Theme : HTheme) : HRESULT; stdcall;

//---------------------------------------------------------------------------
//    functions for basic drawing support
//---------------------------------------------------------------------------
// The following methods are the theme-aware drawing services.
// Controls/Windows are defined in drawable "parts" by their author: a
// parent part and 0 or more child parts.  Each of the parts can be
// described in "states" (ex: disabled, hot, pressed).
//---------------------------------------------------------------------------
// For the list of all themed classes and the definition of all
// parts and states, see the file "tmschema.h".
//---------------------------------------------------------------------------
// Each of the below methods takes a "iPartId" param to specify the
// part and a "iStateId" to specify the state of the part.
// "iStateId=0" refers to the root part.  "iPartId" = "0" refers to
// the root class.
//-----------------------------------------------------------------------
// Note: draw operations are always scaled to fit (and not to exceed)
// the specified "Rect".
//-----------------------------------------------------------------------
  {$EXTERNALSYM DrawThemeParentBackgroundProc}
  DrawThemeParentBackgroundProc = function (hwnd : HWND; hdc : Windows.HDC; const Rect : PRect) : HRESULT; stdcall;


//------------------------------------------------------------------------
//  DrawThemeBackground()
//                      - draws the theme-specified border and fill for
//                        the "iPartId" and "iStateId".  This could be
//                        based on a bitmap file, a border and fill, or
//                        other image description.
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iPartId             - part number to draw
//  iStateId            - state number (of the part) to draw
//  pRect               - defines the size/location of the part
//  pClipRect           - optional clipping rect (don't draw outside it)
//------------------------------------------------------------------------
  {$EXTERNALSYM DrawThemeBackgroundProc}
  DrawThemeBackgroundProc = function (Theme : HTheme; hdc : Windows.HDC;
    iPartId : integer; iStateId : integer; const Rect : TRect; {OPTIONAL} pClipRect : PRect) : HRESULT; stdcall;

//-------------------------------------------------------------------------
//  DrawThemeText()     - draws the text using the theme-specified
//                        color and font for the "iPartId" and
//                        "iStateId".
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iPartId             - part number to draw
//  iStateId            - state number (of the part) to draw
//  pszText             - actual text to draw
//  dwCharCount         - number of chars to draw (-1 for all)
//  dwTextFlags         - same as DrawText() "uFormat" param
//  dwTextFlags2        - additional drawing options
//  pRect               - defines the size/location of the part
//-------------------------------------------------------------------------
  {$EXTERNALSYM DrawThemeTextProc}
  DrawThemeTextProc = function (Theme : HTheme; hdc : HDC; iPartId, iStateId : integer;
    pszText : PWideChar; iCharCount : integer; dwTextFlags : DWORD;
    dwTextFlags2 : DWORD; const Rect : TRect) : HRESULT; stdcall;


//-------------------------------------------------------------------------
//  GetThemeBackgroundContentRect()
//                      - gets the size of the content for the theme-defined
//                        background.  This is usually the area inside
//                        the borders or Margins.
//
//      hTheme          - theme data handle
//      hdc             - (optional) device content to be used for drawing
//      iPartId         - part number to draw
//      iStateId        - state number (of the part) to draw
//      pBoundingRect   - the outer RECT of the part being drawn
//      pContentRect    - RECT to receive the content area
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeBackgroundContentRectProc}
  GetThemeBackgroundContentRectProc = function(Theme : HTheme; {OPTIONAL} hdc : HDC;
    iPartId, iStateId : integer; const pBoundingRect : TRect; var pContentRect : TRect) : HResult; stdcall;


//-------------------------------------------------------------------------
//  GetThemeBackgroundExtent() - calculates the size/location of the theme-
//                               specified background based on the
//                               "pContentRect".
//
//      hTheme          - theme data handle
//      hdc             - (optional) device content to be used for drawing
//      iPartId         - part number to draw
//      iStateId        - state number (of the part) to draw
//      pContentRect    - RECT that defines the content area
//      pBoundingRect   - RECT to receive the overall size/location of part
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeBackgroundExtentProc}
  GetThemeBackgroundExtentProc = function(Theme : HTheme; {OPTIONAL} hdc : HDC;
    iPartId, iStateId : integer; const pBoundingRect : PRect; var pContentRect : TRect) : HResult; stdcall;


//-------------------------------------------------------------------------
//  GetThemePartSize() - returns the specified size of the theme part
//
//  hTheme              - theme data handle
//  hdc                 - HDC to select font into & measure against
//  iPartId             - part number to retrieve size for
//  iStateId            - state number (of the part)
//  prc                 - (optional) rect for part drawing destination
//  eSize               - the type of size to be retreived
//  psz                 - receives the specified size of the part
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemePartSizeProc}
  GetThemePartSizeProc = function(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; {OPTIONAL} rect : PRect; eSize: THEMESIZE; var psz : TSize) : HRESULT; stdcall;


//-------------------------------------------------------------------------
//  GetThemeTextExtent() - calculates the size/location of the specified
//                         text when rendered in the Theme Font.
//
//  hTheme              - theme data handle
//  hdc                 - HDC to select font & measure into
//  iPartId             - part number to draw
//  iStateId            - state number (of the part)
//  pszText             - the text to be measured
//  dwCharCount         - number of chars to draw (-1 for all)
//  dwTextFlags         - same as DrawText() "uFormat" param
//  pszBoundingRect     - optional: to control layout of text
//  pszExtentRect       - receives the RECT for text size/location
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeTextExtentProc}
  GetThemeTextExtentProc = function(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; pszText : PWideChar; iCharCount : integer;
    dwTextFlags : DWORD; {OPTIONAL} pBoundingRect : PRect;
    var pExtentRect : TRect) : HRESULT; stdcall;

//-------------------------------------------------------------------------
//  GetThemeTextMetrics()
//                      - returns info about the theme-specified font
//                        for the part/state passed in.
//
//  hTheme              - theme data handle
//  hdc                 - optional: HDC for screen context
//  iPartId             - part number to draw
//  iStateId            - state number (of the part)
//  ptm                 - receives the font info
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeTextMetricsProc}
  GetThemeTextMetricsProc = function(Theme : HTheme; {OPTIONAL} hdc : HDC;
    iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT; stdcall;

//-------------------------------------------------------------------------
//  GetThemeBackgroundRegion()
//                      - computes the region for a regular or partially
//                        transparent theme-specified background that is
//                        bound by the specified "pRect".
//                        If the rectangle is empty, sets the HRGN to NULL
//                        and return S_FALSE.
//
//  hTheme              - theme data handle
//  iPartId             - part number to draw
//  iStateId            - state number (of the part)
//  pRect               - the RECT used to draw the part
//  pRegion             - receives handle to calculated region
//-------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeBackgroundRegionProc}
  GetThemeBackgroundRegionProc = function(Theme : HTheme; DC: HDC;
    iPartId, iStateId : Integer; pRect : PRect;
    var pRegion : HRGN) : HRESULT; stdcall;


//-------------------------------------------------------------------------
//  HitTestThemeBackground()
//                      - returns a HitTestCode (a subset of the values
//                        returned by WM_NCHITTEST) for the point "ptTest"
//                        within the theme-specified background
//                        (bound by pRect).  "pRect" and "ptTest" should
//                        both be in the same coordinate system
//                        (client, screen, etc).
//
//      hTheme          - theme data handle
//      hdc             - HDC to draw into
//      iPartId         - part number to test against
//      iStateId        - state number (of the part)
//      pRect           - the RECT used to draw the part
//      hrgn            - optional region to use; must be in same coordinates as
//                      -    pRect and pTest.
//      ptTest          - the hit point to be tested
//      dwOptions       - HTTB_xxx constants
//      pwHitTestCode   - receives the returned hit test code - one of:
//
//                        HTNOWHERE, HTLEFT, HTTOPLEFT, HTBOTTOMLEFT,
//                        HTRIGHT, HTTOPRIGHT, HTBOTTOMRIGHT,
//                        HTTOP, HTBOTTOM, HTCLIENT
//-------------------------------------------------------------------------
  {$EXTERNALSYM HitTestThemeBackgroundProc}
  HitTestThemeBackgroundProc = function(Theme : HTheme; {OPTIONAL} hdc : HDC;
    iPartId, iStateId : Integer; dwOptions : DWORD; pRect : PRect; {OPTIONAL} hrgn : HRGN;
    ptTest : TPoint; var pwHitTestCode : word) : HRESULT; stdcall;



//------------------------------------------------------------------------
//  DrawThemeLine()     - draws the theme-defined line within the
//                        specified "pRect".  "iStateId" selects the line
//                        type (flat, raised, lowered).  "dwDtlFlags"
//                        selects which line(s) to draw around the rect
//                        (left, top, right, bottom).
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iStateId            - style of line to draw (LVS_XXX or LHS_XXX)
//  pRect               - the RECT used to draw the line(s)
//  dwDtlFlags          - which parts of rect to draw (DTL_XXX flags)
//------------------------------------------------------------------------
//  DrawThemeLineProc = function(Theme : HTheme; hdc : HDC;
//    iStateId : Integer; pRect : PRect; dwDtlFlags : DWORD) : HRESULT; stdcall;


//------------------------------------------------------------------------
//  DrawThemeEdge()     - Similar to the DrawEdge() API, but uses part colors
//                        and is high-DPI aware
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iPartId             - part number to draw
//  iStateId            - state number of part
//  pDestRect           - the RECT used to draw the line(s)
//  uEdge               - Same as DrawEdge() API
//  uFlags              - Same as DrawEdge() API
//  pContentRect        - Receives the interior rect if (uFlags & BF_ADJUST)
//------------------------------------------------------------------------
  {$EXTERNALSYM DrawThemeEdgeProc}
  DrawThemeEdgeProc = function(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; const pDestRect: TRect; uEdge, uFlags: UINT;
    {OPTIONAL} pContentRect: PRect): HRESULT; stdcall;

//------------------------------------------------------------------------
//  DrawThemeBorder()   - draws the theme-defined border within the
//                        specified "pRect".  "iStateId" selects the
//                        border type (flat, raised, lowered).
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iStateId            - style of border to draw (BSS_XXX enums)
//  pRect               - the RECT used to draw the border
//------------------------------------------------------------------------
//  DrawThemeBorderProc = function (Theme : HTheme; hdc : HDC;
//    iStateId : Integer; pRect : PRect) : HRESULT; stdcall;

//------------------------------------------------------------------------
//  DrawThemeIcon()     - draws an image within an imagelist based on
//                        a (possible) theme-defined effect.
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iPartId             - part number to draw
//  iStateId            - state number of part
//  pRect               - the RECT to draw the image within
//  himl                - handle to IMAGELIST
//  iImageIndex         - index into IMAGELIST (which icon to draw)
//------------------------------------------------------------------------
  {$EXTERNALSYM DrawThemeIconProc}
  DrawThemeIconProc = function(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; pRect : PRect;
    himl : HIMAGELIST; iImageIndex : integer) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  IsThemePartDefined() - returns TRUE if the theme has defined parameters
//                         for the specified "iPartId" and "iStateId".
//
//  hTheme              - theme data handle
//  iPartId             - part number to find definition for
//  iStateId            - state number of part
//---------------------------------------------------------------------------
  {$EXTERNALSYM IsThemePartDefinedProc}
  IsThemePartDefinedProc = function(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean; stdcall;


//---------------------------------------------------------------------------
//  IsThemeBackgroundPartiallyTransparent()
//                      - returns TRUE if the theme specified background for
//                        the part/state has transparent pieces or
//                        alpha-blended pieces.
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//---------------------------------------------------------------------------
  {$EXTERNALSYM IsThemeBackgroundPartiallyTransparentProc}
  IsThemeBackgroundPartiallyTransparentProc = function(Theme : HTheme;
    iPartId, iStateId: Integer) : boolean; stdcall;


//---------------------------------------------------------------------------
//    lower-level theme information services
//---------------------------------------------------------------------------
// The following methods are getter routines for each of the Theme Data types.
// Controls/Windows are defined in drawable "parts" by their author: a
// parent part and 0 or more child parts.  Each of the parts can be
// described in "states" (ex: disabled, hot, pressed).
//---------------------------------------------------------------------------
// Each of the below methods takes a "iPartId" param to specify the
// part and a "iStateId" to specify the state of the part.
// "iStateId=0" refers to the root part.  "iPartId" = "0" refers to
// the root class.
//-----------------------------------------------------------------------
// Each method also take a "iPropId" param because multiple instances of
// the same primitive type can be defined in the theme schema.
//-----------------------------------------------------------------------

//-----------------------------------------------------------------------
//  GetThemeColor()     - Get the value for the specified COLOR property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pColor              - receives the value of the property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeColorProc}
  GetThemeColorProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; var Color : COLORREF) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeMetric()    - Get the value for the specified metric/size
//                        property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  piVal               - receives the value of the property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeMetricProc}
  GetThemeMetricProc = function(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; var piVal : integer) : HRESULT; stdcall;

//-----------------------------------------------------------------------
//  GetThemeString()    - Get the value for the specified string property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pszBuff             - receives the string property value
//  cchMaxBuffChars     - max. number of chars allowed in pszBuff
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeStringProc}
  GetThemeStringProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} pszBuff : PWideChar; cchMaxBuffChars : integer) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeBool()      - Get the value for the specified BOOL property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pfVal               - receives the value of the property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeBoolProc}
  GetThemeBoolProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : BOOL) : HRESULT; stdcall;

//-----------------------------------------------------------------------
//  GetThemeInt()       - Get the value for the specified int property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  piVal               - receives the value of the property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeIntProc}
  GetThemeIntProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeEnumValue() - Get the value for the specified ENUM property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  piVal               - receives the value of the enum (cast to int* )
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeEnumValueProc}
  GetThemeEnumValueProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pfVal : integer) : HRESULT; stdcall;

//-----------------------------------------------------------------------
//  GetThemePosition()  - Get the value for the specified position
//                        property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pPoint              - receives the value of the position property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemePositionProc}
  GetThemePositionProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pPoint : TPoint) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeFont()      - Get the value for the specified font property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pFont               - receives the value of the LOGFONT property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeFontProc}
  GetThemeFontProc = function(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} pFont : PLogFontW) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeRect()      - Get the value for the specified RECT property
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to get the value for
//  pRect               - receives the value of the RECT property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeRectProc}
  GetThemeRectProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pRect : TRect) : HRESULT; stdcall;

//-----------------------------------------------------------------------
//  GetThemeMargins()   - Get the value for the specified MARGINS property
//
//      hTheme          - theme data handle
//      iPartId         - part number
//      iStateId        - state number of part
//      iPropId         - the property number to get the value for
//      pMargins        - receives the value of the MARGINS property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeMarginsProc}
  GetThemeMarginsProc = function(Theme : HTheme; DC: HDC; iPartId, iStateId,
    iPropId : Integer; {OUT} var Margins : TMargins) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemeIntList()   - Get the value for the specified INTLIST struct
//
//      hTheme          - theme data handle
//      iPartId         - part number
//      iStateId        - state number of part
//      iPropId         - the property number to get the value for
//      pIntList        - receives the value of the INTLIST property
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemeIntListProc}
  GetThemeIntListProc = function(Theme : HTheme; iPartId, iStateId,
      iPropId : Integer; {OUT} var pIntList : TIntList) : HRESULT; stdcall;


//-----------------------------------------------------------------------
//  GetThemePropertyOrigin()
//                      - searches for the specified theme property
//                        and sets "pOrigin" to indicate where it was
//                        found (or not found)
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to search for
//  pOrigin             - receives the value of the property origin
//-----------------------------------------------------------------------
  {$EXTERNALSYM GetThemePropertyOriginProc}
  GetThemePropertyOriginProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} var pOrigin : integer) : HRESULT; stdcall;

//---------------------------------------------------------------------------
//  SetWindowTheme()
//                      - redirects an existing Window to use a different
//                        section of the current theme information than its
//                        class normally asks for.
//
//  hwnd                - the handle of the window (cannot be NULL)
//
//  pszSubAppName       - app (group) name to use in place of the calling
//                        app's name.  If NULL, the actual calling app
//                        name will be used.
//
//  pszSubIdList        - semicolon separated list of class Id names to
//                        use in place of actual list passed by the
//                        window's class.  if NULL, the id list from the
//                        calling class is used.
//---------------------------------------------------------------------------
// The Theme Manager will remember the "pszSubAppName" and the
// "pszSubIdList" associations thru the lifetime of the window (even
// if themes are subsequently changed).  The window is sent a
// "WM_THEMECHANGED" msg at the end of this call, so that the new
// theme can be found and applied.
//---------------------------------------------------------------------------
// When "pszSubAppName" or "pszSubIdList" are NULL, the Theme Manager
// removes the previously remember association.  To turn off theme-ing for
// the specified window, you can pass an empty string (L"") so it
// won't match any section entries.
//---------------------------------------------------------------------------
  {$EXTERNALSYM SetWindowThemeProc}
  SetWindowThemeProc = function(hwnd : HWND; pszSubAppName, pszSubIdList : PWideChar) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  GetThemeFilename()  - Get the value for the specified FILENAME property.
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateId            - state number of part
//  iPropId             - the property number to search for
//  pszThemeFileName    - output buffer to receive the filename
//  cchMaxBuffChars     - the size of the return buffer, in chars
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeFilenameProc}
  GetThemeFilenameProc = function(Theme : HTheme; iPartId, iStateId,
    iPropId : Integer; {OUT} pszThemeFileName : PWideChar; cchMaxBuffChars : integer) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  GetThemeSysColor()  - Get the value of the specified System color.
//
//  hTheme              - the theme data handle.  if non-NULL, will return
//                        color from [SysMetrics] section of theme.
//                        if NULL, will return the global system color.
//
//  iColorId            - the system color index defined in winuser.h
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysColorProc}
  GetThemeSysColorProc = function(Theme : HTheme; iColorId : integer) : COLORREF; stdcall;

//---------------------------------------------------------------------------
//  GetThemeSysColorBrush()
//                      - Get the brush for the specified System color.
//
//  hTheme              - the theme data handle.  if non-NULL, will return
//                        brush matching color from [SysMetrics] section of
//                        theme.  if NULL, will return the brush matching
//                        global system color.
//
//  iColorId            - the system color index defined in winuser.h
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysColorBrushProc}
  GetThemeSysColorBrushProc = function(Theme : HTheme; iColorId : integer) : HBRUSH; stdcall;


//---------------------------------------------------------------------------
//  GetThemeSysSize()   - Get the value of the specified System size metric.
//
//  hTheme              - the theme data handle.  if non-NULL, will return
//                        size from [SysMetrics] section of theme.
//                        if NULL, will return the global system metric.
//
//  iSizeId             - the following values are searched for in the
//                        theme [SysMetrics] section:
//
//                          SM_CXBORDER   (border width)
//                          SM_CXVSCROLL  (scrollbar width)
//                          SM_CYHSCROLL  (scrollbar height)
//                          SM_CXSIZE     (caption width)
//                          SM_CYSIZE     (caption height)
//                          SM_CXSMSIZE   (small caption width)
//                          SM_CYSMSIZE   (small caption height)
//                          SM_CXMENUSIZE (menubar width)
//                          SM_CYMENUSIZE (menubar height)
//
//                        any other iSizeId values will be passed directly
//                        to the system GetSystemMetrics() function
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysSizeProc}
  GetThemeSysSizeProc = function(Theme : HTheme; iSizeId : integer) : integer; stdcall;

//---------------------------------------------------------------------------
//  GetThemeSysBool()   - Get the boolean value of specified System metric.
//
//  hTheme              - the theme data handle.  if non-NULL, will return
//                        BOOL from [SysMetrics] section of theme.
//                        if NULL, will return the specified system boolean.
//
//  iBoolId             - the TMT_XXX BOOL number (first BOOL
//                        is TMT_FLATMENUS)
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysBoolProc}
  GetThemeSysBoolProc = function(Theme : HTheme; iBoolId : integer) : BOOL; stdcall;


//---------------------------------------------------------------------------
//  GetThemeSysFont()   - Get the LOGFONT for the specified System font.
//
//  hTheme              - the theme data handle.  if non-NULL, will return
//                        font from [SysMetrics] section of theme.
//                        if NULL, will return the specified system font.
//
//  iFontId             - the TMT_XXX font number (first font
//                        is TMT_CAPTIONFONT)
//
//  plf                 - ptr to LOGFONT to receive the font value.
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysFontProc}
  GetThemeSysFontProc = function(Theme : HTheme; iFontId : integer; var plf : TLogFontW) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  GetThemeSysString() - Get the value of specified System string metric.
//
//  hTheme              - the theme data handle (required)
//
//  iStringId           - must be one of the following values:
//
//                          TMT_CSSNAME
//                          TMT_XMLNAME
//
//  pszStringBuff       - the buffer to receive the string value
//
//  cchMaxStringChars   - max. number of chars that pszStringBuff can hold
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysStringProc}
  GetThemeSysStringProc = function(Theme : HTheme; iStringId : integer;
    {OUT} pszStringBuff : PWideChar; cchMaxStringChars : integer) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  GetThemeSysInt() - Get the value of specified System int.
//
//  hTheme              - the theme data handle (required)
//
//  iIntId              - must be one of the following values:
//
//                          TMT_DPIX
//                          TMT_DPIY
//                          TMT_MINCOLORDEPTH
//
//  piValue             - ptr to int to receive value
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeSysIntProc}
  GetThemeSysIntProc  = function(Theme : HTheme; iIntId : integer; var piValue : integer) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  IsAppThemed()       - returns TRUE if current app is themed
//---------------------------------------------------------------------------
  {$EXTERNALSYM IsAppThemedProc}
  IsAppThemedProc = function : boolean; stdcall;


//---------------------------------------------------------------------------
//  GetWindowTheme()    - if window is themed, returns its most recent
//                        HTHEME from OpenThemeData() - otherwise, returns
//                        NULL.
//
//      hwnd            - the window to get the HTHEME of
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetWindowThemeProc}
  GetWindowThemeProc = function(hwnd : HWND) : HTheme; stdcall;

//---------------------------------------------------------------------------
//  EnableThemeDialogTexture()
//
//  - Enables/disables dialog background theme.  This method can be used to
//    tailor dialog compatibility with child windows and controls that
//    may or may not coordinate the rendering of their client area backgrounds
//    with that of their parent dialog in a manner that supports seamless
//    background texturing.
//
//      hdlg         - the window handle of the target dialog
//      fEnable      - TRUE to enable the theme-defined background texturing,
//                     FALSE to disable background texturing.
//---------------------------------------------------------------------------
  {$EXTERNALSYM EnableThemeDialogTextureProc}
  EnableThemeDialogTextureProc = function(hwnd : HWND; fEnable : DWORD) : HRESULT; stdcall;

//---------------------------------------------------------------------------
//  IsThemeDialogTextureEnabled()
//
//  - Reports whether the dialog supports background texturing.
//
//      hdlg         - the window handle of the target dialog
//---------------------------------------------------------------------------
  {$EXTERNALSYM IsThemeDialogTextureEnabledProc}
  IsThemeDialogTextureEnabledProc = function: BOOL; stdcall;


//---------------------------------------------------------------------------
//  GetThemeAppProperties()
//                      - returns the app property flags that control theming
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeAppPropertiesProc}
  GetThemeAppPropertiesProc = function : DWORD; stdcall;

//---------------------------------------------------------------------------
//  SetThemeAppProperties()
//                      - sets the flags that control theming within the app
//
//      dwFlags         - the flag values to be set
//---------------------------------------------------------------------------
  {$EXTERNALSYM SetThemeAppPropertiesProc}
  SetThemeAppPropertiesProc = procedure (dwFlags : DWORD); stdcall;


//---------------------------------------------------------------------------
//  GetCurrentThemeName()
//                      - Get the name of the current theme in-use.
//                        Optionally, return the ColorScheme name and the
//                        Size name of the theme.
//
//  pszThemeFileName    - receives the theme path & filename
//  cchMaxNameChars     - max chars allowed in pszNameBuff
//
//  pszColorBuff        - (optional) receives the canonical color scheme name
//                        (not the display name)
//  cchMaxColorChars    - max chars allowed in pszColorBuff
//
//  pszSizeBuff         - (optional) receives the canonical size name
//                        (not the display name)
//  cchMaxSizeChars     - max chars allowed in pszSizeBuff
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetCurrentThemeNameProc}
  GetCurrentThemeNameProc = function(
    {OUT} pszThemeFileName : PWideChar; cchMaxNameChars : integer;
    {OUT} {OPTIONAL} pszColorBuff : PWideChar; cchMaxColorChars : integer;
    {OUT} {OPTIONAL} pszSizeBuff : PWideChar; cchMaxSizeChars : integer) : HRESULT; stdcall;


//---------------------------------------------------------------------------
//  GetThemeDocumentationProperty()
//                      - Get the value for the specified property name from
//                        the [documentation] section of the themes.ini file
//                        for the specified theme.  If the property has been
//                        localized in the theme files string table, the
//                        localized version of the property value is returned.
//
//  pszThemeFileName    - filename of the theme file to query
//  pszPropertyName     - name of the string property to retreive a value for
//  pszValueBuff        - receives the property string value
//  cchMaxValChars      - max chars allowed in pszValueBuff
//---------------------------------------------------------------------------
  {$EXTERNALSYM GetThemeDocumentationPropertyProc}
  GetThemeDocumentationPropertyProc = function(pszThemeName : PWideChar;
    pszPropertyName : PWideChar; {OUT} pszValueBuff : PWideChar; cchMaxValChars : integer) : HRESULT; stdcall;



//---------------------------------------------------------------------------
//  Theme API Error Handling
//
//      All functions in the Theme API use the WIN32 function
//      "SetLastError()" to record any call failures.
//
//      To retreive the simple error code of the last failure on the
//      current thread, use the WIN32 function "GetLastError()".
//
//      To retreive the full error context information for the last
//      theme API failure on the current thread, use the
//      function "GetThemeLastErrorContext()".
//
//      To format a theme error and context into a msg, use the
//      function "FormatThemeMessage()".
//---------------------------------------------------------------------------
//GetThemeLastErrorContextProc = function ({OUT}pContext : TThemeErrorContext) : HRESULT; stdcall;

//---------------------------------------------------------------------------
//  FormatThemeMessage()
//                      - use the supplied theme error context
//                        to format an error message in the specified
//                        language.
//
//  dwLanguageId        - the language to format the error msg into
//
//  pContext            - ptr to theme context structure (see above)
//                        that supplies the HRESULT and string params
//
//  pszMessageBuff      - where to write the formatted msg.  If the
//                        message is too long, it is truncated.
//
//  cchMaxMessageChars  - maximum number of chars to write to buff
//---------------------------------------------------------------------------
//  FormatThemeMessageProc = function(dwLanguageId : DWORD;
//    pContext : PThemeErrorContext; {OUT} pszMessageBuff : PWideChar;
//    cchMaxMessageChars : integer) : HRESULT; stdcall;

//---------------------------------------------------------------------------
// GetThemeImageFromWindow
//---------------------------------------------------------------------------
// GetThemeImageFromParentProc = function (hwnd : HWND; hdc : HDC; var prc : TRect) : HRESULT; stdcall;


{$ENDIF IFNDEF CLR}

{.$ENDIF LMDDISABLE_LMDTHEMES}

{$ENDIF LMDDISABLE_LMDTHEMES}

{$IFNDEF LMDDISABLE_LMDTHEMES}

// for internal use only; don't call these routines directly
procedure InitializeUxTheme;
procedure FinalizeUxTheme;

var
{$IFDEF CLR}
  _IsThemeActive                 : IsThemeActiveProc;
  _EnableTheming                 : EnableThemingProc;
  _OpenThemeData                 : OpenThemeDataProc;
  _CloseThemeData                : CloseThemeDataProc;
  _DrawThemeParentBackground1     : DrawThemeParentBackgroundProc1;
  _DrawThemeParentBackground2     : DrawThemeParentBackgroundProc2;
  _DrawThemeBackground1           : DrawThemeBackgroundProc1;
  _DrawThemeBackground2           : DrawThemeBackgroundProc2;
  _DrawThemeText                 : DrawThemeTextProc;
  _GetThemeBackgroundContentRect : GetThemeBackgroundContentRectProc;
  _GetThemeBackgroundExtent      : GetThemeBackgroundExtentProc;
  _GetThemePartSize1              : GetThemePartSizeProc1;
  _GetThemePartSize2              : GetThemePartSizeProc2;
  _GetThemeTextExtent            : GetThemeTextExtentProc;
  _GetThemeTextMetrics           : GetThemeTextMetricsProc;
  _GetThemeBackgroundRegion      : GetThemeBackgroundRegionProc;
  _HitTestThemeBackground        : HitTestThemeBackgroundProc;
  _DrawThemeEdge                 : DrawThemeEdgeProc;
  _DrawThemeIcon                 : DrawThemeIconProc;
  _IsThemePartDefined            : IsThemePartDefinedProc;
  _IsThemeBackgroundPartiallyTransparent : IsThemeBackgroundPartiallyTransparentProc;
  _GetThemeColor                 : GetThemeColorProc;
  _GetThemeMetric                : GetThemeMetricProc;
  _GetThemeString                : GetThemeStringProc;
  _GetThemeBool                  : GetThemeBoolProc;
  _GetThemeInt                   : GetThemeIntProc;
  _GetThemeEnumValue             : GetThemeEnumValueProc;
  _GetThemePosition              : GetThemePositionProc;
  _GetThemeFont                  : GetThemeFontProc;
  _GetThemeRect                  : GetThemeRectProc;
  _GetThemeMargins               : GetThemeMarginsProc;
  _GetThemeIntList               : GetThemeIntListProc;
  _GetThemePropertyOrigin        : GetThemePropertyOriginProc;
  _SetWindowTheme                : SetWindowThemeProc;
  _GetThemeFilename              : GetThemeFilenameProc;
  _GetThemeSysColor              : GetThemeSysColorProc;
  _GetThemeSysColorBrush         : GetThemeSysColorBrushProc;
  _GetThemeSysSize               : GetThemeSysSizeProc;
  _GetThemeSysBool               : GetThemeSysBoolProc;
  _GetThemeSysFont               : GetThemeSysFontProc;
  _GetThemeSysString             : GetThemeSysStringProc;
  _GetThemeSysInt                : GetThemeSysIntProc;
  _IsAppThemed                   : IsAppThemedProc;
  _GetWindowTheme                : GetWindowThemeProc;
  _EnableThemeDialogTexture      : EnableThemeDialogTextureProc;
  _IsThemeDialogTextureEnabled   : IsThemeDialogTextureEnabledProc;
  _GetThemeAppProperties         : GetThemeAppPropertiesProc;
  _SetThemeAppProperties         : SetThemeAppPropertiesProc;
  _GetCurrentThemeName           : GetCurrentThemeNameProc;
  _GetThemeDocumentationProperty : GetThemeDocumentationPropertyProc;
{$ELSE}
  {$EXTERNALSYM IsThemeActive}
  IsThemeActive                 : IsThemeActiveProc;
  {$EXTERNALSYM EnableTheming}
  EnableTheming                 : EnableThemingProc;
  {$EXTERNALSYM OpenThemeData}
  OpenThemeData                 : OpenThemeDataProc;
  {$EXTERNALSYM CloseThemeData}
  CloseThemeData                : CloseThemeDataProc;
  {$EXTERNALSYM DrawThemeParentBackground}
  DrawThemeParentBackground     : DrawThemeParentBackgroundProc;
  {$EXTERNALSYM DrawThemeBackground}
  DrawThemeBackground           : DrawThemeBackgroundProc;
  {$EXTERNALSYM DrawThemeText}
  DrawThemeText                 : DrawThemeTextProc;
  {$EXTERNALSYM GetThemeBackgroundContentRect}
  GetThemeBackgroundContentRect : GetThemeBackgroundContentRectProc;
  {$EXTERNALSYM GetThemeBackgroundExtent}
  GetThemeBackgroundExtent      : GetThemeBackgroundExtentProc;
  {$EXTERNALSYM GetThemePartSize}
  GetThemePartSize              : GetThemePartSizeProc;
  {$EXTERNALSYM GetThemeTextExtent}
  GetThemeTextExtent            : GetThemeTextExtentProc;
  {$EXTERNALSYM GetThemeTextMetrics}
  GetThemeTextMetrics           : GetThemeTextMetricsProc;
  {$EXTERNALSYM GetThemeBackgroundRegion}
  GetThemeBackgroundRegion      : GetThemeBackgroundRegionProc;
  {$EXTERNALSYM HitTestThemeBackground}
  HitTestThemeBackground        : HitTestThemeBackgroundProc;
  {$EXTERNALSYM DrawThemeEdge}
  DrawThemeEdge                 : DrawThemeEdgeProc;
  {$EXTERNALSYM DrawThemeIcon}
  DrawThemeIcon                 : DrawThemeIconProc;
  {$EXTERNALSYM IsThemePartDefined}
  IsThemePartDefined            : IsThemePartDefinedProc;
  {$EXTERNALSYM IsThemeBackgroundPartiallyTransparent}
  IsThemeBackgroundPartiallyTransparent : IsThemeBackgroundPartiallyTransparentProc;
  {$EXTERNALSYM GetThemeColor}
  GetThemeColor                 : GetThemeColorProc;
  {$EXTERNALSYM GetThemeMetric}
  GetThemeMetric                : GetThemeMetricProc;
  {$EXTERNALSYM GetThemeString}
  GetThemeString                : GetThemeStringProc;
  {$EXTERNALSYM GetThemeBool}
  GetThemeBool                  : GetThemeBoolProc;
  {$EXTERNALSYM GetThemeInt}
  GetThemeInt                   : GetThemeIntProc;
  {$EXTERNALSYM GetThemeEnumValue}
  GetThemeEnumValue             : GetThemeEnumValueProc;
  {$EXTERNALSYM GetThemePosition}
  GetThemePosition              : GetThemePositionProc;
  {$EXTERNALSYM GetThemeFont}
  GetThemeFont                  : GetThemeFontProc;
  {$EXTERNALSYM GetThemeRect}
  GetThemeRect                  : GetThemeRectProc;
  {$EXTERNALSYM GetThemeMargins}
  GetThemeMargins               : GetThemeMarginsProc;
  {$EXTERNALSYM GetThemeIntList}
  GetThemeIntList               : GetThemeIntListProc;
  {$EXTERNALSYM GetThemePropertyOrigin}
  GetThemePropertyOrigin        : GetThemePropertyOriginProc;
  {$EXTERNALSYM SetWindowTheme}
  SetWindowTheme                : SetWindowThemeProc;
  {$EXTERNALSYM GetThemeFilename}
  GetThemeFilename              : GetThemeFilenameProc;
  {$EXTERNALSYM GetThemeSysColor}
  GetThemeSysColor              : GetThemeSysColorProc;
  {$EXTERNALSYM GetThemeSysColorBrush}
  GetThemeSysColorBrush         : GetThemeSysColorBrushProc;
  {$EXTERNALSYM GetThemeSysSize}
  GetThemeSysSize               : GetThemeSysSizeProc;
  {$EXTERNALSYM GetThemeSysBool}
  GetThemeSysBool               : GetThemeSysBoolProc;
  {$EXTERNALSYM GetThemeSysFont}
  GetThemeSysFont               : GetThemeSysFontProc;
  {$EXTERNALSYM GetThemeSysString}
  GetThemeSysString             : GetThemeSysStringProc;
  {$EXTERNALSYM GetThemeSysInt}
  GetThemeSysInt                : GetThemeSysIntProc;
  {$EXTERNALSYM IsAppThemed}
  IsAppThemed                   : IsAppThemedProc;
  {$EXTERNALSYM GetWindowTheme}
  GetWindowTheme                : GetWindowThemeProc;
  {$EXTERNALSYM EnableThemeDialogTexture}
  EnableThemeDialogTexture      : EnableThemeDialogTextureProc;
  {$EXTERNALSYM IsThemeDialogTextureEnabled}
  IsThemeDialogTextureEnabled   : IsThemeDialogTextureEnabledProc;
  {$EXTERNALSYM GetThemeAppProperties}
  GetThemeAppProperties         : GetThemeAppPropertiesProc;
  {$EXTERNALSYM SetThemeAppProperties}
  SetThemeAppProperties         : SetThemeAppPropertiesProc;
  {$EXTERNALSYM GetCurrentThemeName}
  GetCurrentThemeName           : GetCurrentThemeNameProc;
  {$EXTERNALSYM GetThemeDocumentationProperty}
  GetThemeDocumentationProperty : GetThemeDocumentationPropertyProc;
{$ENDIF CLR}

  LMDThemeEngineEnabled: Boolean;


{$ENDIF LMDDISABLE_LMDTHEMES}

implementation

uses
  {$IFDEF CLR}
  System.Security,
  {$ENDIF}
  SysUtils;
  
const
  UxTheme = 'UxTheme.dll';

{$IFNDEF LMDDISABLE_LMDTHEMES}

{$IFDEF CLR}
[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'OpenThemeData')]
function OpenThemeData_(hwnd: HWND; pszClassList: string): HTHEME; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'CloseThemeData')]
function CloseThemeData_(Theme: HTHEME): HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'EnableTheming')]
function EnableTheming_(fEnable : boolean) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'EnableThemeDialogTexture')]
function EnableThemeDialogTexture_(hwnd : HWND; fEnable : DWORD) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetCurrentThemeName')]
function GetCurrentThemeName_(pszThemeFileName : StringBuilder; cchMaxNameChars : integer;
    pszColorBuff : StringBuilder; cchMaxColorChars : integer;
    pszSizeBuff : StringBuilder; cchMaxSizeChars : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeAppProperties')]
function GetThemeAppProperties_ : DWORD; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeColor')]
function GetThemeColor_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; var Color : COLORREF) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeDocumentationProperty')]
function GetThemeDocumentationProperty_(pszThemeName : string;
  pszPropertyName : string; {OUT}  pszValueBuff : StringBuilder; cchMaxValChars : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeBackgroundExtent')]
function GetThemeBackgroundExtent_(Theme : HTheme; hdc : HDC; iPartId, iStateId : integer; const pBoundingRect : TRect; var pContentRect : TRect) : HResult; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeBool')]
function GetThemeBool_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pfVal : BOOL) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeEnumValue')]
function GetThemeEnumValue_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pfVal : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeFilename')]
function GetThemeFilename_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT}  pszThemeFileName : StringBuilder; cchMaxBuffChars : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeFont')]
function GetThemeFont_(Theme : HTheme; DC: HDC; iPartId, iStateId,    iPropId : Integer; {OUT} var pFont : TLogFontW) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeInt')]
function GetThemeInt_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pfVal : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeIntList')]
function GetThemeIntList_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pIntList : TIntList) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeMargins')]
function GetThemeMargins_(Theme : HTheme; DC: HDC; iPartId, iStateId,   iPropId : Integer; {OUT} var Margins : TMargins) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeMetric')]
function GetThemeMetric_(Theme : HTheme; DC: HDC; iPartId, iStateId,   iPropId : Integer; var piVal : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemePartSize')]
function GetThemePartSize_(Theme : HTheme; hdc : HDC; iPartId, iStateId : integer; rect : TRect; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemePartSize')]
function GetThemePartSize_(Theme : HTheme; hdc : HDC; iPartId, iStateId : integer; rect : IntPtr; eSize: THEMESIZE; var psz : TSize) : HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemePosition')]
function GetThemePosition_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pPoint : TPoint) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemePropertyOrigin')]
function GetThemePropertyOrigin_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var pOrigin : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeRect')]
function GetThemeRect_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT} var Rect : TRect) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeString')]
function GetThemeString_(Theme : HTheme; iPartId, iStateId, iPropId : Integer; {OUT}  pszBuff : StringBuilder; cchMaxBuffChars : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysColor')]
function GetThemeSysColor_(Theme : HTheme; iColorId : integer) : COLORREF; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysBool')]
function GetThemeSysBool_(Theme : HTheme; iBoolId : integer) : BOOL; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysColorBrush')]
function GetThemeSysColorBrush_(Theme : HTheme; iColorId : integer) : HBRUSH; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysFont')]
function GetThemeSysFont_(Theme : HTheme; iFontId : integer; var plf : TLogFontW) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysInt')]
function GetThemeSysInt_(Theme : HTheme; iIntId : integer; var piValue : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysSize')]
function GetThemeSysSize_(Theme : HTheme; iSizeId : integer) : integer; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeSysString')]
function GetThemeSysString_(Theme : HTheme; iStringId : integer; {OUT}  pszStringBuff : StringBuilder; cchMaxStringChars : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeTextMetrics')]
function GetThemeTextMetrics_(Theme : HTheme; hdc : HDC; iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeBackgroundRegion')]
function GetThemeBackgroundRegion_(Theme : HTheme; DC: HDC;
    iPartId, iStateId : Integer; pRect : TRect;
    var pRegion : HRGN) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetWindowTheme')]
function GetWindowTheme_(hwnd : HWND) : HTheme; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'HitTestThemeBackground')]
function HitTestThemeBackground_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : Integer; dwOptions : DWORD; pRect : TRect; hrgn : HRGN;
    ptTest : TPoint; var pwHitTestCode : word) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeText')]
function DrawThemeText_(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
    pszText : string; iCharCount : integer; dwTextFlags : DWORD;
    dwTextFlags2 : DWORD; const Rect : TRect) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeEdge')]
function DrawThemeEdge_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId: Integer; const DestRect: TRect; uEdge, uFlags: UINT;
    var ContentRect: TRect): HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeIcon')]
function DrawThemeIcon_(Theme : HTheme; hdc : HDC;
  iPartId, iStateId: Integer; pRect : TRect;
  himl : HIMAGELIST; iImageIndex : integer) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'IsAppThemed')]
function IsAppThemed_ : boolean; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'IsThemeActive')]
function IsThemeActive_: Boolean; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'IsThemePartDefined')]
function IsThemePartDefined_(Theme : HTheme; iPartId, iStateId: Integer) : boolean; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'IsThemeBackgroundPartiallyTransparent')]
function IsThemeBackgroundPartiallyTransparent_(Theme : HTheme; iPartId, iStateId: Integer) : boolean; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'IsThemeDialogTextureEnabled')]
function IsThemeDialogTextureEnabled_: BOOL; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'SetThemeAppProperties')]
procedure SetThemeAppProperties_(dwFlags: DWORD); external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'SetWindowTheme')]
function SetWindowTheme_(hwnd : HWND; pszSubAppName, pszSubIdList : string) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeParentBackground')]
function DrawThemeParentBackground_(hWnd: HWND; hDC: HDC;
          const Rect: TRect): HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeParentBackground')]
function DrawThemeParentBackground_(hWnd: HWND; hDC: HDC;
          Rect: IntPtr): HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeBackground')]
function DrawThemeBackground_(Theme: HTHEME; hDC: HDC;
           iPartId, iStateId: Integer;
           const Rect:TRect; const ClipRect: TRect): HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'DrawThemeBackground')]
function DrawThemeBackground_(Theme: HTHEME; hDC: HDC;
          iPartId, iStateId: Integer;
          const Rect:TRect; ClipRect: IntPtr): HRESULT; overload; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeTextExtent')]
function GetThemeTextExtent_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; pszText : string; iCharCount : integer;
    dwTextFlags : DWORD; const BoundingRect : TRect;
    var ExtentRect : TRect) : HRESULT; external;

[SuppressUnmanagedCodeSecurity, DllImport(UxTheme, CharSet = CharSet.Auto, SetLastError = True, EntryPoint = 'GetThemeBackgroundContentRect')]
function GetThemeBackgroundContentRect_(Theme : HTheme; hdc : HDC;
    iPartId, iStateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult; external;
{$ENDIF CLR}

var
  UxThemeInited: boolean;
  hThemeLib: HINST;

{------------------------------------------------------------------------------}
procedure InitializeUxTheme;
begin
  if UxThemeInited then
    exit;
  if (Win32Platform  = VER_PLATFORM_WIN32_NT) and
     (((Win32MajorVersion = 5) and (Win32MinorVersion >= 1)) or
      (Win32MajorVersion > 5)) then
  begin
    hThemeLib := SafeLoadLibrary(UxTheme);
    if hThemeLib <> 0 then
    begin
      {$IFNDEF CLR}
      IsThemeActive := GetProcAddress(hThemeLib, 'IsThemeActive');
      EnableTheming := GetProcAddress(hThemeLib, 'EnableTheming');
      OpenThemeData := GetProcAddress(hThemeLib, 'OpenThemeData');
      CloseThemeData := GetProcAddress(hThemeLib, 'CloseThemeData');
      DrawThemeParentBackground := GetProcAddress(hThemeLib, 'DrawThemeParentBackground');
      DrawThemeBackground := GetProcAddress(hThemeLib, 'DrawThemeBackground');
      DrawThemeText := GetProcAddress(hThemeLib, 'DrawThemeText');
      GetThemeBackgroundContentRect := GetProcAddress(hThemeLib, 'GetThemeBackgroundContentRect');
      GetThemeBackgroundExtent := GetProcAddress(hThemeLib, 'GetThemeBackgroundExtent');
      GetThemePartSize := GetProcAddress(hThemeLib, 'GetThemePartSize');
      GetThemeTextExtent := GetProcAddress(hThemeLib, 'GetThemeTextExtent');
      GetThemeTextMetrics := GetProcAddress(hThemeLib, 'GetThemeTextMetrics');
      GetThemeBackgroundRegion := GetProcAddress(hThemeLib, 'GetThemeBackgroundRegion');
      HitTestThemeBackground := GetProcAddress(hThemeLib, 'HitTestThemeBackground');
      DrawThemeEdge := GetProcAddress(hThemeLib, 'DrawThemeEdge');
      DrawThemeIcon := GetProcAddress(hThemeLib, 'DrawThemeIcon');
      IsThemePartDefined := GetProcAddress(hThemeLib, 'IsThemePartDefined');
      IsThemeBackgroundPartiallyTransparent := GetProcAddress(hThemeLib, 'IsThemeBackgroundPartiallyTransparent');
      GetThemeColor  := GetProcAddress(hThemeLib, 'GetThemeColor');
      GetThemeMetric := GetProcAddress(hThemeLib, 'GetThemeMetric');
      GetThemeString := GetProcAddress(hThemeLib, 'GetThemeString');
      GetThemeBool   := GetProcAddress(hThemeLib, 'GetThemeBool');
      GetThemeInt    := GetProcAddress(hThemeLib, 'GetThemeInt');
      GetThemeEnumValue := GetProcAddress(hThemeLib, 'GetThemeEnumValue');
      GetThemeFilename  := GetProcAddress(hThemeLib, 'GetThemeFilename');

      GetThemePosition  := GetProcAddress(hThemeLib, 'GetThemePosition');
      GetThemeFont  := GetProcAddress(hThemeLib, 'GetThemeFont');
      GetThemeRect  := GetProcAddress(hThemeLib, 'GetThemeRect');
      GetThemeMargins  := GetProcAddress(hThemeLib, 'GetThemeMargins');
      GetThemeIntList  := GetProcAddress(hThemeLib, 'GetThemeIntList');
      GetThemePropertyOrigin  := GetProcAddress(hThemeLib, 'GetThemePropertyOrigin');
      SetWindowTheme  := GetProcAddress(hThemeLib, 'SetWindowTheme');

      GetThemeSysColor  := GetProcAddress(hThemeLib, 'GetThemeSysColor');
      GetThemeSysColorBrush  := GetProcAddress(hThemeLib, 'GetThemeSysColorBrush');
      GetThemeSysSize  := GetProcAddress(hThemeLib, 'GetThemeSysSize');
      GetThemeSysBool  := GetProcAddress(hThemeLib, 'GetThemeSysBool');
      GetThemeSysFont  := GetProcAddress(hThemeLib, 'GetThemeSysFont');
      GetThemeSysString  := GetProcAddress(hThemeLib, 'GetThemeSysString');
      GetThemeSysInt  := GetProcAddress(hThemeLib, 'GetThemeSysInt');
      IsAppThemed  := GetProcAddress(hThemeLib, 'IsAppThemed');
      GetWindowTheme   := GetProcAddress(hThemeLib, 'GetWindowTheme');

      EnableThemeDialogTexture := GetProcAddress(hThemeLib, 'EnableThemeDialogTexture');
      IsThemeDialogTextureEnabled := GetProcAddress(hThemeLib, 'IsThemeDialogTextureEnabled');
      GetThemeAppProperties := GetProcAddress(hThemeLib, 'GetThemeAppProperties');
      SetThemeAppProperties := GetProcAddress(hThemeLib, 'SetThemeAppProperties');
      GetThemeDocumentationProperty := GetProcAddress(hThemeLib, 'GetThemeDocumentationProperty');
      GetCurrentThemeName  := GetProcAddress(hThemeLib, 'GetCurrentThemeName');
      {$ENDIF IFNDEF CLR}
      XPThemesAvailable := True;
      UxThemeInited := True;
    end;
  end;
end;

{------------------------------------------------------------------------------}
procedure FinalizeUxTheme;
begin
  {$IFNDEF CLR}
  if UxThemeInited and (hThemeLib <> 0) then
  begin
    IsThemeActive := nil;
    EnableTheming := nil;
    OpenThemeData := nil;
    CloseThemeData := nil;
    DrawThemeParentBackground := nil;
    DrawThemeBackground := nil;
    DrawThemeText := nil;
    GetThemeBackgroundContentRect := nil;
    GetThemeBackgroundExtent := nil;
    GetThemePartSize := nil;
    GetThemeTextExtent := nil;
    GetThemeTextMetrics := nil;
    GetThemeBackgroundRegion := nil;
    HitTestThemeBackground := nil;
    DrawThemeEdge := nil;
    DrawThemeIcon := nil;
    IsThemePartDefined := nil;
    IsThemeBackgroundPartiallyTransparent := nil;
    GetThemeColor  := nil;
    GetThemeMetric := nil;
    GetThemeString := nil;
    GetThemeBool   := nil;
    GetThemeInt    := nil;
    GetThemeEnumValue := nil;
    GetThemeFilename  := nil;
    GetThemePosition  := nil;
    GetThemeFont  := nil;
    GetThemeRect  := nil;
    GetThemeMargins  := nil;
    GetThemeIntList  := nil;
    GetThemePropertyOrigin  := nil;
    SetWindowTheme  := nil;

    GetThemeSysColor  := nil;
    GetThemeSysColorBrush  := nil;
    GetThemeSysSize  := nil;
    GetThemeSysBool  := nil;
    GetThemeSysFont  := nil;
    GetThemeSysString  := nil;
    GetThemeSysInt  := nil;
    IsAppThemed  := nil;
    GetWindowTheme   := nil;

    EnableThemeDialogTexture := nil;
    IsThemeDialogTextureEnabled := nil;
    GetThemeAppProperties := nil;
    SetThemeAppProperties := nil;
    GetThemeDocumentationProperty := nil;
    GetCurrentThemeName  := nil;
    FreeLibrary(hThemeLib);
    hThemeLib := 0;
  end;
  {$ENDIF IFNDEF CLR}
  XPThemesAvailable := False;
  UxThemeInited := False;
end;
{$ELSE}
{------------------------------------------------------------------------------}
procedure InitializeUxTheme;
begin
  XPThemesAvailable := InitThemeLibrary;
end;

{------------------------------------------------------------------------------}
procedure FinalizeUxTheme;
begin
  FreeThemeLibrary;
  XPThemesAvailable := False;
end;
{$ENDIF LMDDISABLE_LMDTHEMEENGINE}

{$IFDEF CLR}
{$IFNDEF LMDDISABLE_LMDTHEMES}
// <----
function IsThemeActive(): Boolean;
begin
  if LMDThemeEngineEnabled and Assigned(_IsThemeActive) then
    result := _IsThemeActive
  else
    result := IsThemeActive_;
end;

function EnableTheming(fEnable : boolean) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_EnableTheming) then
    result := _EnableTheming(fEnable)
  else
    result := EnableTheming_(fEnable);
end;

function OpenThemeData(hwnd: HWND; pszClassList: string): HTHEME;
begin
  if LMDThemeEngineEnabled and Assigned(_OpenThemeData) then
    result := _OpenThemeData(hwnd, pszClassList)
  else
    result := OpenThemeData_(hwnd, pszClassList);
end;

function CloseThemeData(Theme: HTHEME): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_CloseThemeData) then
    result := _CloseThemeData(Theme)
  else
    result := CloseThemeData_(Theme);
end;

function DrawThemeParentBackground(hwnd: HWND; hDC: HDC; const Rect: TRect): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeParentBackground1) then
    result := _DrawThemeParentBackground1(hwnd, hDC, Rect)
  else
    result := DrawThemeParentBackground_(hwnd, hDC, Rect);
end;

function DrawThemeParentBackground(hwnd: HWND; hDC: HDC; Rect: IntPtr): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeParentBackground2) then
    result := _DrawThemeParentBackground2(hwnd, hDC, Rect)
  else
    result := DrawThemeParentBackground_(hwnd, hDC, Rect);
end;

function DrawThemeBackground(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
 const Rect:TRect; const ClipRect: TRect): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeBackground1) then
    result := _DrawThemeBackground1(Theme, hDC, iPartId, iStateId, Rect, ClipRect)
  else
    result := DrawThemeBackground_(Theme, hDC, iPartId, iStateId, Rect, ClipRect);
end;

function DrawThemeBackground(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer; const Rect:TRect; ClipRect: IntPtr): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeBackground2) then
    result := _DrawThemeBackground2(Theme, hDC, iPartId, iStateId, Rect, ClipRect)
  else
    result := DrawThemeBackground_(Theme, hDC, iPartId, iStateId, Rect, ClipRect);
end;

function DrawThemeText(Theme: HTHEME; hDC: HDC; iPartId, iStateId: Integer;
  pszText : string; iCharCount : integer; dwTextFlags : DWORD;
  dwTextFlags2 : DWORD; const Rect : TRect): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeText) then
    result := _DrawThemeText(Theme, hDC, iPartId, iStateId, pszText, iCharCount, dwTextFlags, dwTextFlags2, Rect)
  else
    result := DrawThemeText_(Theme, hDC, iPartId, iStateId, pszText, iCharCount, dwTextFlags, dwTextFlags2, Rect);
end;

function GetThemeBackgroundContentRect(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; const BoundingRect : TRect; var ContentRect : TRect) : HResult;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeBackgroundContentRect) then
    result := _GetThemeBackgroundContentRect(Theme, hdc, iPartId, iStateId, BoundingRect, ContentRect)
  else
    result := GetThemeBackgroundContentRect_(Theme, hdc, iPartId, iStateId, BoundingRect, ContentRect);
end;

function GetThemeTextExtent(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; pszText : string; iCharCount : integer;
  dwTextFlags : DWORD; BoundingRect : TRect;
  var ExtentRect : TRect): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeTextExtent) then
    result := _GetThemeTextExtent(Theme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, BoundingRect, ExtentRect)
  else
    result := GetThemeTextExtent_(Theme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, BoundingRect, ExtentRect);
end;

function GetThemeBackgroundExtent(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; const pBoundingRect: TRect; var pContentRect: TRect) : HResult;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeBackgroundExtent) then
    result := _GetThemeBackgroundExtent(Theme, hdc, iPartId, iStateId, pBoundingRect, pContentRect)
  else
    result := GetThemeBackgroundExtent_(Theme, hdc, iPartId, iStateId, pBoundingRect, pContentRect);
end;

function GetThemePartSize(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; rect : TRect; eSize: THEMESIZE; var psz : TSize) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemePartSize1) then
    result := _GetThemePartSize1(Theme, hdc, iPartId, iStateId, rect, eSize, psz)
  else
    result := GetThemePartSize_(Theme, hdc, iPartId, iStateId, rect, eSize, psz);
end;

function GetThemePartSize(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; rect : IntPtr; eSize: THEMESIZE; var psz : TSize) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemePartSize2) then
    result := _GetThemePartSize2(Theme, hdc, iPartId, iStateId, rect, eSize, psz)
  else
    result := GetThemePartSize_(Theme, hdc, iPartId, iStateId, rect, eSize, psz);
end;

function GetThemeTextMetrics(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : integer; var ptm : TTextMetricW) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeTextMetrics) then
    result := _GetThemeTextMetrics(Theme, hdc, iPartId, iStateId, ptm)
  else
    result := GetThemeTextMetrics_(Theme, hdc, iPartId, iStateId, ptm);
end;

function GetThemeBackgroundRegion(Theme : HTheme; DC: HDC;
  iPartId, iStateId : Integer; pRect : TRect;
  var pRegion : HRGN) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeBackgroundRegion) then
    result := _GetThemeBackgroundRegion(Theme,DC, iPartId, iStateId, pRect, pRegion)
  else
    result := GetThemeBackgroundRegion_(Theme,DC, iPartId, iStateId, pRect, pRegion);
end;

function HitTestThemeBackground(Theme : HTheme; hdc : HDC;
  iPartId, iStateId : Integer; dwOptions : DWORD; pRect : TRect; hrgn : HRGN;
  ptTest : TPoint; var pwHitTestCode : word) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_HitTestThemeBackground) then
    result := _HitTestThemeBackground(Theme, hDC, iPartId, iStateId, dwOptions, pRect , hrgn, ptTest, pwHitTestCode)
  else
    result := HitTestThemeBackground_(Theme, hDC, iPartId, iStateId, dwOptions, pRect , hrgn, ptTest, pwHitTestCode);
end;

function DrawThemeEdge(Theme : HTheme; hdc : HDC;
  iPartId, iStateId: Integer; const DestRect: TRect; uEdge, uFlags: UINT;
  var ContentRect: TRect): HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeEdge) then
    result := _DrawThemeEdge(Theme, hdc, iPartId, iStateId, DestRect, uEdge, uFlags, ContentRect)
  else
    result := DrawThemeEdge_(Theme, hdc, iPartId, iStateId, DestRect, uEdge, uFlags, ContentRect)
end;

function DrawThemeIcon(Theme : HTheme; hdc : HDC; iPartId, iStateId: Integer; pRect : TRect;
  himl : HIMAGELIST; iImageIndex : integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_DrawThemeIcon) then
    result := _DrawThemeIcon(Theme, hdc, iPartId, iStateId, pRect, himl, iImageIndex)
  else
    result := DrawThemeIcon_(Theme, hdc, iPartId, iStateId, pRect, himl, iImageIndex);
end;

function IsThemePartDefined(Theme : HTheme; iPartId, iStateId: Integer) : boolean;
begin
  if LMDThemeEngineEnabled and Assigned(_IsThemePartDefined) then
    result := _IsThemePartDefined(Theme,   iPartId, iStateId)
  else
    result := IsThemePartDefined_(Theme, iPartId, iStateId);
end;

function IsThemeBackgroundPartiallyTransparent(Theme : HTheme;
  iPartId, iStateId: Integer) : boolean;
begin
  if LMDThemeEngineEnabled and Assigned(_IsThemeBackgroundPartiallyTransparent) then
    result := _IsThemeBackgroundPartiallyTransparent(Theme, iPartId, iStateId)
  else
    result := IsThemeBackgroundPartiallyTransparent_(Theme, iPartId, iStateId);
end;

function GetThemeColor(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var Color : COLORREF) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeColor) then
    result := _GetThemeColor(Theme, iPartId, iStateId, iPropId, Color)
  else
    result := GetThemeColor_(Theme, iPartId, iStateId, iPropId, Color);
end;

function GetThemeMetric(Theme : HTheme; DC: HDC; iPartId, iStateId,
  iPropId : Integer; var piVal: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeMetric) then
    result := _GetThemeMetric(Theme, DC, iPartId, iStateId, iPropId, piVal)
  else
    result := GetThemeMetric_(Theme, DC, iPartId, iStateId, iPropId, piVal);
end;

function GetThemeString(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; pszBuff : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeString) then
    result := _GetThemeString(Theme, iPartId, iStateId, iPropId, pszBuff, cchMaxBuffChars)
  else
    result := GetThemeString_(Theme, iPartId, iStateId, iPropId, pszBuff, cchMaxBuffChars);
end;

function GetThemeBool(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pfVal : BOOL) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeBool) then
    result := _GetThemeBool(Theme, iPartId, iStateId, iPropId, pfVal)
  else
    result := GetThemeBool_(Theme, iPartId, iStateId, iPropId, pfVal)
end;

function GetThemeInt(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pfVal: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeInt) then
    result := _GetThemeInt(Theme, iPartId, iStateId, iPropId, pfVal)
  else
    result := GetThemeInt_(Theme, iPartId, iStateId, iPropId, pfVal);
end;

function GetThemeEnumValue(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pfVal : integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeEnumValue) then
    result := _GetThemeEnumValue(Theme, iPartId, iStateId, iPropId, pfVal)
  else
    result := GetThemeEnumValue_(Theme, iPartId, iStateId, iPropId, pfVal);
end;

function GetThemePosition(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pPoint: TPoint) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemePosition) then
    result := _GetThemePosition(Theme, iPartId, iStateId, iPropId, pPoint)
  else
    result := GetThemePosition_(Theme, iPartId, iStateId, iPropId, pPoint);
end;

function GetThemeFont(Theme : HTheme; DC: HDC; iPartId, iStateId,
  iPropId : Integer; var pFont: TLogFontW) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeFont) then
    result := _GetThemeFont(Theme, DC, iPartId, iStateId, iPropId, pFont)
  else
    result := GetThemeFont_(Theme, DC, iPartId, iStateId, iPropId, pFont);
end;

function GetThemeRect(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var Rect : TRect) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeRect) then
    result := _GetThemeRect(Theme, iPartId, iStateId, iPropId, Rect)
  else
    result := GetThemeRect_(Theme, iPartId, iStateId, iPropId, Rect);
end;

function GetThemeMargins(Theme : HTheme; DC: HDC; iPartId, iStateId,
  iPropId : Integer; var Margins: TMargins) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeMargins) then
    result := _GetThemeMargins(Theme, DC, iPartId, iStateId, iPropId, Margins)
  else
    result := GetThemeMargins_(Theme, DC, iPartId, iStateId, iPropId, Margins);
end;

function GetThemeIntList(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pIntList: TIntList) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeIntList) then
    result := _GetThemeIntList(Theme, iPartId, iStateId, iPropId, pIntList)
  else
    result := GetThemeIntList_(Theme, iPartId, iStateId, iPropId, pIntList);
end;

function GetThemePropertyOrigin(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; var pOrigin: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemePropertyOrigin) then
    result := _GetThemePropertyOrigin(Theme, iPartId, iStateId, iPropId, pOrigin)
  else
    result := GetThemePropertyOrigin(Theme, iPartId, iStateId, iPropId, pOrigin);
end;

function SetWindowTheme(hwnd : HWND; pszSubAppName, pszSubIdList : string) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_SetWindowTheme) then
    result := _SetWindowTheme(hwnd, pszSubAppName, pszSubIdList)
  else
    result := SetWindowTheme_(hwnd, pszSubAppName, pszSubIdList);
end;

function GetThemeFilename(Theme : HTheme; iPartId, iStateId,
  iPropId : Integer; pszThemeFileName : StringBuilder; cchMaxBuffChars : integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeFilename) then
    result := _GetThemeFilename(Theme, iPartId, iStateId, iPropId, pszThemeFileName, cchMaxBuffChars)
  else
    result := GetThemeFilename_(Theme, iPartId, iStateId, iPropId, pszThemeFileName, cchMaxBuffChars);
end;

function GetThemeSysColor(Theme : HTheme; iColorId: integer): COLORREF;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysColor) then
    result := _GetThemeSysColor(Theme, iColorId)
  else
    result := GetThemeSysColor_(Theme, iColorId);
end;

function GetThemeSysColorBrush(Theme : HTheme; iColorId: integer) : HBRUSH;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysColorBrush) then
    result := _GetThemeSysColorBrush(Theme, iColorId)
  else
    result := GetThemeSysColorBrush_(Theme, iColorId);
end;

function GetThemeSysSize(Theme : HTheme; iSizeId: integer) : integer;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysSize) then
    result := _GetThemeSysSize(Theme, iSizeId)
  else
    result := GetThemeSysSize_(Theme, iSizeId);
end;

function GetThemeSysBool(Theme : HTheme; iBoolId : integer) : BOOL;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysBool) then
    result := _GetThemeSysBool(Theme, iBoolId)
  else
    result := GetThemeSysBool_(Theme, iBoolId);
end;

function GetThemeSysFont(Theme : HTheme; iFontId : integer; var plf: TLogFontW) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysFont) then
    result := _GetThemeSysFont(Theme, iFontId, plf)
  else
    result := GetThemeSysFont_(Theme, iFontId, plf);
end;

function GetThemeSysString(Theme : HTheme; iStringId : integer;
  pszStringBuff : StringBuilder; cchMaxStringChars: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysString) then
    result := _GetThemeSysString(Theme, iStringId, pszStringBuff, cchMaxStringChars)
  else
    result := GetThemeSysString_(Theme, iStringId, pszStringBuff, cchMaxStringChars);
end;

function GetThemeSysInt(Theme: HTheme; iIntId: integer; var piValue: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeSysInt) then
    result := _GetThemeSysInt(Theme, iIntId, piValue)
  else
    result := GetThemeSysInt_(Theme, iIntId, piValue);
end;

function IsAppThemed : boolean;
begin
  if LMDThemeEngineEnabled and Assigned(_IsAppThemed) then
    result := _IsAppThemed
  else
    result := IsAppThemed_;
end;

function GetWindowTheme(hwnd : HWND) : HTheme;
begin
  if LMDThemeEngineEnabled and Assigned(_GetWindowTheme) then
    result := _GetWindowTheme(hwnd)
  else
    result := GetWindowTheme_(hwnd);
end;

function EnableThemeDialogTexture(hwnd : HWND; fEnable: DWORD) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_EnableThemeDialogTexture) then
    result := _EnableThemeDialogTexture(hwnd, fEnable)
  else
    result := EnableThemeDialogTexture_(hwnd, fEnable);
end;

function IsThemeDialogTextureEnabled: BOOL;
begin
  if LMDThemeEngineEnabled and Assigned(_IsThemeDialogTextureEnabled) then
    result := _IsThemeDialogTextureEnabled
  else
    result := IsThemeDialogTextureEnabled_;
end;

function GetThemeAppProperties : DWORD;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeAppProperties) then
    result := _GetThemeAppProperties
  else
    result := GetThemeAppProperties_;
end;

procedure SetThemeAppProperties(dwFlags : DWORD);
begin
  if LMDThemeEngineEnabled and Assigned(_SetThemeAppProperties) then
    _SetThemeAppProperties(dwFlags)
  else
    SetThemeAppProperties_(dwFlags);
end;

function GetCurrentThemeName(
  {OUT} pszThemeFileName : StringBuilder; cchMaxNameChars : integer;
  {OUT} {OPTIONAL} pszColorBuff : StringBuilder; cchMaxColorChars : integer;
  {OUT} {OPTIONAL} pszSizeBuff : StringBuilder; cchMaxSizeChars: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetCurrentThemeName) then
    result := _GetCurrentThemeName(pszThemeFileName, cchMaxNameChars, pszColorBuff, cchMaxColorChars, pszSizeBuff, cchMaxSizeChars)
  else
    result := GetCurrentThemeName_(pszThemeFileName, cchMaxNameChars, pszColorBuff, cchMaxColorChars, pszSizeBuff, cchMaxSizeChars);
end;

function GetThemeDocumentationProperty(pszThemeName : string;
  pszPropertyName : string; {OUT}  pszValueBuff : StringBuilder; cchMaxValChars: integer) : HRESULT;
begin
  if LMDThemeEngineEnabled and Assigned(_GetThemeDocumentationProperty) then
    result := _GetThemeDocumentationProperty(pszThemeName, pszPropertyName,pszValueBuff, cchMaxValChars)
  else
    result := GetThemeDocumentationProperty_(pszThemeName, pszPropertyName,pszValueBuff, cchMaxValChars);
end;

//---->
{$ENDIF LMDDISABLE_LMDTHEMES}
{$ENDIF CLR}

//{$ENDIF LMDDISABLE_LMDTHEMES}

{$IFNDEF LMDDISABLE_LMDTHEMES}
initialization

  LMDThemeEngineEnabled := false;
  InitializeUxTheme;

finalization

  try
    FinalizeUxTheme;
  except
    on e:Exception do
    begin
      LMDDebug('ERROR finalization LMDUxTheme: ' + e.Message);
    end;
  end;
{$ELSE}
initialization
  XPThemesAvailable := InitThemeLibrary;

{$ENDIF IFNDEF LMDDISABLE_LMDTHEMES}

end.



