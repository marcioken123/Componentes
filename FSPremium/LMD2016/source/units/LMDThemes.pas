unit LMDThemes;
{$I lmdcmps.inc}

{###############################################################################

LMD VCL Series 2016
© by LMD Innovative
-------------------

For support or information contact us at:

email              : mail@lmdsupport.com
WWW                : http://www.lmdinnovative.com
SupportSite        : http://www.lmdsupport.com
Wiki               : http://wiki.lmd.de
Fax                : ++49 6131 4984372

This code is for reference purposes only and may not be copied
or distributed in any format electronic or otherwise except one
copy for backup purposes.

No Component Kit or Component individually or in a collection,
subclassed or otherwise from the code in this unit, or associated
.pas, .dfm, .dcu, .ocx, .dll or ActiveX files may be sold or
distributed without express permission from LMD Innovative.

For further license information please refer to the associated
license html file in \info folder.

################################################################################

LMDThemes unit (RM)
-------------------
Wrapper class for centralized theme handling
(system theme engine + native theme engine)

Changes
-------
Release 9.0 (July 2008)
 - Initial Release

###############################################################################}

interface

uses
  Classes, Windows, Messages, Themes, Controls, Forms, uxTheme, ImgList, TypInfo,
  LMDTypes, LMDClass, LMDGraph, LMDCustomComponent;

  {$IFNDEF LMDCOMP7}
  {$EXTERNALSYM TMARGINS}
type
  TMargins = MARGINS;
  {$ENDIF}

const
  LMDNullRectPtr = nil;

  // <-- used in elpack --
 (* {$EXTERNALSYM MENU_POPUPITEM}
  MENU_POPUPITEM = 14;
  {$EXTERNALSYM MPI_NORMAL}
  MPI_NORMAL = 1;
  {$EXTERNALSYM MPI_HOT}
  MPI_HOT = 2;
  {$EXTERNALSYM MPI_DISABLED}
  MPI_DISABLED = 3;
  {$EXTERNALSYM MPI_DISABLEDHOT}
  MPI_DISABLEDHOT = 4;*)

  {$EXTERNALSYM BSS_FLAT}
  BSS_FLAT = 1;
  {$EXTERNALSYM BSS_RAISED}
  BSS_RAISED = 2;
  {$EXTERNALSYM BSS_SUNKEN}
  BSS_SUNKEN = 3;
  {$EXTERNALSYM GP_BORDER}
  GP_BORDER = 1; // GP_BORDER = 32;

  CBS_SCROLLSIZEGRIP      = 1; // undocumented
  CBS_SCROLLSIZEGRIPRIGHT = 2; // undocumented
// -- used in elpack -->

{$IFNDEF LMDCOMP11}
// -- uxtheme part for windows >= vista -->
const
  ETDT_USEAEROWIZARDTABTEXTURE    = $00000008;
  {$EXTERNALSYM ETDT_USEAEROWIZARDTABTEXTURE}

  ETDT_DISABLE       = $00000001;
  {$EXTERNALSYM ETDT_DISABLE}
  ETDT_ENABLE        = $00000002;
  {$EXTERNALSYM ETDT_ENABLE}
  ETDT_USETABTEXTURE = $00000004;
  {$EXTERNALSYM ETDT_USETABTEXTURE}

  ETDT_ENABLEAEROWIZARDTAB = (ETDT_ENABLE or ETDT_USEAEROWIZARDTABTEXTURE);
  {$EXTERNALSYM ETDT_ENABLEAEROWIZARDTAB}
  ETDT_VALIDBITS           = ETDT_DISABLE or
                             ETDT_ENABLE or
                             ETDT_USETABTEXTURE or
                             ETDT_USEAEROWIZARDTABTEXTURE;
  {$EXTERNALSYM ETDT_VALIDBITS}

  STAP_ALLOW_NONCLIENT   = (1 shl 0);
  {$EXTERNALSYM STAP_ALLOW_NONCLIENT}
  STAP_ALLOW_CONTROLS    = (1 shl 1);
  {$EXTERNALSYM STAP_ALLOW_CONTROLS}
  STAP_ALLOW_WEBCONTENT  = (1 shl 2);
  {$EXTERNALSYM STAP_ALLOW_WEBCONTENT}
  STAP_VALIDBITS         = STAP_ALLOW_NONCLIENT or
                           STAP_ALLOW_CONTROLS or
                           STAP_ALLOW_WEBCONTENT;
  {$EXTERNALSYM STAP_VALIDBITS}

  {$EXTERNALSYM TMTVS_RESERVEDLOW}
  TMTVS_RESERVEDLOW       = 100000;
  {$EXTERNALSYM TMTVS_RESERVEDHIGH}
  TMTVS_RESERVEDHIGH      = 19999;

  WP_FRAME     = 38;
  {$EXTERNALSYM WP_FRAME}

  BP_COMMANDLINK = 6;
  {$EXTERNALSYM BP_COMMANDLINK}
  BP_COMMANDLINKGLYPH = 7;
  {$EXTERNALSYM BP_COMMANDLINKGLYPH}

  PBS_DEFAULTED_ANIMATING     = 6;
  {$EXTERNALSYM PBS_DEFAULTED_ANIMATING}

  CBS_IMPLICITNORMAL     = 13;
  {$EXTERNALSYM CBS_IMPLICITNORMAL}
  CBS_IMPLICITHOT     = 14;
  {$EXTERNALSYM CBS_IMPLICITHOT}
  CBS_IMPLICITPRESSED     = 15;
  {$EXTERNALSYM CBS_IMPLICITPRESSED}
  CBS_IMPLICITDISABLED     = 16;
  {$EXTERNALSYM CBS_IMPLICITDISABLED}
  CBS_EXCLUDEDNORMAL     = 17;
  {$EXTERNALSYM CBS_EXCLUDEDNORMAL}
  CBS_EXCLUDEDHOT     = 18;
  {$EXTERNALSYM CBS_EXCLUDEDHOT}
  CBS_EXCLUDEDPRESSED     = 19;
  {$EXTERNALSYM CBS_EXCLUDEDPRESSED}
  CBS_EXCLUDEDDISABLED     = 20;
  {$EXTERNALSYM CBS_EXCLUDEDDISABLED}

type
  {$EXTERNALSYM COMMANDLINKSTATES}
  COMMANDLINKSTATES = Integer;
const
  {$EXTERNALSYM CMDLS_NORMAL}
  CMDLS_NORMAL     = 1;
  {$EXTERNALSYM CMDLS_HOT}
  CMDLS_HOT     = 2;
  {$EXTERNALSYM CMDLS_PRESSED}
  CMDLS_PRESSED     = 3;
  {$EXTERNALSYM CMDLS_DISABLED}
  CMDLS_DISABLED     = 4;
  {$EXTERNALSYM CMDLS_DEFAULTED}
  CMDLS_DEFAULTED     = 5;
  {$EXTERNALSYM CMDLS_DEFAULTED_ANIMATING}
  CMDLS_DEFAULTED_ANIMATING     = 6;

type
  {$EXTERNALSYM COMMANDLINKGLYPHSTATES}
  COMMANDLINKGLYPHSTATES = Integer;
const
  {$EXTERNALSYM CMDLGS_NORMAL}
  CMDLGS_NORMAL     = 1;
  {$EXTERNALSYM CMDLGS_HOT}
  CMDLGS_HOT     = 2;
  {$EXTERNALSYM CMDLGS_PRESSED}
  CMDLGS_PRESSED     = 3;
  {$EXTERNALSYM CMDLGS_DISABLED}
  CMDLGS_DISABLED     = 4;
  {$EXTERNALSYM CMDLGS_DEFAULTED}
  CMDLGS_DEFAULTED     = 5;

  RP_BACKGROUND     = 6;
  {$EXTERNALSYM RP_BACKGROUND}
  RP_SPLITTER     = 7;
  {$EXTERNALSYM RP_SPLITTER}
  RP_SPLITTERVERT     = 8;
  {$EXTERNALSYM RP_SPLITTERVERT}

type
  {$EXTERNALSYM CHEVRONVERTSTATES}
  CHEVRONVERTSTATES = Integer;
const
  {$EXTERNALSYM CHEVSV_NORMAL}
  CHEVSV_NORMAL     = 1;
  {$EXTERNALSYM CHEVSV_HOT}
  CHEVSV_HOT     = 2;
  {$EXTERNALSYM CHEVSV_PRESSED}
  CHEVSV_PRESSED     = 3;

type
  {$EXTERNALSYM SPLITTERSTATES}
  SPLITTERSTATES = Integer;
const
  {$EXTERNALSYM SPLITS_NORMAL}
  SPLITS_NORMAL     = 1;
  {$EXTERNALSYM SPLITS_HOT}
  SPLITS_HOT     = 2;
  {$EXTERNALSYM SPLITS_PRESSED}
  SPLITS_PRESSED     = 3;

type
  {$EXTERNALSYM SPLITTERVERTSTATES}
  SPLITTERVERTSTATES = Integer;
const
  {$EXTERNALSYM SPLITSV_NORMAL}
  SPLITSV_NORMAL     = 1;
  {$EXTERNALSYM SPLITSV_HOT}
  SPLITSV_HOT     = 2;
  {$EXTERNALSYM SPLITSV_PRESSED}
  SPLITSV_PRESSED     = 3;

  TS_NEARHOT     = 7;
  {$EXTERNALSYM TS_NEARHOT}
  TS_OTHERSIDEHOT     = 8;
  {$EXTERNALSYM TS_OTHERSIDEHOT}

  {$EXTERNALSYM MENU_MENUITEM_TMSCHEMA}
  MENU_MENUITEM_TMSCHEMA     = 1; 
  {$EXTERNALSYM MENU_MENUDROPDOWN_TMSCHEMA}
  MENU_MENUDROPDOWN_TMSCHEMA     = 2; 
  {$EXTERNALSYM MENU_MENUBARITEM_TMSCHEMA}
  MENU_MENUBARITEM_TMSCHEMA     = 3; 
  {$EXTERNALSYM MENU_MENUBARDROPDOWN_TMSCHEMA}
  MENU_MENUBARDROPDOWN_TMSCHEMA     = 4; 
  {$EXTERNALSYM MENU_CHEVRON_TMSCHEMA}
  MENU_CHEVRON_TMSCHEMA     = 5; 
  {$EXTERNALSYM MENU_SEPARATOR_TMSCHEMA}
  MENU_SEPARATOR_TMSCHEMA     = 6;
  {$EXTERNALSYM MENU_BARBACKGROUND}
  MENU_BARBACKGROUND     = 7; 
  {$EXTERNALSYM MENU_BARITEM}
  MENU_BARITEM     = 8; 
  {$EXTERNALSYM MENU_POPUPBACKGROUND}
  MENU_POPUPBACKGROUND     = 9; 
  {$EXTERNALSYM MENU_POPUPBORDERS}
  MENU_POPUPBORDERS     = 10; 
  {$EXTERNALSYM MENU_POPUPCHECK}
  MENU_POPUPCHECK     = 11; 
  {$EXTERNALSYM MENU_POPUPCHECKBACKGROUND}
  MENU_POPUPCHECKBACKGROUND     = 12; 
  {$EXTERNALSYM MENU_POPUPGUTTER}
  MENU_POPUPGUTTER     = 13; 
  {$EXTERNALSYM MENU_POPUPITEM}
  MENU_POPUPITEM     = 14;
  {$EXTERNALSYM MENU_POPUPSEPARATOR}
  MENU_POPUPSEPARATOR     = 15; 
  {$EXTERNALSYM MENU_POPUPSUBMENU}
  MENU_POPUPSUBMENU     = 16; 
  {$EXTERNALSYM MENU_SYSTEMCLOSE}
  MENU_SYSTEMCLOSE     = 17; 
  {$EXTERNALSYM MENU_SYSTEMMAXIMIZE}
  MENU_SYSTEMMAXIMIZE     = 18; 
  {$EXTERNALSYM MENU_SYSTEMMINIMIZE}
  MENU_SYSTEMMINIMIZE     = 19; 
  {$EXTERNALSYM MENU_SYSTEMRESTORE}
  MENU_SYSTEMRESTORE     = 20;

type
  {$EXTERNALSYM BARBACKGROUNDSTATES}
  BARBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MB_ACTIVE}
  MB_ACTIVE     = 1;
  {$EXTERNALSYM MB_INACTIVE}
  MB_INACTIVE     = 2;

type
  {$EXTERNALSYM BARITEMSTATES}
  BARITEMSTATES = Integer;
const
  {$EXTERNALSYM MBI_NORMAL}
  MBI_NORMAL     = 1;
  {$EXTERNALSYM MBI_HOT}
  MBI_HOT     = 2;
  {$EXTERNALSYM MBI_PUSHED}
  MBI_PUSHED     = 3;
  {$EXTERNALSYM MBI_DISABLED}
  MBI_DISABLED     = 4;
  {$EXTERNALSYM MBI_DISABLEDHOT}
  MBI_DISABLEDHOT     = 5;
  {$EXTERNALSYM MBI_DISABLEDPUSHED}
  MBI_DISABLEDPUSHED     = 6;

type
  {$EXTERNALSYM POPUPCHECKSTATES}
  POPUPCHECKSTATES = Integer;
const
  {$EXTERNALSYM MC_CHECKMARKNORMAL}
  MC_CHECKMARKNORMAL     = 1;
  {$EXTERNALSYM MC_CHECKMARKDISABLED}
  MC_CHECKMARKDISABLED     = 2;
  {$EXTERNALSYM MC_BULLETNORMAL}
  MC_BULLETNORMAL     = 3;
  {$EXTERNALSYM MC_BULLETDISABLED}
  MC_BULLETDISABLED     = 4;

type
  {$EXTERNALSYM POPUPCHECKBACKGROUNDSTATES}
  POPUPCHECKBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MCB_DISABLED}
  MCB_DISABLED     = 1;
  {$EXTERNALSYM MCB_NORMAL}
  MCB_NORMAL     = 2;
  {$EXTERNALSYM MCB_BITMAP}
  MCB_BITMAP     = 3;

type
  {$EXTERNALSYM POPUPITEMSTATES}
  POPUPITEMSTATES = Integer;
const
  {$EXTERNALSYM MPI_NORMAL}
  MPI_NORMAL     = 1;
  {$EXTERNALSYM MPI_HOT}
  MPI_HOT     = 2;
  {$EXTERNALSYM MPI_DISABLED}
  MPI_DISABLED     = 3;
  {$EXTERNALSYM MPI_DISABLEDHOT}
  MPI_DISABLEDHOT     = 4;

type
  {$EXTERNALSYM POPUPSUBMENUSTATES}
  POPUPSUBMENUSTATES = Integer;
const
  {$EXTERNALSYM MSM_NORMAL}
  MSM_NORMAL     = 1;
  {$EXTERNALSYM MSM_DISABLED}
  MSM_DISABLED     = 2;

type
  {$EXTERNALSYM SYSTEMCLOSESTATES}
  SYSTEMCLOSESTATES = Integer;
const
  {$EXTERNALSYM MSYSC_NORMAL}
  MSYSC_NORMAL     = 1;
  {$EXTERNALSYM MSYSC_DISABLED}
  MSYSC_DISABLED     = 2;

type
  {$EXTERNALSYM SYSTEMMAXIMIZESTATES}
  SYSTEMMAXIMIZESTATES = Integer;
const
  {$EXTERNALSYM MSYSMX_NORMAL}
  MSYSMX_NORMAL     = 1;
  {$EXTERNALSYM MSYSMX_DISABLED}
  MSYSMX_DISABLED     = 2;

type
  {$EXTERNALSYM SYSTEMMINIMIZESTATES}
  SYSTEMMINIMIZESTATES = Integer;
const
  {$EXTERNALSYM MSYSMN_NORMAL}
  MSYSMN_NORMAL     = 1;
  {$EXTERNALSYM MSYSMN_DISABLED}
  MSYSMN_DISABLED     = 2;

type
  {$EXTERNALSYM SYSTEMRESTORESTATES}
  SYSTEMRESTORESTATES = Integer;
const
  {$EXTERNALSYM MSYSR_NORMAL}
  MSYSR_NORMAL     = 1;
  {$EXTERNALSYM MSYSR_DISABLED}
  MSYSR_DISABLED     = 2;

  LVP_GROUPHEADER     = 6;
  {$EXTERNALSYM LVP_GROUPHEADER}
  LVP_GROUPHEADERLINE     = 7;
  {$EXTERNALSYM LVP_GROUPHEADERLINE}
  LVP_EXPANDBUTTON     = 8;
  {$EXTERNALSYM LVP_EXPANDBUTTON}
  LVP_COLLAPSEBUTTON     = 9;
  {$EXTERNALSYM LVP_COLLAPSEBUTTON}
  LVP_COLUMNDETAIL     = 10;
  {$EXTERNALSYM LVP_COLUMNDETAIL}

  LISS_HOTSELECTED     = 6;
  {$EXTERNALSYM LISS_HOTSELECTED}

type
  {$EXTERNALSYM GROUPHEADERSTATES}
  GROUPHEADERSTATES = Integer;
const
  {$EXTERNALSYM LVGH_OPEN}
  LVGH_OPEN     = 1;
  {$EXTERNALSYM LVGH_OPENHOT}
  LVGH_OPENHOT     = 2;
  {$EXTERNALSYM LVGH_OPENSELECTED}
  LVGH_OPENSELECTED     = 3;
  {$EXTERNALSYM LVGH_OPENSELECTEDHOT}
  LVGH_OPENSELECTEDHOT     = 4;
  {$EXTERNALSYM LVGH_OPENSELECTEDNOTFOCUSED}
  LVGH_OPENSELECTEDNOTFOCUSED     = 5;
  {$EXTERNALSYM LVGH_OPENSELECTEDNOTFOCUSEDHOT}
  LVGH_OPENSELECTEDNOTFOCUSEDHOT     = 6;
  {$EXTERNALSYM LVGH_OPENMIXEDSELECTION}
  LVGH_OPENMIXEDSELECTION     = 7;
  {$EXTERNALSYM LVGH_OPENMIXEDSELECTIONHOT}
  LVGH_OPENMIXEDSELECTIONHOT     = 8;
  {$EXTERNALSYM LVGH_CLOSE}
  LVGH_CLOSE     = 9;
  {$EXTERNALSYM LVGH_CLOSEHOT}
  LVGH_CLOSEHOT     = 10;
  {$EXTERNALSYM LVGH_CLOSESELECTED}
  LVGH_CLOSESELECTED     = 11;
  {$EXTERNALSYM LVGH_CLOSESELECTEDHOT}
  LVGH_CLOSESELECTEDHOT     = 12;
  {$EXTERNALSYM LVGH_CLOSESELECTEDNOTFOCUSED}
  LVGH_CLOSESELECTEDNOTFOCUSED     = 13;
  {$EXTERNALSYM LVGH_CLOSESELECTEDNOTFOCUSEDHOT}
  LVGH_CLOSESELECTEDNOTFOCUSEDHOT     = 14;
  {$EXTERNALSYM LVGH_CLOSEMIXEDSELECTION}
  LVGH_CLOSEMIXEDSELECTION     = 15;
  {$EXTERNALSYM LVGH_CLOSEMIXEDSELECTIONHOT}
  LVGH_CLOSEMIXEDSELECTIONHOT     = 16;

type
  {$EXTERNALSYM GROUPHEADERLINESTATES}
  GROUPHEADERLINESTATES = Integer;
const
  {$EXTERNALSYM LVGHL_OPEN}
  LVGHL_OPEN     = 1;
  {$EXTERNALSYM LVGHL_OPENHOT}
  LVGHL_OPENHOT     = 2;
  {$EXTERNALSYM LVGHL_OPENSELECTED}
  LVGHL_OPENSELECTED     = 3;
  {$EXTERNALSYM LVGHL_OPENSELECTEDHOT}
  LVGHL_OPENSELECTEDHOT     = 4;
  {$EXTERNALSYM LVGHL_OPENSELECTEDNOTFOCUSED}
  LVGHL_OPENSELECTEDNOTFOCUSED     = 5;
  {$EXTERNALSYM LVGHL_OPENSELECTEDNOTFOCUSEDHOT}
  LVGHL_OPENSELECTEDNOTFOCUSEDHOT     = 6;
  {$EXTERNALSYM LVGHL_OPENMIXEDSELECTION}
  LVGHL_OPENMIXEDSELECTION     = 7;
  {$EXTERNALSYM LVGHL_OPENMIXEDSELECTIONHOT}
  LVGHL_OPENMIXEDSELECTIONHOT     = 8;
  {$EXTERNALSYM LVGHL_CLOSE}
  LVGHL_CLOSE     = 9;
  {$EXTERNALSYM LVGHL_CLOSEHOT}
  LVGHL_CLOSEHOT     = 10;
  {$EXTERNALSYM LVGHL_CLOSESELECTED}
  LVGHL_CLOSESELECTED     = 11;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDHOT}
  LVGHL_CLOSESELECTEDHOT     = 12;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDNOTFOCUSED}
  LVGHL_CLOSESELECTEDNOTFOCUSED     = 13;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDNOTFOCUSEDHOT}
  LVGHL_CLOSESELECTEDNOTFOCUSEDHOT     = 14;
  {$EXTERNALSYM LVGHL_CLOSEMIXEDSELECTION}
  LVGHL_CLOSEMIXEDSELECTION     = 15;
  {$EXTERNALSYM LVGHL_CLOSEMIXEDSELECTIONHOT}
  LVGHL_CLOSEMIXEDSELECTIONHOT     = 16;

type
  {$EXTERNALSYM EXPANDBUTTONSTATES}
  EXPANDBUTTONSTATES = Integer;
const
  {$EXTERNALSYM LVEB_NORMAL}
  LVEB_NORMAL     = 1;
  {$EXTERNALSYM LVEB_HOVER}
  LVEB_HOVER     = 2;
  {$EXTERNALSYM LVEB_PUSHED}
  LVEB_PUSHED     = 3;

type
  {$EXTERNALSYM COLLAPSEBUTTONSTATES}
  COLLAPSEBUTTONSTATES = Integer;
const
  {$EXTERNALSYM LVCB_NORMAL}
  LVCB_NORMAL     = 1;
  {$EXTERNALSYM LVCB_HOVER}
  LVCB_HOVER     = 2;
  {$EXTERNALSYM LVCB_PUSHED}
  LVCB_PUSHED     = 3;

  HP_HEADERDROPDOWN     = 5;
  {$EXTERNALSYM HP_HEADERDROPDOWN}
  HP_HEADERDROPDOWNFILTER     = 6;
  {$EXTERNALSYM HP_HEADERDROPDOWNFILTER}
  HP_HEADEROVERFLOW     = 7;
  {$EXTERNALSYM HP_HEADEROVERFLOW}

type
  {$EXTERNALSYM HEADERSTYLESTATES}
  HEADERSTYLESTATES = Integer;
const
  {$EXTERNALSYM HBG_DETAILS}
  HBG_DETAILS     = 1;
  {$EXTERNALSYM HBG_ICON}
  HBG_ICON     = 2;

  HIS_SORTEDNORMAL     = 4;
  {$EXTERNALSYM HIS_SORTEDNORMAL}
  HIS_SORTEDHOT     = 5;
  {$EXTERNALSYM HIS_SORTEDHOT}
  HIS_SORTEDPRESSED     = 6;
  {$EXTERNALSYM HIS_SORTEDPRESSED}
  HIS_ICONNORMAL     = 7;
  {$EXTERNALSYM HIS_ICONNORMAL}
  HIS_ICONHOT     = 8;
  {$EXTERNALSYM HIS_ICONHOT}
  HIS_ICONPRESSED     = 9;
  {$EXTERNALSYM HIS_ICONPRESSED}
  HIS_ICONSORTEDNORMAL     = 10;
  {$EXTERNALSYM HIS_ICONSORTEDNORMAL}
  HIS_ICONSORTEDHOT     = 11;
  {$EXTERNALSYM HIS_ICONSORTEDHOT}
  HIS_ICONSORTEDPRESSED     = 12;
  {$EXTERNALSYM HIS_ICONSORTEDPRESSED}

type
  {$EXTERNALSYM HEADERDROPDOWNSTATES}
  HEADERDROPDOWNSTATES = Integer;
const
  {$EXTERNALSYM HDDS_NORMAL}
  HDDS_NORMAL     = 1;
  {$EXTERNALSYM HDDS_SOFTHOT}
  HDDS_SOFTHOT     = 2;
  {$EXTERNALSYM HDDS_HOT}
  HDDS_HOT     = 3;

type
  {$EXTERNALSYM HEADERDROPDOWNFILTERSTATES}
  HEADERDROPDOWNFILTERSTATES = Integer;
const
  {$EXTERNALSYM HDDFS_NORMAL}
  HDDFS_NORMAL     = 1;
  {$EXTERNALSYM HDDFS_SOFTHOT}
  HDDFS_SOFTHOT     = 2;
  {$EXTERNALSYM HDDFS_HOT}
  HDDFS_HOT     = 3;

type
  {$EXTERNALSYM HEADEROVERFLOWSTATES}
  HEADEROVERFLOWSTATES = Integer;
const
  {$EXTERNALSYM HOFS_NORMAL}
  HOFS_NORMAL     = 1;
  {$EXTERNALSYM HOFS_HOT}
  HOFS_HOT     = 2;

  {$EXTERNALSYM PP_FILL}
  PP_FILL     = 5;
  {$EXTERNALSYM PP_FILLVERT}
  PP_FILLVERT     = 6;
  {$EXTERNALSYM PP_PULSEOVERLAY}
  PP_PULSEOVERLAY     = 7;
  {$EXTERNALSYM PP_MOVEOVERLAY}
  PP_MOVEOVERLAY     = 8;
  {$EXTERNALSYM PP_PULSEOVERLAYVERT}
  PP_PULSEOVERLAYVERT     = 9;
  {$EXTERNALSYM PP_MOVEOVERLAYVERT}
  PP_MOVEOVERLAYVERT     = 10;
  {$EXTERNALSYM PP_TRANSPARENTBAR}
  PP_TRANSPARENTBAR     = 11;
  {$EXTERNALSYM PP_TRANSPARENTBARVERT}
  PP_TRANSPARENTBARVERT     = 12;

type
  {$EXTERNALSYM TRANSPARENTBARSTATES}
  TRANSPARENTBARSTATES = Integer;
const
  {$EXTERNALSYM PBBS_NORMAL}
  PBBS_NORMAL     = 1;
  {$EXTERNALSYM PBBS_PARTIAL}
  PBBS_PARTIAL     = 2;

type
  {$EXTERNALSYM TRANSPARENTBARVERTSTATES}
  TRANSPARENTBARVERTSTATES = Integer;
const
  {$EXTERNALSYM PBBVS_NORMAL}
  PBBVS_NORMAL     = 1;
  {$EXTERNALSYM PBBVS_PARTIAL}
  PBBVS_PARTIAL     = 2;

type
  {$EXTERNALSYM FILLSTATES}
  FILLSTATES = Integer;
const
  {$EXTERNALSYM PBFS_NORMAL}
  PBFS_NORMAL     = 1;
  {$EXTERNALSYM PBFS_ERROR}
  PBFS_ERROR     = 2;
  {$EXTERNALSYM PBFS_PAUSED}
  PBFS_PAUSED     = 3;
  {$EXTERNALSYM PBFS_PARTIAL}
  PBFS_PARTIAL     = 4;

type
  {$EXTERNALSYM FILLVERTSTATES}
  FILLVERTSTATES = Integer;
const
  {$EXTERNALSYM PBFVS_NORMAL}
  PBFVS_NORMAL     = 1;
  {$EXTERNALSYM PBFVS_ERROR}
  PBFVS_ERROR     = 2;
  {$EXTERNALSYM PBFVS_PAUSED}
  PBFVS_PAUSED     = 3;
  {$EXTERNALSYM PBFVS_PARTIAL}
  PBFVS_PARTIAL     = 4;

  TABP_AEROWIZARDBODY     = 11;
  {$EXTERNALSYM TABP_AEROWIZARDBODY}

  TTP_BALLOONSTEM     = 6;
  {$EXTERNALSYM TTP_BALLOONSTEM}

type
  {$EXTERNALSYM BALLOONSTEMSTATES}
  BALLOONSTEMSTATES = Integer;
const
  {$EXTERNALSYM TTBSS_POINTINGUPLEFTWALL}
  TTBSS_POINTINGUPLEFTWALL     = 1;
  {$EXTERNALSYM TTBSS_POINTINGUPCENTERED}
  TTBSS_POINTINGUPCENTERED     = 2;
  {$EXTERNALSYM TTBSS_POINTINGUPRIGHTWALL}
  TTBSS_POINTINGUPRIGHTWALL     = 3;
  {$EXTERNALSYM TTBSS_POINTINGDOWNRIGHTWALL}
  TTBSS_POINTINGDOWNRIGHTWALL     = 4;
  {$EXTERNALSYM TTBSS_POINTINGDOWNCENTERED}
  TTBSS_POINTINGDOWNCENTERED     = 5;
  {$EXTERNALSYM TTBSS_POINTINGDOWNLEFTWALL}
  TTBSS_POINTINGDOWNLEFTWALL     = 6;

  TVP_HOTGLYPH     = 4;
  {$EXTERNALSYM TVP_HOTGLYPH}

  TREIS_HOTSELECTED     = 6;
  {$EXTERNALSYM TREIS_HOTSELECTED}

type
  {$EXTERNALSYM HOTGLYPHSTATES}
  HOTGLYPHSTATES = Integer;
const
  {$EXTERNALSYM HGLPS_CLOSED}
  HGLPS_CLOSED     = 1;
  {$EXTERNALSYM HGLPS_OPENED}
  HGLPS_OPENED     = 2;

  ABS_UPHOVER     = 17;
  {$EXTERNALSYM ABS_UPHOVER}
  ABS_DOWNHOVER     = 18;
  {$EXTERNALSYM ABS_DOWNHOVER}
  ABS_LEFTHOVER     = 19;
  {$EXTERNALSYM ABS_LEFTHOVER}
  ABS_RIGHTHOVER     = 20;
  {$EXTERNALSYM ABS_RIGHTHOVER}

  SCRBS_HOVER     = 5;
  {$EXTERNALSYM SCRBS_HOVER}

  SZB_TOPRIGHTALIGN     = 3;
  {$EXTERNALSYM SZB_TOPRIGHTALIGN}
  SZB_TOPLEFTALIGN     = 4;
  {$EXTERNALSYM SZB_TOPLEFTALIGN}
  SZB_HALFBOTTOMRIGHTALIGN     = 5;
  {$EXTERNALSYM SZB_HALFBOTTOMRIGHTALIGN}
  SZB_HALFBOTTOMLEFTALIGN     = 6;
  {$EXTERNALSYM SZB_HALFBOTTOMLEFTALIGN}
  SZB_HALFTOPRIGHTALIGN     = 7;
  {$EXTERNALSYM SZB_HALFTOPRIGHTALIGN}
  SZB_HALFTOPLEFTALIGN     = 8;
  {$EXTERNALSYM SZB_HALFTOPLEFTALIGN}

  EP_BACKGROUND     = 3;
  {$EXTERNALSYM EP_BACKGROUND}
  EP_PASSWORD     = 4;
  {$EXTERNALSYM EP_PASSWORD}
  EP_BACKGROUNDWITHBORDER     = 5;
  {$EXTERNALSYM EP_BACKGROUNDWITHBORDER}
  EP_EDITBORDER_NOSCROLL     = 6;
  {$EXTERNALSYM EP_EDITBORDER_NOSCROLL}
  EP_EDITBORDER_HSCROLL     = 7;
  {$EXTERNALSYM EP_EDITBORDER_HSCROLL}
  EP_EDITBORDER_VSCROLL     = 8;
  {$EXTERNALSYM EP_EDITBORDER_VSCROLL}
  EP_EDITBORDER_HVSCROLL     = 9;
  {$EXTERNALSYM EP_EDITBORDER_HVSCROLL}

  ETS_CUEBANNER     = 8;
  {$EXTERNALSYM ETS_CUEBANNER}

type
  {$EXTERNALSYM BACKGROUNDSTATES}
  BACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM EBS_NORMAL}
  EBS_NORMAL     = 1;
  {$EXTERNALSYM EBS_HOT}
  EBS_HOT     = 2;
  {$EXTERNALSYM EBS_DISABLED}
  EBS_DISABLED     = 3;
  {$EXTERNALSYM EBS_FOCUSED}
  EBS_FOCUSED     = 4;
  {$EXTERNALSYM EBS_READONLY}
  EBS_READONLY     = 5;
  {$EXTERNALSYM EBS_ASSIST}
  EBS_ASSIST     = 6;

type
  {$EXTERNALSYM BACKGROUNDWITHBORDERSTATES}
  BACKGROUNDWITHBORDERSTATES = Integer;
const
  {$EXTERNALSYM EBWBS_NORMAL}
  EBWBS_NORMAL     = 1;
  {$EXTERNALSYM EBWBS_HOT}
  EBWBS_HOT     = 2;
  {$EXTERNALSYM EBWBS_DISABLED}
  EBWBS_DISABLED     = 3;
  {$EXTERNALSYM EBWBS_FOCUSED}
  EBWBS_FOCUSED     = 4;

type
  {$EXTERNALSYM EDITBORDER_NOSCROLLSTATES}
  EDITBORDER_NOSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSN_NORMAL}
  EPSN_NORMAL     = 1;
  {$EXTERNALSYM EPSN_HOT}
  EPSN_HOT     = 2;
  {$EXTERNALSYM EPSN_FOCUSED}
  EPSN_FOCUSED     = 3;
  {$EXTERNALSYM EPSN_DISABLED}
  EPSN_DISABLED     = 4;

type
  {$EXTERNALSYM EDITBORDER_HSCROLLSTATES}
  EDITBORDER_HSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSH_NORMAL}
  EPSH_NORMAL     = 1;
  {$EXTERNALSYM EPSH_HOT}
  EPSH_HOT     = 2;
  {$EXTERNALSYM EPSH_FOCUSED}
  EPSH_FOCUSED     = 3;
  {$EXTERNALSYM EPSH_DISABLED}
  EPSH_DISABLED     = 4;

type
  {$EXTERNALSYM EDITBORDER_VSCROLLSTATES}
  EDITBORDER_VSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSV_NORMAL}
  EPSV_NORMAL     = 1;
  {$EXTERNALSYM EPSV_HOT}
  EPSV_HOT     = 2;
  {$EXTERNALSYM EPSV_FOCUSED}
  EPSV_FOCUSED     = 3;
  {$EXTERNALSYM EPSV_DISABLED}
  EPSV_DISABLED     = 4;

type
  {$EXTERNALSYM EDITBORDER_HVSCROLLSTATES}
  EDITBORDER_HVSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSHV_NORMAL}
  EPSHV_NORMAL     = 1;
  {$EXTERNALSYM EPSHV_HOT}
  EPSHV_HOT     = 2;
  {$EXTERNALSYM EPSHV_FOCUSED}
  EPSHV_FOCUSED     = 3;
  {$EXTERNALSYM EPSHV_DISABLED}
  EPSHV_DISABLED     = 4;

  CP_BACKGROUND     = 2;
  {$EXTERNALSYM CP_BACKGROUND}
  CP_TRANSPARENTBACKGROUND     = 3;
  {$EXTERNALSYM CP_TRANSPARENTBACKGROUND}
  CP_BORDER     = 4;
  {$EXTERNALSYM CP_BORDER}
  CP_READONLY     = 5;
  {$EXTERNALSYM CP_READONLY}
  CP_DROPDOWNBUTTONRIGHT     = 6;
  {$EXTERNALSYM CP_DROPDOWNBUTTONRIGHT}
  CP_DROPDOWNBUTTONLEFT     = 7;
  {$EXTERNALSYM CP_DROPDOWNBUTTONLEFT}
  CP_CUEBANNER     = 8;
  {$EXTERNALSYM CP_CUEBANNER}

type
  {$EXTERNALSYM DROPDOWNBUTTONRIGHTSTATES}
  DROPDOWNBUTTONRIGHTSTATES = Integer;
const
  {$EXTERNALSYM CBXSR_NORMAL}
  CBXSR_NORMAL     = 1;
  {$EXTERNALSYM CBXSR_HOT}
  CBXSR_HOT     = 2;
  {$EXTERNALSYM CBXSR_PRESSED}
  CBXSR_PRESSED     = 3;
  {$EXTERNALSYM CBXSR_DISABLED}
  CBXSR_DISABLED     = 4;

type
  {$EXTERNALSYM DROPDOWNBUTTONLEFTSTATES}
  DROPDOWNBUTTONLEFTSTATES = Integer;
const
  {$EXTERNALSYM CBXSL_NORMAL}
  CBXSL_NORMAL     = 1;
  {$EXTERNALSYM CBXSL_HOT}
  CBXSL_HOT     = 2;
  {$EXTERNALSYM CBXSL_PRESSED}
  CBXSL_PRESSED     = 3;
  {$EXTERNALSYM CBXSL_DISABLED}
  CBXSL_DISABLED     = 4;

type
  {$EXTERNALSYM TRANSPARENTBACKGROUNDSTATES}
  TRANSPARENTBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM CBTBS_NORMAL}
  CBTBS_NORMAL     = 1;
  {$EXTERNALSYM CBTBS_HOT}
  CBTBS_HOT     = 2;
  {$EXTERNALSYM CBTBS_DISABLED}
  CBTBS_DISABLED     = 3;
  {$EXTERNALSYM CBTBS_FOCUSED}
  CBTBS_FOCUSED     = 4;

type
  {$EXTERNALSYM BORDERSTATES}
  BORDERSTATES = Integer;
const
  {$EXTERNALSYM CBB_NORMAL}
  CBB_NORMAL     = 1;
  {$EXTERNALSYM CBB_HOT}
  CBB_HOT     = 2;
  {$EXTERNALSYM CBB_FOCUSED}
  CBB_FOCUSED     = 3;
  {$EXTERNALSYM CBB_DISABLED}
  CBB_DISABLED     = 4;

type
  {$EXTERNALSYM READONLYSTATES}
  READONLYSTATES = Integer;
const
  {$EXTERNALSYM CBRO_NORMAL}
  CBRO_NORMAL     = 1;
  {$EXTERNALSYM CBRO_HOT}
  CBRO_HOT     = 2;
  {$EXTERNALSYM CBRO_PRESSED}
  CBRO_PRESSED     = 3;
  {$EXTERNALSYM CBRO_DISABLED}
  CBRO_DISABLED     = 4;

type
  {$EXTERNALSYM CUEBANNERSTATES}
  CUEBANNERSTATES = Integer;
const
  {$EXTERNALSYM CBCB_NORMAL}
  CBCB_NORMAL     = 1;
  {$EXTERNALSYM CBCB_HOT}
  CBCB_HOT     = 2;
  {$EXTERNALSYM CBCB_PRESSED}
  CBCB_PRESSED     = 3;
  {$EXTERNALSYM CBCB_DISABLED}
  CBCB_DISABLED     = 4;

  SPP_MOREPROGRAMSTAB     = 12;
  {$EXTERNALSYM SPP_MOREPROGRAMSTAB}
  SPP_NSCHOST     = 13;
  {$EXTERNALSYM SPP_NSCHOST}
  SPP_SOFTWAREEXPLORER     = 14;
  {$EXTERNALSYM SPP_SOFTWAREEXPLORER}
  SPP_OPENBOX     = 15;
  {$EXTERNALSYM SPP_OPENBOX}
  SPP_SEARCHVIEW     = 16;
  {$EXTERNALSYM SPP_SEARCHVIEW}
  SPP_MOREPROGRAMSARROWBACK     = 17;
  {$EXTERNALSYM SPP_MOREPROGRAMSARROWBACK}
  SPP_TOPMATCH     = 18;
  {$EXTERNALSYM SPP_TOPMATCH}
  SPP_LOGOFFSPLITBUTTONDROPDOWN     = 19;
  {$EXTERNALSYM SPP_LOGOFFSPLITBUTTONDROPDOWN}

type
  {$EXTERNALSYM MOREPROGRAMSTABSTATES}
  MOREPROGRAMSTABSTATES = Integer;
const
  {$EXTERNALSYM SPMPT_NORMAL}
  SPMPT_NORMAL     = 1;
  {$EXTERNALSYM SPMPT_HOT}
  SPMPT_HOT     = 2;
  {$EXTERNALSYM SPMPT_SELECTED}
  SPMPT_SELECTED     = 3;
  {$EXTERNALSYM SPMPT_DISABLED}
  SPMPT_DISABLED     = 4;
  {$EXTERNALSYM SPMPT_FOCUSED}
  SPMPT_FOCUSED     = 5;

type
  {$EXTERNALSYM SOFTWAREEXPLORERSTATES}
  SOFTWAREEXPLORERSTATES = Integer;
const
  {$EXTERNALSYM SPSE_NORMAL}
  SPSE_NORMAL     = 1;
  {$EXTERNALSYM SPSE_HOT}
  SPSE_HOT     = 2;
  {$EXTERNALSYM SPSE_SELECTED}
  SPSE_SELECTED     = 3;
  {$EXTERNALSYM SPSE_DISABLED}
  SPSE_DISABLED     = 4;
  {$EXTERNALSYM SPSE_FOCUSED}
  SPSE_FOCUSED     = 5;

type
  {$EXTERNALSYM OPENBOXSTATES}
  OPENBOXSTATES = Integer;
const
  {$EXTERNALSYM SPOB_NORMAL}
  SPOB_NORMAL     = 1;
  {$EXTERNALSYM SPOB_HOT}
  SPOB_HOT     = 2;
  {$EXTERNALSYM SPOB_SELECTED}
  SPOB_SELECTED     = 3;
  {$EXTERNALSYM SPOB_DISABLED}
  SPOB_DISABLED     = 4;
  {$EXTERNALSYM SPOB_FOCUSED}
  SPOB_FOCUSED     = 5;

type
  { For Windows >= Vista }
  {$EXTERNALSYM MOREPROGRAMSARROWBACKSTATES}
  MOREPROGRAMSARROWBACKSTATES = Integer;
const
  {$EXTERNALSYM SPSB_NORMAL}
  SPSB_NORMAL     = 1;
  {$EXTERNALSYM SPSB_HOT}
  SPSB_HOT     = 2;
  {$EXTERNALSYM SPSB_PRESSED}
  SPSB_PRESSED     = 3;

  {$EXTERNALSYM VSCLASS_AEROWIZARDSTYLE}
  VSCLASS_AEROWIZARDSTYLE = 'AEROWIZARDSTYLE';
  {$EXTERNALSYM VSCLASS_AEROWIZARD}
  VSCLASS_AEROWIZARD      = 'AEROWIZARD';

type
  {$EXTERNALSYM AEROWIZARDPARTS}
  AEROWIZARDPARTS = Integer;
const
  {$EXTERNALSYM AW_TITLEBAR}
  AW_TITLEBAR     = 1;
  {$EXTERNALSYM AW_HEADERAREA}
  AW_HEADERAREA     = 2;
  {$EXTERNALSYM AW_CONTENTAREA}
  AW_CONTENTAREA     = 3;
  {$EXTERNALSYM AW_COMMANDAREA}
  AW_COMMANDAREA     = 4;
  {$EXTERNALSYM AW_BUTTON}
  AW_BUTTON     = 5;

type
  {$EXTERNALSYM AEROWIZARDSTYLEPARTS}
  AEROWIZARDSTYLEPARTS = AEROWIZARDPARTS;

  {$EXTERNALSYM TITLEBARSTATES}
  TITLEBARSTATES = Integer;
const
  {$EXTERNALSYM AW_S_TITLEBAR_ACTIVE}
  AW_S_TITLEBAR_ACTIVE     = 1;
  {$EXTERNALSYM AW_S_TITLEBAR_INACTIVE}
  AW_S_TITLEBAR_INACTIVE     = 2;

type
  {$EXTERNALSYM HEADERAREASTATES}
  HEADERAREASTATES = Integer;
const
  {$EXTERNALSYM AW_S_HEADERAREA_NOMARGIN}
  AW_S_HEADERAREA_NOMARGIN     = 1;

type
  {$EXTERNALSYM CONTENTAREASTATES}
  CONTENTAREASTATES = Integer;
const
  {$EXTERNALSYM AW_S_CONTENTAREA_NOMARGIN}
  AW_S_CONTENTAREA_NOMARGIN     = 1;

type
  {$EXTERNALSYM COMMUNICATIONSPARTS}
  COMMUNICATIONSPARTS = Integer;
const
  {$EXTERNALSYM CSST_TAB}
  CSST_TAB     = 1;

type
  {$EXTERNALSYM TABSTATES}
  TABSTATES = Integer;
const
  {$EXTERNALSYM CSTB_NORMAL}
  CSTB_NORMAL     = 1;
  {$EXTERNALSYM CSTB_HOT}
  CSTB_HOT     = 2;
  {$EXTERNALSYM CSTB_SELECTED}
  CSTB_SELECTED     = 3;

type
  {$EXTERNALSYM CONTROLPANELPARTS}
  CONTROLPANELPARTS = Integer;
const
  {$EXTERNALSYM CPANEL_NAVIGATIONPANE}
  CPANEL_NAVIGATIONPANE     = 1;
  {$EXTERNALSYM CPANEL_CONTENTPANE}
  CPANEL_CONTENTPANE     = 2;
  {$EXTERNALSYM CPANEL_NAVIGATIONPANELABEL}
  CPANEL_NAVIGATIONPANELABEL     = 3;
  {$EXTERNALSYM CPANEL_CONTENTPANELABEL}
  CPANEL_CONTENTPANELABEL     = 4;
  {$EXTERNALSYM CPANEL_TITLE}
  CPANEL_TITLE     = 5;
  {$EXTERNALSYM CPANEL_BODYTEXT}
  CPANEL_BODYTEXT     = 6;
  {$EXTERNALSYM CPANEL_HELPLINK}
  CPANEL_HELPLINK     = 7;
  {$EXTERNALSYM CPANEL_TASKLINK}
  CPANEL_TASKLINK     = 8;
  {$EXTERNALSYM CPANEL_GROUPTEXT}
  CPANEL_GROUPTEXT     = 9;
  {$EXTERNALSYM CPANEL_CONTENTLINK}
  CPANEL_CONTENTLINK     = 10;
  {$EXTERNALSYM CPANEL_SECTIONTITLELINK}
  CPANEL_SECTIONTITLELINK     = 11;
  {$EXTERNALSYM CPANEL_LARGECOMMANDAREA}
  CPANEL_LARGECOMMANDAREA     = 12;
  {$EXTERNALSYM CPANEL_SMALLCOMMANDAREA}
  CPANEL_SMALLCOMMANDAREA     = 13;
  {$EXTERNALSYM CPANEL_BUTTON}
  CPANEL_BUTTON     = 14;
  {$EXTERNALSYM CPANEL_MESSAGETEXT}
  CPANEL_MESSAGETEXT     = 15;
  {$EXTERNALSYM CPANEL_NAVIGATIONPANELINE}
  CPANEL_NAVIGATIONPANELINE     = 16;
  {$EXTERNALSYM CPANEL_CONTENTPANELINE}
  CPANEL_CONTENTPANELINE     = 17;
  {$EXTERNALSYM CPANEL_BANNERAREA}
  CPANEL_BANNERAREA     = 18;
  {$EXTERNALSYM CPANEL_BODYTITLE}
  CPANEL_BODYTITLE     = 19;

type
  {$EXTERNALSYM HELPLINKSTATES}
  HELPLINKSTATES = Integer;
const
  {$EXTERNALSYM CPHL_NORMAL}
  CPHL_NORMAL     = 1;
  {$EXTERNALSYM CPHL_HOT}
  CPHL_HOT     = 2;
  {$EXTERNALSYM CPHL_PRESSED}
  CPHL_PRESSED     = 3;
  {$EXTERNALSYM CPHL_DISABLED}
  CPHL_DISABLED     = 4;

type
  {$EXTERNALSYM TASKLINKSTATES}
  TASKLINKSTATES = Integer;
const
  {$EXTERNALSYM CPTL_NORMAL}
  CPTL_NORMAL     = 1;
  {$EXTERNALSYM CPTL_HOT}
  CPTL_HOT     = 2;
  {$EXTERNALSYM CPTL_PRESSED}
  CPTL_PRESSED     = 3;
  {$EXTERNALSYM CPTL_DISABLED}
  CPTL_DISABLED     = 4;
  {$EXTERNALSYM CPTL_PAGE}
  CPTL_PAGE     = 5;

type
  {$EXTERNALSYM CONTENTLINKSTATES}
  CONTENTLINKSTATES = Integer;
const
  {$EXTERNALSYM CPCL_NORMAL}
  CPCL_NORMAL     = 1;
  {$EXTERNALSYM CPCL_HOT}
  CPCL_HOT     = 2;
  {$EXTERNALSYM CPCL_PRESSED}
  CPCL_PRESSED     = 3;
  {$EXTERNALSYM CPCL_DISABLED}
  CPCL_DISABLED     = 4;

type
  {$EXTERNALSYM SECTIONTITLELINKSTATES}
  SECTIONTITLELINKSTATES = Integer;
const
  {$EXTERNALSYM CPSTL_NORMAL}
  CPSTL_NORMAL     = 1;
  {$EXTERNALSYM CPSTL_HOT}
  CPSTL_HOT     = 2;

type
  {$EXTERNALSYM DATEPICKERPARTS}
  DATEPICKERPARTS = Integer; 
const
  {$EXTERNALSYM DP_DATETEXT}
  DP_DATETEXT     = 1;
  {$EXTERNALSYM DP_DATEBORDER}
  DP_DATEBORDER     = 2; 
  {$EXTERNALSYM DP_SHOWCALENDARBUTTONRIGHT}
  DP_SHOWCALENDARBUTTONRIGHT     = 3; 

type
  {$EXTERNALSYM DATETEXTSTATES}
  DATETEXTSTATES = Integer;
const
  {$EXTERNALSYM DPDT_NORMAL}
  DPDT_NORMAL     = 1;
  {$EXTERNALSYM DPDT_DISABLED}
  DPDT_DISABLED     = 2;
  {$EXTERNALSYM DPDT_SELECTED}
  DPDT_SELECTED     = 3;

type
  {$EXTERNALSYM DATEBORDERSTATES}
  DATEBORDERSTATES = Integer;
const
  {$EXTERNALSYM DPDB_NORMAL}
  DPDB_NORMAL     = 1;
  {$EXTERNALSYM DPDB_HOT}
  DPDB_HOT     = 2;
  {$EXTERNALSYM DPDB_FOCUSED}
  DPDB_FOCUSED     = 3;
  {$EXTERNALSYM DPDB_DISABLED}
  DPDB_DISABLED     = 4;

type
  {$EXTERNALSYM SHOWCALENDARBUTTONRIGHTSTATES}
  SHOWCALENDARBUTTONRIGHTSTATES = Integer;
const
  {$EXTERNALSYM DPSCBR_NORMAL}
  DPSCBR_NORMAL     = 1;
  {$EXTERNALSYM DPSCBR_HOT}
  DPSCBR_HOT     = 2;
  {$EXTERNALSYM DPSCBR_PRESSED}
  DPSCBR_PRESSED     = 3;
  {$EXTERNALSYM DPSCBR_DISABLED}
  DPSCBR_DISABLED     = 4;

type
  {$EXTERNALSYM DRAGDROPPARTS}
  DRAGDROPPARTS = Integer;
const
  {$EXTERNALSYM DD_COPY}
  DD_COPY     = 1;
  {$EXTERNALSYM DD_MOVE}
  DD_MOVE     = 2;
  {$EXTERNALSYM DD_UPDATEMETADATA}
  DD_UPDATEMETADATA     = 3;
  {$EXTERNALSYM DD_CREATELINK}
  DD_CREATELINK     = 4;
  {$EXTERNALSYM DD_WARNING}
  DD_WARNING     = 5;
  {$EXTERNALSYM DD_NONE}
  DD_NONE     = 6;
  {$EXTERNALSYM DD_IMAGEBG}
  DD_IMAGEBG     = 7;
  {$EXTERNALSYM DD_TEXTBG}
  DD_TEXTBG     = 8;

type
  {$EXTERNALSYM COPYSTATES}
  COPYSTATES = Integer;
const
  {$EXTERNALSYM DDCOPY_HIGHLIGHT}
  DDCOPY_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDCOPY_NOHIGHLIGHT}
  DDCOPY_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM MOVESTATES}
  MOVESTATES = Integer;
const
  {$EXTERNALSYM DDMOVE_HIGHLIGHT}
  DDMOVE_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDMOVE_NOHIGHLIGHT}
  DDMOVE_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM UPDATEMETADATASTATES}
  UPDATEMETADATASTATES = Integer;
const
  {$EXTERNALSYM DDUPDATEMETADATA_HIGHLIGHT}
  DDUPDATEMETADATA_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDUPDATEMETADATA_NOHIGHLIGHT}
  DDUPDATEMETADATA_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM CREATELINKSTATES}
  CREATELINKSTATES = Integer;
const
  {$EXTERNALSYM DDCREATELINK_HIGHLIGHT}
  DDCREATELINK_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDCREATELINK_NOHIGHLIGHT}
  DDCREATELINK_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM WARNINGSTATES}
  WARNINGSTATES = Integer;
const
  {$EXTERNALSYM DDWARNING_HIGHLIGHT}
  DDWARNING_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDWARNING_NOHIGHLIGHT}
  DDWARNING_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM NONESTATES}
  NONESTATES = Integer;
const
  {$EXTERNALSYM DDNONE_HIGHLIGHT}
  DDNONE_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDNONE_NOHIGHLIGHT}
  DDNONE_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM FLYOUTPARTS}
  FLYOUTPARTS = Integer; 
const
  {$EXTERNALSYM FLYOUT_HEADER}
  FLYOUT_HEADER     = 1; 
  {$EXTERNALSYM FLYOUT_BODY}
  FLYOUT_BODY     = 2; 
  {$EXTERNALSYM FLYOUT_LABEL}
  FLYOUT_LABEL     = 3; 
  {$EXTERNALSYM FLYOUT_LINK}
  FLYOUT_LINK     = 4; 
  {$EXTERNALSYM FLYOUT_DIVIDER}
  FLYOUT_DIVIDER     = 5; 
  {$EXTERNALSYM FLYOUT_WINDOW}
  FLYOUT_WINDOW     = 6; 
  {$EXTERNALSYM FLYOUT_LINKAREA}
  FLYOUT_LINKAREA     = 7; 
  {$EXTERNALSYM FLYOUT_LINKHEADER}
  FLYOUT_LINKHEADER     = 8; 

type
  {$EXTERNALSYM LABELSTATES}
  LABELSTATES = Integer;
const
  {$EXTERNALSYM FLS_NORMAL}
  FLS_NORMAL     = 1;
  {$EXTERNALSYM FLS_SELECTED}
  FLS_SELECTED     = 2;
  {$EXTERNALSYM FLS_EMPHASIZED}
  FLS_EMPHASIZED     = 3;
  {$EXTERNALSYM FLS_DISABLED}
  FLS_DISABLED     = 4;

type
  {$EXTERNALSYM LINKSTATES}
  LINKSTATES = Integer;
const
  {$EXTERNALSYM FLYOUTLINK_NORMAL}
  FLYOUTLINK_NORMAL     = 1;
  {$EXTERNALSYM FLYOUTLINK_HOVER}
  FLYOUTLINK_HOVER     = 2;

type
  {$EXTERNALSYM BODYSTATES}
  BODYSTATES = Integer;
const
  {$EXTERNALSYM FBS_NORMAL}
  FBS_NORMAL     = 1;
  {$EXTERNALSYM FBS_EMPHASIZED}
  FBS_EMPHASIZED     = 2;

type
  {$EXTERNALSYM LINKHEADERSTATES}
  LINKHEADERSTATES = Integer;
const
  {$EXTERNALSYM FLH_NORMAL}
  FLH_NORMAL     = 1;
  {$EXTERNALSYM FLH_HOVER}
  FLH_HOVER     = 2;

type
  {$EXTERNALSYM LISTBOXPARTS}
  LISTBOXPARTS = Integer;
const
  {$EXTERNALSYM LBCP_BORDER_HSCROLL}
  LBCP_BORDER_HSCROLL     = 1;
  {$EXTERNALSYM LBCP_BORDER_HVSCROLL}
  LBCP_BORDER_HVSCROLL     = 2;
  {$EXTERNALSYM LBCP_BORDER_NOSCROLL}
  LBCP_BORDER_NOSCROLL     = 3;
  {$EXTERNALSYM LBCP_BORDER_VSCROLL}
  LBCP_BORDER_VSCROLL     = 4;
  {$EXTERNALSYM LBCP_ITEM}
  LBCP_ITEM     = 5;

type
  {$EXTERNALSYM BORDER_HSCROLLSTATES}
  BORDER_HSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSH_NORMAL}
  LBPSH_NORMAL     = 1;
  {$EXTERNALSYM LBPSH_FOCUSED}
  LBPSH_FOCUSED     = 2;
  {$EXTERNALSYM LBPSH_HOT}
  LBPSH_HOT     = 3;
  {$EXTERNALSYM LBPSH_DISABLED}
  LBPSH_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_HVSCROLLSTATES}
  BORDER_HVSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSHV_NORMAL}
  LBPSHV_NORMAL     = 1;
  {$EXTERNALSYM LBPSHV_FOCUSED}
  LBPSHV_FOCUSED     = 2;
  {$EXTERNALSYM LBPSHV_HOT}
  LBPSHV_HOT     = 3;
  {$EXTERNALSYM LBPSHV_DISABLED}
  LBPSHV_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_NOSCROLLSTATES}
  BORDER_NOSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSN_NORMAL}
  LBPSN_NORMAL     = 1;
  {$EXTERNALSYM LBPSN_FOCUSED}
  LBPSN_FOCUSED     = 2;
  {$EXTERNALSYM LBPSN_HOT}
  LBPSN_HOT     = 3;
  {$EXTERNALSYM LBPSN_DISABLED}
  LBPSN_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_VSCROLLSTATES}
  BORDER_VSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSV_NORMAL}
  LBPSV_NORMAL     = 1;
  {$EXTERNALSYM LBPSV_FOCUSED}
  LBPSV_FOCUSED     = 2;
  {$EXTERNALSYM LBPSV_HOT}
  LBPSV_HOT     = 3;
  {$EXTERNALSYM LBPSV_DISABLED}
  LBPSV_DISABLED     = 4;

type
  {$EXTERNALSYM ITEMSTATES}
  ITEMSTATES = Integer;
const
  {$EXTERNALSYM LBPSI_HOT}
  LBPSI_HOT     = 1;
  {$EXTERNALSYM LBPSI_HOTSELECTED}
  LBPSI_HOTSELECTED     = 2;
  {$EXTERNALSYM LBPSI_SELECTED}
  LBPSI_SELECTED     = 3;
  {$EXTERNALSYM LBPSI_SELECTEDNOTFOCUS}
  LBPSI_SELECTEDNOTFOCUS     = 4;

type
  {$EXTERNALSYM NAVIGATIONPARTS}
  NAVIGATIONPARTS = Integer;
const
  {$EXTERNALSYM NAV_BACKBUTTON}
  NAV_BACKBUTTON     = 1;
  {$EXTERNALSYM NAV_FORWARDBUTTON}
  NAV_FORWARDBUTTON     = 2;
  {$EXTERNALSYM NAV_MENUBUTTON}
  NAV_MENUBUTTON     = 3;

type
  {$EXTERNALSYM NAV_BACKBUTTONSTATES}
  NAV_BACKBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_BB_NORMAL}
  NAV_BB_NORMAL     = 1;
  {$EXTERNALSYM NAV_BB_HOT}
  NAV_BB_HOT     = 2;
  {$EXTERNALSYM NAV_BB_PRESSED}
  NAV_BB_PRESSED     = 3;
  {$EXTERNALSYM NAV_BB_DISABLED}
  NAV_BB_DISABLED     = 4;

type
  {$EXTERNALSYM NAV_FORWARDBUTTONSTATES}
  NAV_FORWARDBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_FB_NORMAL}
  NAV_FB_NORMAL     = 1;
  {$EXTERNALSYM NAV_FB_HOT}
  NAV_FB_HOT     = 2;
  {$EXTERNALSYM NAV_FB_PRESSED}
  NAV_FB_PRESSED     = 3;
  {$EXTERNALSYM NAV_FB_DISABLED}
  NAV_FB_DISABLED     = 4;

type
  {$EXTERNALSYM NAV_MENUBUTTONSTATES}
  NAV_MENUBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_MB_NORMAL}
  NAV_MB_NORMAL     = 1;
  {$EXTERNALSYM NAV_MB_HOT}
  NAV_MB_HOT     = 2;
  {$EXTERNALSYM NAV_MB_PRESSED}
  NAV_MB_PRESSED     = 3;
  {$EXTERNALSYM NAV_MB_DISABLED}
  NAV_MB_DISABLED     = 4;

type
  {$EXTERNALSYM TASKDIALOGPARTS}
  TASKDIALOGPARTS = Integer; 
const
  {$EXTERNALSYM TDLG_PRIMARYPANEL}
  TDLG_PRIMARYPANEL     = 1; 
  {$EXTERNALSYM TDLG_MAININSTRUCTIONPANE}
  TDLG_MAININSTRUCTIONPANE     = 2; 
  {$EXTERNALSYM TDLG_MAINICON}
  TDLG_MAINICON     = 3; 
  {$EXTERNALSYM TDLG_CONTENTPANE}
  TDLG_CONTENTPANE     = 4; 
  {$EXTERNALSYM TDLG_CONTENTICON}
  TDLG_CONTENTICON     = 5; 
  {$EXTERNALSYM TDLG_EXPANDEDCONTENT}
  TDLG_EXPANDEDCONTENT     = 6;
  {$EXTERNALSYM TDLG_COMMANDLINKPANE}
  TDLG_COMMANDLINKPANE     = 7; 
  {$EXTERNALSYM TDLG_SECONDARYPANEL}
  TDLG_SECONDARYPANEL     = 8; 
  {$EXTERNALSYM TDLG_CONTROLPANE}
  TDLG_CONTROLPANE     = 9; 
  {$EXTERNALSYM TDLG_BUTTONSECTION}
  TDLG_BUTTONSECTION     = 10; 
  {$EXTERNALSYM TDLG_BUTTONWRAPPER}
  TDLG_BUTTONWRAPPER     = 11; 
  {$EXTERNALSYM TDLG_EXPANDOTEXT}
  TDLG_EXPANDOTEXT     = 12; 
  {$EXTERNALSYM TDLG_EXPANDOBUTTON}
  TDLG_EXPANDOBUTTON     = 13; 
  {$EXTERNALSYM TDLG_VERIFICATIONTEXT}
  TDLG_VERIFICATIONTEXT     = 14; 
  {$EXTERNALSYM TDLG_FOOTNOTEPANE}
  TDLG_FOOTNOTEPANE     = 15; 
  {$EXTERNALSYM TDLG_FOOTNOTEAREA}
  TDLG_FOOTNOTEAREA     = 16; 
  {$EXTERNALSYM TDLG_FOOTNOTESEPARATOR}
  TDLG_FOOTNOTESEPARATOR     = 17; 
  {$EXTERNALSYM TDLG_EXPANDEDFOOTERAREA}
  TDLG_EXPANDEDFOOTERAREA     = 18;
  {$EXTERNALSYM TDLG_PROGRESSBAR}
  TDLG_PROGRESSBAR     = 19; 
  {$EXTERNALSYM TDLG_IMAGEALIGNMENT}
  TDLG_IMAGEALIGNMENT     = 20; 
  {$EXTERNALSYM TDLG_RADIOBUTTONPANE}
  TDLG_RADIOBUTTONPANE     = 21; 

type
  {$EXTERNALSYM CONTENTPANESTATES}
  CONTENTPANESTATES = Integer;
const
  {$EXTERNALSYM TDLGCPS_STANDALONE}
  TDLGCPS_STANDALONE     = 1;

type
  {$EXTERNALSYM EXPANDOBUTTONSTATES}
  EXPANDOBUTTONSTATES = Integer;
const
  {$EXTERNALSYM TDLGEBS_NORMAL}
  TDLGEBS_NORMAL     = 1;
  {$EXTERNALSYM TDLGEBS_HOVER}
  TDLGEBS_HOVER     = 2;
  {$EXTERNALSYM TDLGEBS_PRESSED}
  TDLGEBS_PRESSED     = 3;
  {$EXTERNALSYM TDLGEBS_EXPANDEDNORMAL}
  TDLGEBS_EXPANDEDNORMAL     = 4;
  {$EXTERNALSYM TDLGEBS_EXPANDEDHOVER}
  TDLGEBS_EXPANDEDHOVER     = 5;
  {$EXTERNALSYM TDLGEBS_EXPANDEDPRESSED}
  TDLGEBS_EXPANDEDPRESSED     = 6;

type
  {$EXTERNALSYM TEXTSTYLEPARTS}
  TEXTSTYLEPARTS = Integer;
const
  {$EXTERNALSYM TEXT_MAININSTRUCTION}
  TEXT_MAININSTRUCTION     = 1; 
  {$EXTERNALSYM TEXT_INSTRUCTION}
  TEXT_INSTRUCTION     = 2; 
  {$EXTERNALSYM TEXT_BODYTITLE}
  TEXT_BODYTITLE     = 3; 
  {$EXTERNALSYM TEXT_BODYTEXT}
  TEXT_BODYTEXT     = 4; 
  {$EXTERNALSYM TEXT_SECONDARYTEXT}
  TEXT_SECONDARYTEXT     = 5; 
  {$EXTERNALSYM TEXT_HYPERLINKTEXT}
  TEXT_HYPERLINKTEXT     = 6; 
  {$EXTERNALSYM TEXT_EXPANDED}
  TEXT_EXPANDED     = 7; 
  {$EXTERNALSYM TEXT_LABEL}
  TEXT_LABEL     = 8; 
  {$EXTERNALSYM TEXT_CONTROLLABEL}
  TEXT_CONTROLLABEL     = 9; 

type
  {$EXTERNALSYM HYPERLINKTEXTSTATES}
  HYPERLINKTEXTSTATES = Integer;
const
  {$EXTERNALSYM TS_HYPERLINK_NORMAL}
  TS_HYPERLINK_NORMAL     = 1;
  {$EXTERNALSYM TS_HYPERLINK_HOT}
  TS_HYPERLINK_HOT     = 2;
  {$EXTERNALSYM TS_HYPERLINK_PRESSED}
  TS_HYPERLINK_PRESSED     = 3;
  {$EXTERNALSYM TS_HYPERLINK_DISABLED}
  TS_HYPERLINK_DISABLED     = 4;

type
  {$EXTERNALSYM CONTROLLABELSTATES}
  CONTROLLABELSTATES = Integer;
const
  {$EXTERNALSYM TS_CONTROLLABEL_NORMAL}
  TS_CONTROLLABEL_NORMAL     = 1;
  {$EXTERNALSYM TS_CONTROLLABEL_DISABLED}
  TS_CONTROLLABEL_DISABLED     = 2;

type
  {$EXTERNALSYM LINKPARTS}
  LINKPARTS = Integer;
const
  {$EXTERNALSYM LP_HYPERLINK}
  LP_HYPERLINK     = 1;

type
  {$EXTERNALSYM HYPERLINKSTATES}
  HYPERLINKSTATES = Integer;
const
  {$EXTERNALSYM HLS_NORMALTEXT}
  HLS_NORMALTEXT     = 1;
  {$EXTERNALSYM HLS_LINKTEXT}
  HLS_LINKTEXT     = 2;

type
  {$EXTERNALSYM EMPTYMARKUPPARTS}
  EMPTYMARKUPPARTS = Integer;
const
  {$EXTERNALSYM EMP_MARKUPTEXT}
  EMP_MARKUPTEXT     = 1;

type
  {$EXTERNALSYM MARKUPTEXTSTATES}
  MARKUPTEXTSTATES = Integer;
const
  {$EXTERNALSYM EMT_NORMALTEXT}
  EMT_NORMALTEXT     = 1;
  {$EXTERNALSYM EMT_LINKTEXT}
  EMT_LINKTEXT     = 2;

  type
  {$EXTERNALSYM STATICPARTS}
  STATICPARTS = Integer;
const
  {$EXTERNALSYM STAT_TEXT}
  STAT_TEXT     = 1;

type
  {$EXTERNALSYM MONTHCALPARTS}
  MONTHCALPARTS = Integer;
const
  {$EXTERNALSYM MC_BACKGROUND}
  MC_BACKGROUND     = 1;
  {$EXTERNALSYM MC_BORDERS}
  MC_BORDERS     = 2;
  {$EXTERNALSYM MC_GRIDBACKGROUND}
  MC_GRIDBACKGROUND     = 3;
  {$EXTERNALSYM MC_COLHEADERSPLITTER}
  MC_COLHEADERSPLITTER     = 4;
  {$EXTERNALSYM MC_GRIDCELLBACKGROUND}
  MC_GRIDCELLBACKGROUND     = 5;
  {$EXTERNALSYM MC_GRIDCELL}
  MC_GRIDCELL     = 6;
  {$EXTERNALSYM MC_GRIDCELLUPPER}
  MC_GRIDCELLUPPER     = 7;
  {$EXTERNALSYM MC_TRAILINGGRIDCELL}
  MC_TRAILINGGRIDCELL     = 8;
  {$EXTERNALSYM MC_TRAILINGGRIDCELLUPPER}
  MC_TRAILINGGRIDCELLUPPER     = 9;
  {$EXTERNALSYM MC_NAVNEXT}
  MC_NAVNEXT     = 10;
  {$EXTERNALSYM MC_NAVPREV}
  MC_NAVPREV     = 11;

type
  {$EXTERNALSYM GRIDCELLBACKGROUNDSTATES}
  GRIDCELLBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MCGCB_SELECTED}
  MCGCB_SELECTED     = 1;
  {$EXTERNALSYM MCGCB_HOT}
  MCGCB_HOT     = 2;
  {$EXTERNALSYM MCGCB_SELECTEDHOT}
  MCGCB_SELECTEDHOT     = 3;
  {$EXTERNALSYM MCGCB_SELECTEDNOTFOCUSED}
  MCGCB_SELECTEDNOTFOCUSED     = 4;
  {$EXTERNALSYM MCGCB_TODAY}
  MCGCB_TODAY     = 5;

type
  {$EXTERNALSYM GRIDCELLSTATES}
  GRIDCELLSTATES = Integer;
const
  {$EXTERNALSYM MCGC_HOT}
  MCGC_HOT     = 1;
  {$EXTERNALSYM MCGC_HASSTATE}
  MCGC_HASSTATE     = 2;
  {$EXTERNALSYM MCGC_HASSTATEHOT}
  MCGC_HASSTATEHOT     = 3;
  {$EXTERNALSYM MCGC_TODAY}
  MCGC_TODAY     = 4;

type
  {$EXTERNALSYM GRIDCELLUPPERSTATES}
  GRIDCELLUPPERSTATES = Integer;
const
  {$EXTERNALSYM MCGCU_HOT}
  MCGCU_HOT     = 1;
  {$EXTERNALSYM MCGCU_HASSTATE}
  MCGCU_HASSTATE     = 2;
  {$EXTERNALSYM MCGCU_HASSTATEHOT}
  MCGCU_HASSTATEHOT     = 3;

type
  {$EXTERNALSYM TRAILINGGRIDCELLSTATES}
  TRAILINGGRIDCELLSTATES = Integer;
const
  {$EXTERNALSYM MCTGC_HOT}
  MCTGC_HOT     = 1;
  {$EXTERNALSYM MCTGC_HASSTATE}
  MCTGC_HASSTATE     = 2;
  {$EXTERNALSYM MCTGC_HASSTATEHOT}
  MCTGC_HASSTATEHOT     = 3;
  {$EXTERNALSYM MCTGC_TODAY}
  MCTGC_TODAY     = 4;

type
  {$EXTERNALSYM TRAILINGGRIDCELLUPPERSTATES}
  TRAILINGGRIDCELLUPPERSTATES = Integer;
const
  {$EXTERNALSYM MCTGCU_HOT}
  MCTGCU_HOT     = 1;
  {$EXTERNALSYM MCTGCU_HASSTATE}
  MCTGCU_HASSTATE     = 2;
  {$EXTERNALSYM MCTGCU_HASSTATEHOT}
  MCTGCU_HASSTATEHOT     = 3;

type
  {$EXTERNALSYM NAVNEXTSTATES}
  NAVNEXTSTATES = Integer;
const
  {$EXTERNALSYM MCNN_NORMAL}
  MCNN_NORMAL     = 1;
  {$EXTERNALSYM MCNN_HOT}
  MCNN_HOT     = 2;
  {$EXTERNALSYM MCNN_PRESSED}
  MCNN_PRESSED     = 3;
  {$EXTERNALSYM MCNN_DISABLED}
  MCNN_DISABLED     = 4;

type
  {$EXTERNALSYM NAVPREVSTATES}
  NAVPREVSTATES = Integer;
const
  {$EXTERNALSYM MCNP_NORMAL}
  MCNP_NORMAL     = 1;
  {$EXTERNALSYM MCNP_HOT}
  MCNP_HOT     = 2;
  {$EXTERNALSYM MCNP_PRESSED}
  MCNP_PRESSED     = 3;
  {$EXTERNALSYM MCNP_DISABLED}
  MCNP_DISABLED     = 4;

// <-- uxtheme part for windows >= vista

{$ENDIF IFNDEF LMDCOMP11}

type
  TLMDThemeMode = LMDClass.TLMDThemeMode;
  {$NODEFINE TLMDThemeMode}
  TLMDRectPtr = PRect;

  TLMDStateColorMode = (scmTheme, scmNoChange, scmCustom);
  TLMDFormThemeProviderOption = (ftpShowSysButton, ftpThemedNCArea);
  TLMDFormThemeProviderOptions = set of TLMDFormThemeProviderOption;

  TLMDThemedButtonState = (btnsNormal, btnsHot, btnsPressed, btnsDisabled);

  TLMDThemesOnDrawElement = procedure(Sender: TObject; DC: HDC; aElementTypeInfo: PTypeInfo; aDetailTypeInfo: PTypeInfo; aElement: integer; aDetail: integer; ARect: TRect; ClipRect: TLMDRectPtr; var aExitPainter: boolean) of object;
  TLMDThemesOnDrawCheckMarkEvent = procedure(Sender: TObject; DC: HDC; ARect: TRect; aCheckBox: TThemedButton; var aExitPainter: boolean) of object;
  TLMDThemesOnDrawArrowEvent = procedure(Sender: TObject; DC: HDC; ARect: TRect; ADir: TLMDDirection; aDrawShadow: boolean; aEnabled: boolean; var aExitPainter: boolean) of object;
  TLMDThemesOnDrawGradientArrowEvent = procedure(Sender: TObject; DC: HDC; ARect: TRect; ADir: TLMDDirection; aState: TLMDThemedButtonState; var aExitPainter: boolean) of object;
  TLMDThemesOnDrawSimpleSignEvent = procedure(Sender: TObject; DC: HDC; ARect: TRect; aDrawShadow: boolean; var aExitPainter: boolean) of object;
  TLMDThemesOnDrawScrollThumbGripperEvent = procedure(Sender: TObject; DC: HDC; aRect: TRect; Detail: TThemedScrollBar; var aExitPainter: boolean) of object;

  TLMDThemesControllerBase = class;

  TLMDThemeRenderer = class(TObject)
  protected
    function GetEnabled: boolean; virtual; abstract;
    procedure SetEnabled(aValue: boolean); virtual; abstract;

    function GetActiveThemeName: TLMDString; virtual; abstract;
    function GetActiveColorSchemeName: TLMDString; virtual; abstract;

    function GetFormThemeProviderOptions: TLMDFormThemeProviderOptions; virtual;
    function GetFormThemeProvidersEnabled: boolean; virtual;
    procedure SetFormThemeProviderOptions(const Value: TLMDFormThemeProviderOptions); virtual;
    procedure SetFormThemeProvidersEnabled(const Value: boolean); virtual;
  public
    class function  Controller: TLMDThemesControllerBase; virtual;
    class procedure Init; virtual;
    class function GetThemeRendererName: TLMDString; virtual;

    function ActivateColorScheme(AColorScheme: string = ''; ADoApply: boolean = true): boolean; virtual; abstract;
    function ActivateTheme(AFileName: string; AColorScheme: String = ''): boolean; virtual; abstract;
    function ActivateDefaultTheme(AColorScheme: string = ''; aDoApply: boolean = true):boolean; virtual; abstract;
    procedure DeactivateTheme; virtual; abstract;
    constructor Create; virtual; abstract;
    function ContentRect(DC: HDC; Details: TThemedElementDetails; BoundingRect: TRect): TRect; virtual; abstract;

    function GetThemeBackgroundExtent(DC: HDC; Detail: TThemedElement; iPartID, iStateID: integer; ContentRect: TRect; var ExtentRect: TRect): boolean; virtual; abstract;
    function GetThemeColor(Detail: TThemedElement; iPartId, iStateId, iPropId: Integer): COLORREF; virtual; abstract;
    function GetThemeFont(DC: HDC; Detail: TThemedElement; iPartId, iStateId, iPropId:Integer; var font: LOGFONTW): Boolean; virtual; abstract;
    function GetThemePartSize(DC: HDC; Detail: TThemedElement; iPartId, iStateId:Integer; var size: TSize): Boolean; virtual; abstract;

    function GetThemeSysColor(Detail: TThemedElement; ColorID: integer): ColorRef; virtual; abstract;
    function GetThemeSysSize(Detail: TThemedElement; iSizeId: Integer): Integer; virtual; abstract;
    function GetThemeTextExtent(DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer; Text: TLMDString; CharCount: Integer; dwTextFlags: DWORD; BoundingRect: TLMDRectPtr; var ExtentRect: TRect): boolean; virtual; abstract;

    //<-- form theme provider support
    function GetCurrentThemeHandle: THandle; virtual;
    procedure RegisterFormThemeProvider(Value: TObject); virtual;
    procedure UnregisterFormThemeProvider(Value: TObject); virtual;
    //-->

    procedure DrawElement(DC: HDC; Detail: TThemedButton; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedButton; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedComboBox; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedComboBox; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedEdit; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedEdit; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedExplorerBar; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedExplorerBar; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedProgress; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedProgress; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedScrollBar; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedScrollBar; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedSpin; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedSpin; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedStatus; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedStatus; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTab; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTab; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedToolBar; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedToolBar; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedToolTip; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedToolTip; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTrackBar; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTrackBar; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedWindow; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedWindow; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;

    procedure DrawElement(DC: HDC; Detail: TThemedListview; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedListview; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedHeader; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedHeader; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTreeview; const R: TRect); overload; virtual; abstract;
    procedure DrawElement(DC: HDC; Detail: TThemedTreeview; const R: TRect; ClipRect: TLMDRectPtr); overload; virtual; abstract;

    procedure DrawElement(DC: HDC; Details: TThemedElementDetails; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload; virtual; abstract;

    procedure DrawThemeParentBackground(Wnd: HWnd; DC: HDC; ARect: TLMDRectPtr); virtual; abstract;

    function DrawThemeEdge(DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer; const pDestRect: TRect; uEdge, uFlags: UINT; pContentRect: TLMDRectPtr): boolean; overload; virtual; abstract;
    function DrawThemeText(DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer; Text: TLMDString; CharCount: Integer; dwTextFlags, dwTextFlags2: DWORD; const pRect: TRect): boolean; virtual; abstract;

    property Enabled: boolean read GetEnabled write SetEnabled;
    property ActiveThemeName: TLMDString read GetActiveThemeName;
    property ActiveColorSchemeName: TLMDString read GetActiveColorSchemeName;
    property FormThemeProvidersEnabled: boolean read GetFormThemeProvidersEnabled write SetFormThemeProvidersEnabled;
    property FormThemeProviderOptions: TLMDFormThemeProviderOptions read GetFormThemeProviderOptions write SetFormThemeProviderOptions;
  end;

  { ---------------------- TLMDThemesControllerBase -------------------------- }
  TLMDThemesControllerBase = class (TLMDCustomComponent)
  private
    FEnabled: boolean;
    FFormThemeProvidersEnabled: boolean;
    FFormThemeProviderOptions: TLMDFormThemeProviderOptions;

    function GetEnabled: boolean;
    procedure SetEnabled(const Value: boolean);
  protected
    procedure Notification(AComponent: TComponent; Operation: TOperation); override;
    procedure RegisterController; virtual;
    procedure UnregisterController; virtual;

    function GetThemeRenderer: TLMDThemeRenderer; virtual;
    function GetFormThemeProviderOptions: TLMDFormThemeProviderOptions; virtual;
    function GetFormThemeProvidersEnabled: boolean; virtual;
    procedure SetFormThemeProviderOptions(const Value: TLMDFormThemeProviderOptions); virtual;
    procedure SetFormThemeProvidersEnabled(const Value: boolean); virtual;

    property FormThemeProvidersEnabled: boolean read GetFormThemeProvidersEnabled write SetFormThemeProvidersEnabled;
    property FormThemeProviderOptions: TLMDFormThemeProviderOptions read GetFormThemeProviderOptions write SetFormThemeProviderOptions;
  public
    constructor Create(AOwner: TComponent); override;
    property ThemeRenderer: TLMDThemeRenderer read GetThemeRenderer;
  published
    property About;
    property Enabled: boolean read GetEnabled write SetEnabled;
  end;

  { --------------------------- TLMDThemeServices ---------------------------- }
  TLMDThemeServices = class(TObject)
  private
    FHWND: HWND;
    FSystemThemeIsChanging,
    FUseThemes : Boolean;
    FOnThemeChange: TNotifyEvent;
    FCurrentRenderer: TLMDThemeRenderer;
    FAvailableRenderers: TStringList;
    FSubstToolBarToButton: boolean;
    procedure SetSubstToolBarToButton(const Value: boolean);
  protected
    procedure DoOnThemeChange;
    procedure WndProc(var Message: TMessage);
  public
    constructor Create; virtual;
    destructor Destroy; override;
    function ActivateColorScheme(AColorScheme: string = ''): boolean;
    function ActivateTheme(AFileName: string; AColorScheme: String = ''): boolean;
    procedure DeactivateTheme;
    procedure ApplyThemeChange;
    function GetDetailOrd(Details: TThemedElementDetails): integer;
    function GetDetails(aElement: TThemedElement; aDetail: integer): TThemedElementDetails;
    procedure RegisterThemeRenderer(aThemeRenderer: TLMDThemeRenderer);

    procedure SelectThemeRenderer(aRendererName: string); overload;
    procedure SelectThemeRenderer(aRendererIndex: integer); overload;

    property SystemThemeIsChanging: boolean read FSystemThemeIsChanging;

    // helpers
    function ContentRect(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; BoundingRect: TRect): TRect;

    function GetThemePartSize(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId:Integer; var size: TSize): Boolean; overload;
    function GetThemePartSize(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; var size: TSize): Boolean; overload;

    function GetThemePartSizeNew(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId:Integer; var size: TSize): Boolean; overload;
    function GetThemePartSizeNew(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; var size: TSize): Boolean; overload;

    function GetThemeSysSize(Theme: TLMDThemeMode; Detail: TThemedElement; iSizeId: Integer): Integer;
    function GetThemeFont(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId, iPropId:Integer; var font: LOGFONTW):Boolean;

    function GetThemeTextExtent(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer; Text: TLMDString; CharCount: Integer; dwTextFlags: DWORD; BoundingRect: TLMDRectPtr; var ExtentRect: TRect): boolean; overload;
    function GetThemeTextExtent(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; Text: TLMDString; CharCount: Integer; dwTextFlags: DWORD; BoundingRect: TLMDRectPtr; var ExtentRect: TRect): boolean; overload;

    function GetThemeBackgroundExtent(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartID, iStateID: integer; ContentRect: TRect; var ExtentRect: TRect): boolean; overload;
    function GetThemeBackgroundExtent(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; ContentRect: TRect; var ExtentRect: TRect): boolean; overload;

    function GetThemeColor(Theme: TLMDThemeMode; Detail: TThemedElement; iPartId, iStateId, iPropId: Integer): COLORREF; overload;
    function GetThemeColor(Theme: TLMDThemeMode; const ADetails: TThemedElementDetails; iPropId: Integer): COLORREF; overload;
    function GetThemeSysColor(Theme: TLMDThemeMode; Detail: TThemedElement; ColorID: integer): ColorRef;

    procedure DrawThemeParentBackground(Theme: TLMDThemeMode; Wnd: HWnd; DC: HDC; ARect: TLMDRectPtr);
    //GetThemeMargins
    //GetThemeBackgroundRegion
    // drawing specific
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedButton; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedComboBox; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedEdit; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedExplorerBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedProgress; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedScrollBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedSpin; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedStatus; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTab; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedToolBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedToolTip; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTrackBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedWindow; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;

    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedListview; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedHeader; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTreeview; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    // drawing general
    procedure DrawElement(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr); overload;
    function  DrawThemeEdge(Theme: TLMDThemeMode; DC : HDC; Detail: TThemedElement; iPartId, iStateId: Integer; const pDestRect: TRect; uEdge, uFlags: UINT; pContentRect: TLMDRectPtr = LMDNullRectPtr):Boolean; overload;
    procedure DrawThemeText(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; Text: TLMDString; CharCount: integer; Flags, Flags2: Cardinal; R: TRect);
    // info and component helpers
    function UseTheme(const Value: TLMDThemeMode):TLMDThemeMode;
    function ThemesEnabled(const Value: TLMDThemeMode = ttmPlatform): Boolean;

    property CurrentRenderer: TLMDThemeRenderer read FCurrentRenderer;
    property AvailableRenderers: TStringList read FAvailableRenderers;
    property SubstToolBarToButton: boolean read FSubstToolBarToButton write SetSubstToolBarToButton;
    property OnThemeChange: TNotifyEvent read FOnThemeChange write FOnThemeChange;
  end;

  // global instance
  function LMDThemeServices: TLMDThemeServices;

  // helpers
  procedure LMDSetThemeMode(aParent: TWinControl; const Value: TLMDThemeMode);overload;
  procedure LMDSetThemeMode(aParent: TCustomForm; const Value: TLMDThemeMode);overload;

implementation
uses
  Types, Graphics, SysUtils, LMDGraphUtils, {$IFDEF LMDCOMP16}System.UITypes,{$ENDIF}
  LMDProcs;

var
  ThemeService : TLMDThemeServices = nil;

{$IFNDEF LMDCOMP12}
var
  hThemeLibrary : THandle = 0;

_GetThemeFont : function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId, iPropId: Integer; var pFont: LOGFONTW): HRESULT; stdcall;

function GetThemeFontW(hTheme: HTHEME; hdc: HDC; iPartId, iStateId, iPropId: Integer; out pFont: LOGFONTW): HRESULT;
begin
  if hThemeLibrary <> 0 then
    result := _GetThemeFont(hTheme, hdc, iPartID, iStateID, iPropId, pFont)
  else
    result := S_FALSE;
end;
{$ENDIF}

  // global
{ ---------------------------------------------------------------------------- }
function LMDThemeServices: TLMDThemeServices;
begin
  if not Assigned(ThemeService) then
    ThemeService := TLMDThemeServices.Create;
  result := ThemeService;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.RegisterThemeRenderer(aThemeRenderer: TLMDThemeRenderer);
begin
  FAvailableRenderers.AddObject(aThemeRenderer.GetThemeRendererName, aThemeRenderer);
  if FCurrentRenderer = nil then
    SelectThemeRenderer(aThemeRenderer.GetThemeRendererName);
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.ThemesEnabled(const Value: TLMDThemeMode): Boolean;
begin
  case value of
    ttmNone: result := true;  // always available
    ttmPlatform: result := FUseThemes;
  else
    result := Assigned(FCurrentRenderer) and FCurrentRenderer.Enabled;
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.UseTheme(const Value: TLMDThemeMode): TLMDThemeMode;
begin
  result := Value;
  // ThemeRenderers
  if ((result > ttmPlatform) and (Assigned(FCurrentRenderer)) and FCurrentRenderer.Enabled) or (result = ttmNone) then
    exit
  else
    result := ttmPlatform;  // if Renderer is not available, we use ttmPlatform
  // Platform theme
  if (result = ttmPlatform) and LMDApplication.UseXPThemes then
    exit;
  // if we are here, then no themes are available at all
  result := ttmNone;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DoOnThemeChange;
begin
  LMDApplication.DoThemeChange;
end;

{ ----------------------------- public --------------------------------------- }
constructor TLMDThemeServices.Create;
begin
  inherited;
  FUseThemes := UseThemes;
  FCurrentRenderer := nil;
  FAvailableRenderers := TStringList.Create;

  {$IFNDEF LMDCOMP12} // wrong GetThemeFont declaration in uxTheme.pas before D2008
  if (hThemeLibrary=0) then
    begin
      hThemeLibrary := SafeLoadLibrary('uxtheme.dll');
      if hThemeLibrary <> 0 then
        _GetThemeFont := GetProcAddress(hThemeLibrary, 'GetThemeFont');
      end;
  {$ENDIF}

  FHWND := AllocateHWnd(WndProc);
  FSubstToolBarToButton := true;
end;

{ ---------------------------------------------------------------------------- }
destructor TLMDThemeServices.Destroy;
begin
  {$IFNDEF LMDCOMP12}
  if hThemeLibrary<>0 then
    _GetThemeFont := nil;
  {$ENDIF}
  DeallocateHWnd(FHwnd);
  FAvailableRenderers.Clear;
  FAvailableRenderers.Free;
  inherited;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.ActivateColorScheme(AColorScheme: string): boolean;
begin
  result := false;
  if Assigned(FCurrentRenderer) then
    result := FCurrentRenderer.ActivateColorScheme(AColorScheme);
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.ActivateTheme(AFileName, AColorScheme: String): boolean;
begin
  result := false;
  if Assigned(FCurrentRenderer) then
    result := FCurrentRenderer.ActivateTheme(AFileName, AColorScheme);
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.ApplyThemeChange;
begin
  //UpdateThemes;
  DoOnThemeChange;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeColor(Theme: TLMDThemeMode;
  Detail: TThemedElement; iPartId, iStateId, iPropId: Integer): COLORREF;
var
  {$IFDEF LMDCOMP16}
  c: TColor;
  d: TThemedElementDetails;
  {$ELSE}
  c: COLORREF;
  {$ENDIF}
begin
  { cases to handle:
    * teButton, BP_GROUPBOX (iPartID) --> TMT_TEXTCOLOR (iPropID) --> stateId: GBS_NORMAL = 1, GBS_DISABLED = 2
    * teExplorerBar, EBP_NORMALGROUPHEAD, EBP_HEADERBACKGROUND, TMT_TEXTCOLOR
    * teExplorerBar, EBP_NORMALGROUPBACKGROUND, EBP_HEADERBACKGROUND, TMT_TEXTCOLOR
    * teComboBox, 0, CBXS_DISABLED/Normal/Hot, TMT_FILLCOLOR
  }
  result := clNone;

  case UseTheme(Theme) of
    ttmPlatform:
    begin
      {$IFDEF LMDCOMP16}
      d.Element := Detail;
      d.Part    := iPartId;
      d.State   := iStateId;

      if StyleServices.GetElementColor(d, TElementColor(iPropId -
                                       TMT_BORDERCOLOR), c) then
        Result := c;
      {$ELSE}
      if Succeeded(uxTheme.GetThemeColor(ThemeServices.Theme[Detail],
                   iPartID, iStateID, iPropID,c)) then
        Result := c;
      {$ENDIF}
    end;
    ttmNative:
      Result := FCurrentRenderer.GetThemeColor(Detail, iPartID,
                                               iStateID, iPropID);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeSysColor(Theme: TLMDThemeMode;
  Detail: TThemedElement; ColorID: integer): ColorRef;
begin
  Result := clNone;

  case UseTheme(Theme) of
    ttmPlatform:
    begin
      {$IFDEF LMDCOMP16}
      if ColorID = COLOR_WINDOW then
        Result := StyleServices.GetStyleColor(scEdit)
      else
        Result := StyleServices.GetSystemColor(DWORD(ColorID) or $FF000000);
      {$ELSE}
      Result := uxTheme.GetThemeSysColor(ThemeServices.Theme[Detail], ColorID);
      {$ENDIF}
    end;
    ttmNative:
      result := FCurrentRenderer.GetThemeSysColor(Detail, ColorID);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeFont(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId, iPropId: Integer; var font: LOGFONTW): Boolean;
// tiExplorerBar, EBP_NORMALGROUPBACKGROUND,0, TMT_FONT
begin
  result := false;
  case UseTheme(Theme) of
    ttmPlatform:
      {$IFNDEF LMDCOMP12}
      result := GetThemeFontW(ThemeServices.Theme[Detail], DC, iPartID, iStateId, iPropId, font) = S_OK
      {$ELSE}
      result := uxTheme.GetThemeFont(ThemeServices.Theme[Detail], DC, iPartID, iStateId, iPropId, font) = S_OK
      {$ENDIF};
    ttmNative:
      result := FCurrentRenderer.GetThemeFont(DC, Detail, iPartID, iStateId, iPropId, font);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeTextExtent(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer; Text: TLMDString; CharCount: Integer; dwTextFlags: DWORD; BoundingRect: TLMDRectPtr; var ExtentRect: TRect): boolean;
begin
  Result := false;
  case UseTheme(Theme) of
    ttmPlatform:
    begin
      {$IFDEF LMDCOMP16}
      if StyleServices.Enabled and not StyleServices.IsSystemStyle then
      begin
        //quick and dirty workaround - redo later      
        ExtentRect := Rect(0,0,Length(Text), 3);
        InflateRect(ExtentRect, 1, 0);
        result := true;
      end
      else
      {$ENDIF}
      result := uxTheme.GetThemeTextExtent(ThemeServices.Theme[Detail], DC, iPartId, iStateId, PWideChar(WideString(Text)), CharCount, dwTextFlags, BoundingRect, ExtentRect) = S_OK;
    end;
    ttmNative:
      result := FCurrentRenderer.GetThemeTextExtent(DC, Detail, iPartId, iStateId, Text, CharCount, dwTextFlags, BoundingRect, ExtentRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeTextExtent(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; Text: TLMDString; CharCount: Integer; dwTextFlags: DWORD; BoundingRect: TLMDRectPtr; var ExtentRect: TRect): boolean;
begin
  Result := GetThemeTextExtent(Theme, DC, Details.Element, Details.Part, Details.State, Text, CharCount, dwTextFlags, BoundingRect, ExtentRect);
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawThemeParentBackground(Theme: TLMDThemeMode; Wnd: HWnd; DC: HDC; ARect: TLMDRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      uxTheme.DrawThemeParentBackground(Wnd, DC, ARect);
    ttmNative:
      FCurrentRenderer.DrawThemeParentBackground(Wnd, DC, ARect);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeBackgroundExtent(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartID, iStateID: integer; ContentRect: TRect; var ExtentRect: TRect): boolean;
begin
  Result := false;
  case UseTheme(Theme) of
    ttmPlatform:
      result := uxTheme.GetThemeBackgroundExtent(ThemeServices.Theme[Detail], DC, iPartId, iStateId, ContentRect, ExtentRect) = S_OK;
    ttmNative:
      result := FCurrentRenderer.GetThemeBackgroundExtent(DC, Detail, iPartId, iStateId, ContentRect, ExtentRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemeBackgroundExtent(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; ContentRect: TRect; var ExtentRect: TRect): boolean;
begin
  Result := GetThemeBackgroundExtent(Theme, DC, Details.Element, Details.Part, Details.State, ContentRect, ExtentRect);
end;

function TLMDThemeServices.GetThemeColor(Theme: TLMDThemeMode;
  const ADetails: TThemedElementDetails; iPropId: Integer): COLORREF;
begin
  Result := GetThemeColor(Theme, ADetails.Element, ADetails.Part,
                          ADetails.State, iPropId);
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetThemePartSize(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId:Integer; var size: TSize): Boolean;
// teButton: BP_CHECKBOX, CBS_CHECKEDNORMAL
// teButton: BP_RADIOBUTTON, RBS_UNCHECKEDNORMAL
// teToolTip: TTP_CLOSE, TTCS_NORMAL
// teWindow, WP_SMALLCLOSEBUTTON, PBS_NORMAL
begin
  result := false;
  case UseTheme(Theme) of
    ttmPlatform:
      result := uxTheme.GetThemePartSize(ThemeServices.Theme[Detail], DC, iPartID, iStateId, nil, TS_TRUE, size) = S_OK;
    ttmNative:
      result := FCurrentRenderer.GetThemePartSize(DC, Detail, iPartID, iStateId, size);
  end;
end;

{------------------------------------------------------------------------------}
function TLMDThemeServices.GetThemePartSizeNew(Theme: TLMDThemeMode; DC: HDC;
  Detail: TThemedElement; iPartId, iStateId:Integer; var size: TSize): Boolean;
{$IFDEF LMDCOMP16}
var
  dtls: TThemedElementDetails;
{$ENDIF}
// teButton: BP_CHECKBOX, CBS_CHECKEDNORMAL
// teButton: BP_RADIOBUTTON, RBS_UNCHECKEDNORMAL
// teToolTip: TTP_CLOSE, TTCS_NORMAL
// teWindow, WP_SMALLCLOSEBUTTON, PBS_NORMAL
begin
  case UseTheme(Theme) of
    ttmPlatform:
    begin
      {$IFDEF LMDCOMP16}
      dtls.Element := Detail;
      dtls.Part    := iPartId;
      dtls.State   := iStateId;
      Result       := StyleServices.GetElementSize(DC, dtls, esActual, size);
      {$ELSE}
      Result := (uxTheme.GetThemePartSize(ThemeServices.Theme[Detail], DC, iPartID, iStateId, nil, TS_TRUE, size) = S_OK);
      {$ENDIF}
    end;
    ttmNative:
      Result := FCurrentRenderer.GetThemePartSize(DC, Detail, iPartID, iStateId, size);
    else
      Result := False;
  end;
end;

{------------------------------------------------------------------------------}
function TLMDThemeServices.GetThemePartSize(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; var size: TSize): Boolean;
begin
  Result := GetThemePartSize(Theme, DC, Details.Element, Details.Part, Details.State, Size);
end;

function TLMDThemeServices.GetThemePartSizeNew(Theme: TLMDThemeMode; DC: HDC;
  Details: TThemedElementDetails; var size: TSize): Boolean;
begin
  Result := GetThemePartSizeNew(Theme, DC, Details.Element, Details.Part, Details.State, Size);
end;

{------------------------------------------------------------------------------}
function TLMDThemeServices.GetThemeSysSize(Theme: TLMDThemeMode; Detail: TThemedElement; iSizeId: Integer): Integer;
begin
  result := 0;
  case UseTheme(Theme) of
    ttmPlatform:
      result := uxTheme.GetThemeSysSize(ThemeServices.Theme[Detail], iSizeID);
    ttmNative:
      result := FCurrentRenderer.GetThemeSysSize(Detail, iSizeID);
  end;
end;
{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.WndProc(var Message: TMessage);
begin
  with Message do
    case msg of
      WM_THEMECHANGED:
        begin
          if LMDApplication.UseXPThemes then
            begin
              FSystemThemeIsChanging := true;
              ThemeServices.ApplyThemeChange;
              LMDApplication.DoThemeChange;
              FSystemThemeIsChanging := false;
            end;
       end;
    else
      Result := DefWindowProc(FHwnd, Msg, wParam, lParam);
    end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.ContentRect(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; BoundingRect: TRect): TRect;
// teEditTextNormal, teEditTextFocused, teEditTextFocused, teEditTexReadOnly, teEditTextDisabled
// tpBar,  tpBarVert,  tpChunk, tpChunkVert
// ttbTrack, ttbTrackVert
begin
  result := BoundingRect;
  case UseTheme(Theme) of
    ttmPlatform:
      Result := ThemeServices.ContentRect(DC, Details, BoundingRect);
    ttmNative:
      Result := FCurrentRenderer.ContentRect(DC, Details, BoundingRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedButton; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);

begin
  //  tbPushButtonNormal, tbPushButtonHot, tbPushButtonPressed, tbPushButtonDisabled, tbPushButtonDefaulted
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      //ttmNative:
    //  FCurrentRenderer.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
    ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedComboBox; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  //tcDropDownButtonNormal, tcDropDownButtonHot,  tcDropDownButtonPressed,  tcDropDownButtonDisabled
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedEdit; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
// teEditTextNormal, teEditTextFocused, teEditTextFocused, teEditTexReadOnly, teEditTextDisabled
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedExplorerBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTab; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  // ttPane
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedProgress; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  //tpBar,  tpBarVert,  tpChunk, tpChunkVert
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedScrollBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  //tsSizeBoxRightAlign
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedSpin; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedStatus; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  // tsGripper, tsGripperPane
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedToolTip; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedToolBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
   { ttbButtonNormal, ttbButtonHot, ttbButtonPressed,
    ttbButtonDisabled, ttbButtonChecked, ttbButtonCheckedHot,

    ttbDropDownButtonNormal, ttbDropDownButtonHot, ttbDropDownButtonPressed,
    ttbDropDownButtonDisabled, ttbDropDownButtonChecked, ttbDropDownButtonCheckedHot,

    ttbSplitButtonNormal, ttbSplitButtonHot, ttbSplitButtonPressed,
    ttbSplitButtonDisabled, ttbSplitButtonChecked, ttbSplitButtonCheckedHot,

    ttbSplitButtonDropDownNormal, ttbSplitButtonDropDownHot,
    ttbSplitButtonDropDownPressed, ttbSplitButtonDropDownDisabled,
    ttbSplitButtonDropDownChecked, ttbSplitButtonDropDownCheckedHot,}
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTrackBar; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
    {ttbThumbNormal, ttbThumbHot //, ttbThumbPressed, ttbThumbFocused, ttbThumbDisabled,
    ttbThumbBottomNormal, ttbThumbBottomHot, ttbThumbBottomPressed, ttbThumbBottomFocused, ttbThumbBottomDisabled,
    ttbThumbTopNormal, ttbThumbTopHot, ttbThumbTopPressed, ttbThumbTopFocused, ttbThumbTopDisabled,
    ttbThumbVertNormal, ttbThumbVertHot, ttbThumbVertPressed, ttbThumbVertFocused, ttbThumbVertDisabled,
    ttbThumbLeftNormal, ttbThumbLeftHot, ttbThumbLeftPressed, ttbThumbLeftFocused, ttbThumbLeftDisabled,
    ttbThumbRightNormal, ttbThumbRightHot, ttbThumbRightPressed, ttbThumbRightFocused, ttbThumbRightDisabled,
    ttbThumbTics // usually only Normal / HotState}
    //ttbTrack, ttbTrackVert,

  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedWindow; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  //twSysButtonNormal,  twSysButtonHot,  twSysButtonPushed,
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedListview; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedTreeview; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;

procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedHeader; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, ThemeServices.GetElementDetails(Detail), R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Detail, R, ClipRect);
  end;
end;
{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawElement(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails; const R: TRect; ClipRect: TLMDRectPtr = LMDNullRectPtr);
begin
  case UseTheme(Theme) of
    ttmPlatform:
      ThemeServices.DrawElement(DC, Details, R, ClipRect);
      ttmNative:
      FCurrentRenderer.DrawElement(DC, Details, R, ClipRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DrawThemeText(Theme: TLMDThemeMode; DC: HDC; Details: TThemedElementDetails;
          Text: TLMDString; CharCount: integer; Flags, Flags2: Cardinal; R: TRect);
begin
  if (Details.Element=teToolBar) and (Details.Part = 1) and (Details.State = 4) and (SubstToolBarToButton) then
    Details.Element := teButton;
  case UseTheme(Theme) of
    ttmPlatform:
    begin
       {$IFDEF LMDCOMP16}
       if StyleServices.Enabled and not StyleServices.IsSystemStyle then
         StyleServices.DrawText(DC, Details, Text, R, Flags, Flags2)
       else 
       {$ENDIF}
       uxTheme.DrawThemeText(ThemeServices.Theme[Details.Element], DC, Details.Part, Details.State, PWideChar(WideString(Text)), CharCount, Flags, Flags2, R);
    end;
    ttmNative:
      FCurrentRenderer.DrawThemeText(DC, Details.Element, Details.Part, Details.State, Text, CharCount, Flags, Flags2, R);
  end;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.DrawThemeEdge(Theme: TLMDThemeMode; DC: HDC; Detail: TThemedElement; iPartId, iStateId: Integer;
                                         const pDestRect: TRect; uEdge, uFlags: UINT; pContentRect: TLMDRectPtr):Boolean;

// teEdit, EP_EDITTEXT, ETS_NORMAL, TLMDComboTrackbar / BDR_RAISEDINNER, BF_RECT
begin
  result := false;
  case UseTheme(Theme) of
    ttmPlatform:
      result := uxTheme.DrawThemeEdge(ThemeServices.Theme[Detail], DC, iPartID, iStateId, pDestRect, uEdge, uFlags, pContentRect) = S_OK;
    ttmNative:
      result := FCurrentRenderer.DrawThemeEdge(DC, Detail, iPartID, iStateId, pDestRect, uEdge, uFlags, pContentRect);
  end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.SelectThemeRenderer(aRendererName: string);
var
  i: integer;
begin
  i := FAvailableRenderers.IndexOf(aRendererName);
  if (i >= 0) and Assigned(FAvailableRenderers.Objects[i]) then
    begin
      FCurrentRenderer := TLMDThemeRenderer(FAvailableRenderers.Objects[i]);
      FCurrentRenderer.ActivateDefaultTheme;
      ApplyThemeChange;
    end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.SelectThemeRenderer(aRendererIndex: integer);
begin
  if (aRendererIndex >= 0) and (aRendererIndex < FAvailableRenderers.Count) then
    if Assigned(FAvailableRenderers.Objects[aRendererIndex]) then
      begin
        FCurrentRenderer := TLMDThemeRenderer(FAvailableRenderers.Objects[aRendererIndex]);
        FCurrentRenderer.ActivateDefaultTheme;
        ApplyThemeChange;
      end
end;

{ ---------------------------------------------------------------------------- }
procedure LMDSetThemeMode(aParent: TCustomForm; const Value: TLMDThemeMode);
var
  i:Integer;
begin
  if not (aParent is TCustomForm) or (aParent = nil) then exit;
  with aParent do
    for i:=0 to ComponentCount-1 do
      if IsPublishedProp(Components[i], 'ThemeMode') then
        SetOrdProp(Components[i], 'ThemeMode', Ord(Value));
end;

{ ---------------------------------------------------------------------------- }
procedure LMDSetThemeMode(aParent: TWinControl; const Value: TLMDThemeMode);
var
  i:Integer;
begin
  if aParent = nil then exit;
  with aParent do
    for i:=0 to ComponentCount-1 do
      if IsPublishedProp(Components[i], 'ThemeMode') then
        SetOrdProp(Components[i], 'ThemeMode', Ord(Value));
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetDetailOrd(Details: TThemedElementDetails): integer;
begin
  Result := 0;
  with Details do
    case Element of
      teButton:
        begin
          if Part = BP_PUSHBUTTON then
            Result := ord(tbPushButtonNormal);
          if Part = BP_RADIOBUTTON then
            Result := ord(tbRadioButtonUncheckedNormal);
          if Part = BP_CHECKBOX then
            Result := ord(tbCheckBoxUncheckedNormal);
          Result := Result + State - 1;
        end;
      teClock:;
      teComboBox:
        begin
          if (Part = 0) and (State = 4) then
            result := 5
          else
            if Part = cp_dropdownbutton then
              Result := State + Ord(tcDropDownButtonNormal) - 1
            else
              Result := State - 1;
        end;
      teEdit:
        begin
          case Part of
            EP_EDITTEXT: Result := ord(teEditTextNormal);
            EP_CARET: Result := ord(teEditCaret);
          end;
          Result := Result + State - 1;
        end;
      teExplorerBar:;
      teHeader:
        begin
          case Part of
            HP_HEADERITEM:
              Result := ord(thHeaderItemNormal);
            HP_HEADERITEMLEFT:
              Result := ord(thHeaderItemLeftNormal);
            HP_HEADERITEMRIGHT:
              Result := ord(thHeaderItemRightNormal);
            HP_HEADERSORTARROW:
              Result := ord(thHeaderSortArrowSortedUp);
          end;
          if (Part = 0) and (State=0) then
            Result := ord(thHeaderItemNormal)
          else
            Result := Result + State - 1;
        end;
      teListView:;
      teMenu:;
      tePage:
        begin
          (*tp := TThemedPage(0);
          case Part of
            PGRP_UP: tp := tpUpNormal;
            PGRP_DOWN: tp := tpDownNormal;
            PGRP_UPHORZ: tp := tpUpHorzNormal;
            PGRP_DOWNHORZ: tp := tpDownHorzNormal;
          end;
          tp := TThemedPage(ord(tp) + State - 1);
          DrawElement(DC, tp, R);*)
        end;
      teProgress:
        begin
          case Part of
            PP_BAR:
              Result := ord(tpBar);
            PP_BARVERT:
              Result := ord(tpBarVert);
            PP_CHUNK:
              Result := ord(tpChunk);
            PP_CHUNKVERT:
              Result := ord(tpChunkVert);
          end;
          Result := Result + State - 1;
        end;
      teRebar:;
      teScrollBar:
        begin
          case Part of
            SBP_ARROWBTN:
              Result := Ord(tsArrowBtnUpNormal);
            SBP_THUMBBTNHORZ:
              Result := Ord(tsThumbBtnHorzNormal);
            SBP_THUMBBTNVERT:
              Result := Ord(tsThumbBtnVertNormal);
            SBP_LOWERTRACKHORZ:
              Result := Ord(tsLowerTrackHorzNormal);
            SBP_UPPERTRACKHORZ:
              Result := Ord(tsUpperTrackHorzNormal);
            SBP_LOWERTRACKVERT:
              Result := Ord(tsLowerTrackVertNormal);
            SBP_UPPERTRACKVERT:
              Result := Ord(tsUpperTrackVertNormal);
            SBP_GRIPPERHORZ:
              Result := Ord(tsGripperHorzNormal);
            SBP_GRIPPERVERT:
              Result := Ord(tsGripperVertNormal);
            SBP_SIZEBOX:
              Result := Ord(tsSizeBoxRightAlign);
          end;
          result := result + State - 1;
        end;
      teSpin:
        begin
          case Part of
            SPNP_UP: Result := ord(tsUpNormal);
            SPNP_DOWN: Result := ord(tsDownNormal);
            SPNP_UPHORZ: Result := ord(tsUpHorzNormal);
            SPNP_DOWNHORZ: Result := ord(tsDownHorzNormal);
          end;
          result := result + State - 1;
        end;
      teStartPanel:;
      teStatus:
        begin
          case Part of
            SP_PANE: result := ord(tsPane);
            SP_GRIPPERPANE: result := ord(tsGripperPane);
            SP_GRIPPER: result := ord(tsGripper);
          end;
          result := result + State - 1;
        end;
      teTab:
        begin
          case Part of
            TABP_TABITEM:
              result := ord(ttTabItemNormal);
            TABP_TABITEMLEFTEDGE:
              result := ord(ttTabItemLeftEdgeNormal);
            TABP_TABITEMRIGHTEDGE:
              result := ord(ttTabItemRightEdgeNormal);
            TABP_TABITEMBOTHEDGE:
              result := ord(ttTabItemBothEdgeNormal);
            TABP_TOPTABITEM:
              result := ord(ttTopTabItemNormal);
            TABP_TOPTABITEMLEFTEDGE:
              result := ord(ttTopTabItemLeftEdgeNormal);
            TABP_TOPTABITEMRIGHTEDGE:
              result := ord(ttTopTabItemRightEdgeNormal);
            TABP_TOPTABITEMBOTHEDGE:
              result := ord(ttTopTabItemBothEdgeNormal);
            TABP_PANE:
              result := ord(ttPane);
            TABP_BODY:
              result := ord(ttBody);
          end;
          result := result + State - 1;
        end;
      teTaskBand:;
      teTaskBar:;
      teToolBar:
        begin
          case Part of
            TP_BUTTON:
              result := ord(ttbButtonNormal);
            TP_DROPDOWNBUTTON:
              result := Ord(ttbDropDownButtonNormal);
            TP_SPLITBUTTON:
              result := Ord(ttbSplitButtonNormal);
            TP_SPLITBUTTONDROPDOWN:
              result := Ord(ttbSplitButtonDropDownNormal);
            TP_SEPARATOR:
              result := Ord(ttbSeparatorNormal);
            TP_SEPARATORVERT:
              result := Ord(ttbSeparatorVertNormal);
          end;
          Result := Result + State - 1;          
        end;
      teToolTip:;
      teTrackBar:
        begin
          case Part of
            TRACKBARPartFiller0:
              result := ord(ttbTrackbarDontCare);
            TKP_TRACK:
              result := ord(ttbTrack);
            TKP_TRACKVERT:
              result := ord(ttbTrackVert);
            TKP_THUMB:
              result := ord(ttbThumbNormal);
            TKP_THUMBBOTTOM:
              result := ord(ttbThumbBottomNormal);
            TKP_THUMBTOP:
              result := ord(ttbThumbTopNormal);
            TKP_THUMBVERT:
              result := ord(ttbThumbVertNormal);
            TKP_THUMBLEFT:
              result := ord(ttbThumbLeftNormal);
            TKP_THUMBRIGHT:
              result := ord(ttbThumbRightNormal);
            TKP_TICS:
              result := ord(ttbThumbTics);
            TKP_TICSVERT:
              result := ord(ttbThumbTicsVert);
          end;
          Result := Result + State - 1;
        end;
      teTrayNotify:;
      teTreeview:
        begin
          case Part of
            TREEVIEWPartFiller0:
              result := ord(ttTreeviewRoot);
            TVP_TREEITEM:
              result := ord(ttItemNormal);
            TVP_GLYPH:
              result := ord(ttGlyphClosed);
            TVP_BRANCH:
              result := ord(ttBranch);
          end;
          Result := Result + State - 1;
        end;
      teWindow:
        begin
          if Part = WP_SMALLCLOSEBUTTON then
            begin
              result := ord(twSmallCloseButtonNormal) + State - 1;
            end;
        end;
    end;
  if Result < 0 then
    Result := 0;
end;

{ ---------------------------------------------------------------------------- }
function TLMDThemeServices.GetDetails(aElement: TThemedElement;
  aDetail: integer): TThemedElementDetails;
begin
  with ThemeServices do
    case aElement of
      teButton: result := GetElementDetails(TThemedButton(aDetail));
      teClock: result := GetElementDetails(TThemedClock(aDetail));
      teCombobox : result := GetElementDetails(TThemedComboBox(aDetail));
      teEdit: result := GetElementDetails(TThemedEdit(aDetail));
      teExplorerBar: result := GetElementDetails(TThemedExplorerBar(aDetail));
      teHeader: result := GetElementDetails(TThemedHeader(aDetail));
      teListView: result := GetElementDetails(TThemedListView(aDetail));
      teMenu: result := GetElementDetails(TThemedMenu(aDetail));
      tePage: result := GetElementDetails(TThemedPage(aDetail));
      teProgress: result := GetElementDetails(TThemedProgress(aDetail));
      teRebar: result := GetElementDetails(TThemedRebar(aDetail));
      teScrollBar: result := GetElementDetails(TThemedScrollBar(aDetail));
      teSpin: result := GetElementDetails(TThemedSpin(aDetail));
      teStartPanel: result := GetElementDetails(TThemedStartPanel(aDetail));
      teStatus: result := GetElementDetails(TThemedStatus(aDetail));
      teTab: result := GetElementDetails(TThemedTab(aDetail));
      teTaskBand: result := GetElementDetails(TThemedTaskBand(aDetail));
      teTaskBar: result := GetElementDetails(TThemedTaskBar(aDetail));
      teToolBar: result := GetElementDetails(TThemedToolBar(aDetail));
      teToolTip: result := GetElementDetails(TThemedToolTip(aDetail));
      teTrackBar: result := GetElementDetails(TThemedTrackBar(aDetail));
      teTrayNotify: result := GetElementDetails(TThemedTrayNotify(aDetail));
      teTreeview: result := GetElementDetails(TThemedTreeview(aDetail));
      teWindow: result := GetElementDetails(TThemedWindow(aDetail));
    end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.SetSubstToolBarToButton(const Value: boolean);
begin
  if FSubstToolBarToButton <> Value then
    begin
      FSubstToolBarToButton := Value;
      ApplyThemeChange;
    end;
end;

{ ---------------------------------------------------------------------------- }
procedure TLMDThemeServices.DeactivateTheme;
begin
  if Assigned(FCurrentRenderer) then
    begin
      FCurrentRenderer.DeactivateTheme;
      ApplyThemeChange;
    end;
end;

{-------------------- TLMDThemesControllerBase --------------------------------}
constructor TLMDThemesControllerBase.Create(AOwner: TComponent);
begin
  inherited;
  FEnabled := true;
end;

{------------------------------------------------------------------------------}
function TLMDThemesControllerBase.GetEnabled: boolean;
begin
  result := FEnabled;
end;

{------------------------------------------------------------------------------}
function TLMDThemesControllerBase.GetFormThemeProviderOptions: TLMDFormThemeProviderOptions;
begin
  result := FFormThemeProviderOptions;
end;

{------------------------------------------------------------------------------}
function TLMDThemesControllerBase.GetFormThemeProvidersEnabled: boolean;
begin
  result := FFormThemeProvidersEnabled;
end;

{------------------------------------------------------------------------------}
function TLMDThemesControllerBase.GetThemeRenderer: TLMDThemeRenderer;
begin
  raise Exception.Create('TLMDThemesControllerBase.GetThemeRenderer method is not implemented!');
end;

{------------------------------------------------------------------------------}
procedure TLMDThemesControllerBase.Notification(AComponent: TComponent;
  Operation: TOperation);
begin
  inherited Notification(AComponent, Operation);
  if (Operation=opRemove) and (AComponent=self) then
    UnregisterController;
  if (Operation=opInsert) then
    RegisterController;
end;

procedure TLMDThemesControllerBase.SetEnabled(const Value: boolean);
begin
  FEnabled := value;
  if Assigned(ThemeRenderer) then
  begin
    ThemeRenderer.Enabled := FEnabled;
    if FEnabled and not (csDesigning in ComponentState) then
      LMDThemeServices.SelectThemeRenderer(ThemeRenderer.GetThemeRendererName);
  end;
end;

{----------------------------- TLMDThemeRenderer ------------------------------}
function TLMDThemeRenderer.GetCurrentThemeHandle: THandle;
begin
  //This is dummy method for LMDFormThemeProvider
  //For all non-LMDThemeEngine renderers just reflects Enabled value 
  if Enabled then
    result := 1
  else
    result := 0;
end;

{------------------------------------------------------------------------------}
function TLMDThemeRenderer.GetFormThemeProviderOptions: TLMDFormThemeProviderOptions;
begin
  result := [];
end;

{------------------------------------------------------------------------------}
function TLMDThemeRenderer.GetFormThemeProvidersEnabled: boolean;
begin
  result := false;
end;

{------------------------------------------------------------------------------}
procedure TLMDThemeRenderer.SetFormThemeProviderOptions(
  const Value: TLMDFormThemeProviderOptions);
begin
  //do nothing
end;

{------------------------------------------------------------------------------}
procedure TLMDThemeRenderer.SetFormThemeProvidersEnabled(
  const Value: boolean);
begin
  //do nothing
end;

{------------------------------------------------------------------------------}
class function  TLMDThemeRenderer.Controller: TLMDThemesControllerBase;
begin
  raise Exception.Create('TLMDThemesRenderer.Controller method is not implemented!');
end;

{------------------------------------------------------------------------------}
class function TLMDThemeRenderer.GetThemeRendererName: TLMDString;
begin
  result := '';
end;

{------------------------------------------------------------------------------}
class procedure TLMDThemeRenderer.Init;
begin
  raise Exception.Create('TLMDThemesRenderer.Init method is not implemented!');
end;

{------------------------------------------------------------------------------}
procedure TLMDThemesControllerBase.SetFormThemeProviderOptions(
  const Value: TLMDFormThemeProviderOptions);
begin
  FFormThemeProviderOptions := Value;
end;

{------------------------------------------------------------------------------}
procedure TLMDThemesControllerBase.SetFormThemeProvidersEnabled(
  const Value: boolean);
begin
  FFormThemeProvidersEnabled := Value;
end;

{------------------------------------------------------------------------------}
procedure TLMDThemeRenderer.RegisterFormThemeProvider(Value: TObject);
begin
  //do nothing
end;

{------------------------------------------------------------------------------}
procedure TLMDThemeRenderer.UnregisterFormThemeProvider(Value: TObject);
begin
  //do nothing
end;

{------------------------------------------------------------------------------}
procedure TLMDThemesControllerBase.RegisterController;
begin
  raise Exception.Create(self.ClassName + '.RegisterController method undefined!');
end;

{------------------------------------------------------------------------------}
procedure TLMDThemesControllerBase.UnregisterController;
begin
  raise Exception.Create(self.ClassName + '.UnregisterController method undefined!');
end;


initialization


finalization
  if  Assigned(ThemeService) and ((not IsLibrary) or (not ModuleIsPackage)) then
    LMDThemeServices.Free;
  {$IFNDEF LMDCOMP12}
  if hThemeLibrary > 0 then
    FreeLibrary(hThemeLibrary);
  {$ENDIF}
end.
